import { ɵɵgetCurrentView, ɵɵelementStart, ɵɵlistener, ɵɵrestoreView, ɵɵnextContext, ɵɵtext, ɵɵelementEnd, ɵɵadvance, ɵɵtextInterpolate, ɵɵelement, ɵɵproperty, EventEmitter, ɵɵdefineComponent, ɵɵviewQuery, ɵɵqueryRefresh, ɵɵloadQuery, ɵɵNgOnChangesFeature, ɵɵtemplate, ɵsetClassMetadata, Component, ViewChild, Input, Output, ɵɵstyleMap, ɵɵpureFunction0, ɵɵpipe, ɵɵpipeBind1, ɵɵpropertyInterpolate, ɵɵtextInterpolate1, ɵɵclassProp, ɵɵdirectiveInject, ElementRef, ChangeDetectorRef, ChangeDetectionStrategy, ViewChildren, ɵɵstyleProp, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule } from '@angular/core';
import { NgIf, NgForOf, NgSwitch, NgSwitchCase, NgSwitchDefault, AsyncPipe, CommonModule } from '@angular/common';
import { ButtonDirective } from 'primeng/button';
import { DefaultValueAccessor, NgControlStatus, NgModel, FormControl, FormGroup, Validators, ɵangular_packages_forms_forms_y, NgControlStatusGroup, FormGroupDirective, FormControlName, FormControlDirective, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { InputText, InputTextModule } from 'primeng/inputtext';
import { of, forkJoin, fromEvent } from 'rxjs';
import { JsonEditorOptions, JsonEditorComponent, NgJsonEditorModule } from 'ang-jsoneditor';
import { debounceTime, distinctUntilChanged, tap } from 'rxjs/operators';
import { AppSettings, ZuluDateHelper, ReferenceValue, ObjectPathHelper, InputTypes } from '@ngscaffolding/models';
import { AppSettingsService, AppSettingsQuery, UserAuthenticationQuery, ReferenceValuesService, ComponentLoaderService, UserAuthenticationBase, CoreModule } from '@ngscaffolding/core';
import { Password, PasswordModule } from 'primeng/password';
import { KeyFilter, KeyFilterModule } from 'primeng/keyfilter';
import { Slider, SliderModule } from 'primeng/slider';
import { InputMask, InputMaskModule } from 'primeng/inputmask';
import { Spinner, SpinnerModule } from 'primeng/spinner';
import { InputTextarea, InputTextareaModule } from 'primeng/inputtextarea';
import { Checkbox, CheckboxModule } from 'primeng/checkbox';
import { Dropdown, DropdownModule } from 'primeng/dropdown';
import { AutoComplete, AutoCompleteModule } from 'primeng/autocomplete';
import { Chips, ChipsModule } from 'primeng/chips';
import { MultiSelect, MultiSelectModule } from 'primeng/multiselect';
import { InputSwitch, InputSwitchModule } from 'primeng/inputswitch';
import { Calendar, CalendarModule } from 'primeng/calendar';
import { FileUpload, FileUploadModule } from 'primeng/fileupload';
import { Tooltip, TooltipModule } from 'primeng/tooltip';
import { TranslatePipe, TranslateModule } from '@ngx-translate/core';
import { Dialog, DialogModule } from 'primeng/dialog';
import { Header, SharedModule } from 'primeng/api';
import { EditorModule } from 'primeng/editor';
import { ListboxModule } from 'primeng/listbox';
import { SelectButtonModule } from 'primeng/selectbutton';
import { ColorPickerModule } from 'primeng/colorpicker';
import { TriStateCheckboxModule } from 'primeng/tristatecheckbox';
import { RadioButtonModule } from 'primeng/radiobutton';
import { RatingModule } from 'primeng/rating';
import { ToggleButtonModule } from 'primeng/togglebutton';

const _c0 = ["inputTitle"];
function EditableTitleComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 3);
    ɵɵlistener("click", function EditableTitleComponent_span_0_Template_span_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.mouseClicked(); })("mouseleave", function EditableTitleComponent_span_0_Template_span_mouseleave_0_listener() { ɵɵrestoreView(_r4); const ctx_r5 = ɵɵnextContext(); return ctx_r5.mouseLeave(); })("mouseenter", function EditableTitleComponent_span_0_Template_span_mouseenter_0_listener() { ɵɵrestoreView(_r4); const ctx_r6 = ɵɵnextContext(); return ctx_r6.mouseOver(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.title);
} }
function EditableTitleComponent_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "button", 4);
} }
function EditableTitleComponent_input_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 5, 6);
    ɵɵlistener("blur", function EditableTitleComponent_input_2_Template_input_blur_0_listener() { ɵɵrestoreView(_r9); const ctx_r8 = ɵɵnextContext(); return ctx_r8.isEditing = false; })("ngModelChange", function EditableTitleComponent_input_2_Template_input_ngModelChange_0_listener($event) { ɵɵrestoreView(_r9); const ctx_r10 = ɵɵnextContext(); return ctx_r10.editTitle = $event; })("change", function EditableTitleComponent_input_2_Template_input_change_0_listener() { ɵɵrestoreView(_r9); const ctx_r11 = ɵɵnextContext(); return ctx_r11.textChanged(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngModel", ctx_r2.editTitle);
} }
class EditableTitleComponent {
    constructor() {
        this.titleChanged = new EventEmitter();
        this.displayIcon = false;
        this.isEditing = false;
    }
    ngOnChanges(changes) {
        if (changes.title) {
            this.editTitle = changes.title.currentValue;
            this.applyObject(changes.configObject);
        }
        if (changes.configObject) {
            this.applyObject(changes.configObject);
        }
    }
    // update Title with string replacement @@key## style
    applyObject(config) {
        let newTitle = this.title;
        if (config) {
            for (const key in config) {
                if (config.hasOwnProperty(key)) {
                    newTitle = newTitle.replace(`@@${key}##`, config[key]);
                }
            }
            this.editTitle = newTitle;
        }
    }
    mouseOver() {
        if (!this.readOnly) {
            this.displayIcon = true;
        }
    }
    mouseLeave() {
        this.displayIcon = false;
    }
    mouseClicked() {
        if (!this.readOnly) {
            this.isEditing = true;
            this.displayIcon = false;
        }
        setTimeout(() => {
            // this will make the execution after the above boolean has changed
            this.inputTitleElement.nativeElement.focus();
            this.inputTitleElement.nativeElement.select();
        }, 0);
    }
    textChanged() {
        this.titleChanged.emit(this.editTitle);
    }
}
EditableTitleComponent.ɵfac = function EditableTitleComponent_Factory(t) { return new (t || EditableTitleComponent)(); };
EditableTitleComponent.ɵcmp = ɵɵdefineComponent({ type: EditableTitleComponent, selectors: [["ngs-editable-title"]], viewQuery: function EditableTitleComponent_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputTitleElement = _t.first);
    } }, inputs: { title: "title", configObject: "configObject", readOnly: "readOnly" }, outputs: { titleChanged: "titleChanged" }, features: [ɵɵNgOnChangesFeature], decls: 3, vars: 3, consts: [["class", "title-display", 3, "click", "mouseleave", "mouseenter", 4, "ngIf"], ["pButton", "", "class", "p-button-rounded p-button-info p-button-text p-mr-2 p-mb-2", "type", "button", "icon", "pi pi-pencil", 4, "ngIf"], ["class", "large-edit", "type", "text", "pInputText", "", 3, "ngModel", "blur", "ngModelChange", "change", 4, "ngIf"], [1, "title-display", 3, "click", "mouseleave", "mouseenter"], ["pButton", "", "type", "button", "icon", "pi pi-pencil", 1, "p-button-rounded", "p-button-info", "p-button-text", "p-mr-2", "p-mb-2"], ["type", "text", "pInputText", "", 1, "large-edit", 3, "ngModel", "blur", "ngModelChange", "change"], ["inputTitle", ""]], template: function EditableTitleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, EditableTitleComponent_span_0_Template, 2, 1, "span", 0);
        ɵɵtemplate(1, EditableTitleComponent_button_1_Template, 1, 0, "button", 1);
        ɵɵtemplate(2, EditableTitleComponent_input_2_Template, 2, 1, "input", 2);
    } if (rf & 2) {
        ɵɵproperty("ngIf", !ctx.isEditing);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.displayIcon);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.isEditing);
    } }, directives: [NgIf, ButtonDirective, DefaultValueAccessor, InputText, NgControlStatus, NgModel], styles: [".toolbarButton[_ngcontent-%COMP%]{border-radius:0x!important;margin-left:2px}.large-edit[_ngcontent-%COMP%]{font-size:20px;width:50%}.tipIcon[_ngcontent-%COMP%]{font-size:12px;margin-left:6px;top:-4px}.title-display[_ngcontent-%COMP%]{margin-left:.5em}"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(EditableTitleComponent, [{
        type: Component,
        args: [{
                selector: 'ngs-editable-title',
                templateUrl: 'editableTitle.component.html',
                styleUrls: ['editableTitle.component.scss']
            }]
    }], null, { inputTitleElement: [{
            type: ViewChild,
            args: ['inputTitle', { static: false }]
        }], title: [{
            type: Input
        }], configObject: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], titleChanged: [{
            type: Output
        }] }); })();

const _c0$1 = ["dropDown"];
function InputBuilderComponent_form_0_div_1_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 13);
} }
function InputBuilderComponent_form_0_div_1_span_3_input_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "input", 16);
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_span_3_input_1_Template, 1, 3, "input", 14);
    ɵɵelementStart(2, "label", 15);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !input_r3.mask);
    ɵɵadvance(1);
    ɵɵproperty("for", input_r3.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r5.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_4_input_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "input", 18);
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_span_4_input_1_Template, 1, 3, "input", 17);
    ɵɵelementStart(2, "label", 15);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !input_r3.mask);
    ɵɵadvance(1);
    ɵɵproperty("for", input_r3.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r6.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_5_input_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "input", 20);
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_span_5_input_1_Template, 1, 3, "input", 19);
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !input_r3.mask);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r7.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "input", 21);
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r8.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-slider", 22);
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name)("min", input_r3.min)("max", input_r3.max)("step", input_r3.step);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r9.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵelement(1, "p-inputMask", 23);
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("mask", input_r3.mask)("id", input_r3.name)("formControl", ctx_r10.form.controls[input_r3.name]);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r10.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵelement(1, "p-spinner", 24);
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("min", input_r3.min)("max", input_r3.max)("formControl", ctx_r11.form.controls[input_r3.name]);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r11.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "textarea", 25);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("rows", input_r3.rows)("placeholder", input_r3.label)("formControlName", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵelement(1, "p-checkbox", 26);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("label", input_r3.label)("id", input_r3.name)("formControl", ctx_r13.form.controls[input_r3.name]);
} }
const _c1 = function () { return { width: "100%" }; };
function InputBuilderComponent_form_0_div_1_span_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-dropdown", 27, 28);
    ɵɵelementStart(3, "label", 15);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r14 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵstyleMap(ɵɵpureFunction0(9, _c1));
    ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("options", ctx_r14.dataSourceLookup[input_r3.name])("filter", input_r3.selectFilter)("formControlName", input_r3.name);
    ɵɵadvance(2);
    ɵɵproperty("for", input_r3.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r14.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-dropdown", 29, 28);
    ɵɵelementStart(3, "label", 15);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r15 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵstyleMap(ɵɵpureFunction0(9, _c1));
    ɵɵproperty("id", input_r3.name)("options", ctx_r15.dataSourceLookup[input_r3.name])("filter", input_r3.selectFilter)("tabindex", input_r3.tabindex)("formControlName", input_r3.name);
    ɵɵadvance(2);
    ɵɵproperty("for", input_r3.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r15.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_p_autoComplete_14_Template(rf, ctx) { if (rf & 1) {
    const _r52 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "p-autoComplete", 30);
    ɵɵlistener("completeMethod", function InputBuilderComponent_form_0_div_1_p_autoComplete_14_Template_p_autoComplete_completeMethod_0_listener($event) { ɵɵrestoreView(_r52); const input_r3 = ɵɵnextContext().$implicit; const ctx_r50 = ɵɵnextContext(2); return ctx_r50.searchAutoComplete($event, input_r3); });
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r16 = ɵɵnextContext(2);
    ɵɵstyleMap(ɵɵpureFunction0(7, _c1));
    ɵɵproperty("tabindex", input_r3.tabindex)("dropdown", true)("formControlName", input_r3.name)("suggestions", ctx_r16.dataSourceLookup[input_r3.name])("placeholder", ctx_r16.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-chips", 31);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("placeholder", input_r3.label)("formControlName", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-multiSelect", 32);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r18 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("filterPlaceHolder", input_r3.name)("formControlName", input_r3.name)("filter", false)("options", ctx_r18.dataSourceLookup[input_r3.name]);
} }
function InputBuilderComponent_form_0_div_1_span_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵelement(1, "p-inputSwitch", 33);
    ɵɵelementStart(2, "label", 34);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r19 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("formControlName", input_r3.name);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r19.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_18_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-calendar", 35);
    ɵɵpipe(2, "async");
    ɵɵpipe(3, "async");
    ɵɵpipe(4, "async");
    ɵɵelementStart(5, "label");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r20 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", ɵɵpipeBind1(2, 7, ctx_r20.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", ɵɵpipeBind1(3, 9, ctx_r20.appSettings.getBoolean("inputShowCalendarIcon")))("dateFormat", ɵɵpipeBind1(4, 11, ctx_r20.appSettings.getString("inputDateFormat")))("formControlName", input_r3.name)("id", input_r3.name);
    ɵɵadvance(5);
    ɵɵtextInterpolate(ctx_r20.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_19_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-calendar", 35);
    ɵɵpipe(2, "async");
    ɵɵpipe(3, "async");
    ɵɵpipe(4, "async");
    ɵɵelementStart(5, "label");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r21 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", ɵɵpipeBind1(2, 7, ctx_r21.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", ɵɵpipeBind1(3, 9, ctx_r21.appSettings.getBoolean("inputShowCalendarIcon")))("dateFormat", ɵɵpipeBind1(4, 11, ctx_r21.appSettings.getString("inputDateFormat")))("formControlName", input_r3.name)("id", input_r3.name);
    ɵɵadvance(5);
    ɵɵtextInterpolate(ctx_r21.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_20_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-calendar", 36);
    ɵɵpipe(2, "async");
    ɵɵpipe(3, "async");
    ɵɵpipe(4, "async");
    ɵɵelementStart(5, "label");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r22 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", ɵɵpipeBind1(2, 7, ctx_r22.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", ɵɵpipeBind1(3, 9, ctx_r22.appSettings.getBoolean("inputShowCalendarIcon")))("dateFormat", ɵɵpipeBind1(4, 11, ctx_r22.appSettings.getString("inputDateFormat")))("formControlName", input_r3.name)("id", input_r3.name);
    ɵɵadvance(5);
    ɵɵtextInterpolate(ctx_r22.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_21_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "p-calendar", 37);
    ɵɵpipe(2, "async");
    ɵɵpipe(3, "async");
    ɵɵelementStart(4, "label");
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r23 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", ɵɵpipeBind1(2, 6, ctx_r23.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", ɵɵpipeBind1(3, 8, ctx_r23.appSettings.getBoolean("inputShowCalendarIcon")))("formControlName", input_r3.name)("id", input_r3.name);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ctx_r23.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_22_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "json-editor", 38);
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r24 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("options", ctx_r24.editorOptions)("data", input_r3.value);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r24.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_23_Template(rf, ctx) { if (rf & 1) {
    const _r64 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 13);
    ɵɵelementStart(1, "p-fileUpload", 39);
    ɵɵlistener("uploadHandler", function InputBuilderComponent_form_0_div_1_span_23_Template_p_fileUpload_uploadHandler_1_listener($event) { ɵɵrestoreView(_r64); const input_r3 = ɵɵnextContext().$implicit; const ctx_r62 = ɵɵnextContext(2); return ctx_r62.attachFiles($event, input_r3); });
    ɵɵpipe(2, "translate");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r25 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵpropertyInterpolate("chooseLabel", ɵɵpipeBind1(2, 4, "Choose File"));
    ɵɵproperty("tabindex", input_r3.tabindex)("accept", input_r3.accept || ctx_r25.allowedFileTypes)("maxFileSize", input_r3.maxFileSize || ctx_r25.maxFileSize);
} }
function InputBuilderComponent_form_0_div_1_div_24_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 40);
    ɵɵelementStart(1, "span", 13);
    ɵɵelement(2, "input", 41);
    ɵɵelementStart(3, "label");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelement(5, "button", 42);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r26 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r26.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_25_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelementStart(1, "div", 43);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r27 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("id", input_r3.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r27.loadComponent(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_26_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵelement(1, "input", 44);
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r28 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r28.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_27_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 45);
    ɵɵelement(1, "i", 46);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵpropertyInterpolate("pTooltip", input_r3.help);
} }
function InputBuilderComponent_form_0_div_1_div_28_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", input_r3.validateRequired, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", input_r3.validateRequiredTrue, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", input_r3.validateEmail, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", input_r3.validatePatternMessage, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", input_r3.validateMinLengthMessage, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext(2).$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", input_r3.validateMaxLengthMessage, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 47);
    ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_div_28_div_1_Template, 2, 1, "div", 48);
    ɵɵtemplate(2, InputBuilderComponent_form_0_div_1_div_28_div_2_Template, 2, 1, "div", 48);
    ɵɵtemplate(3, InputBuilderComponent_form_0_div_1_div_28_div_3_Template, 2, 1, "div", 48);
    ɵɵtemplate(4, InputBuilderComponent_form_0_div_1_div_28_div_4_Template, 2, 1, "div", 48);
    ɵɵtemplate(5, InputBuilderComponent_form_0_div_1_div_28_div_5_Template, 2, 1, "div", 48);
    ɵɵtemplate(6, InputBuilderComponent_form_0_div_1_div_28_div_6_Template, 2, 1, "div", 48);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ɵɵnextContext().$implicit;
    const ctx_r30 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.required);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.requiredTrue);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.email);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.pattern);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.minlength);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.maxlength);
} }
function InputBuilderComponent_form_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 4);
    ɵɵelementStart(1, "div", 5);
    ɵɵtemplate(2, InputBuilderComponent_form_0_div_1_span_2_Template, 1, 0, "span", 6);
    ɵɵtemplate(3, InputBuilderComponent_form_0_div_1_span_3_Template, 4, 3, "span", 6);
    ɵɵtemplate(4, InputBuilderComponent_form_0_div_1_span_4_Template, 4, 3, "span", 6);
    ɵɵtemplate(5, InputBuilderComponent_form_0_div_1_span_5_Template, 4, 2, "span", 6);
    ɵɵtemplate(6, InputBuilderComponent_form_0_div_1_span_6_Template, 4, 4, "span", 6);
    ɵɵtemplate(7, InputBuilderComponent_form_0_div_1_span_7_Template, 4, 7, "span", 6);
    ɵɵtemplate(8, InputBuilderComponent_form_0_div_1_span_8_Template, 4, 5, "span", 7);
    ɵɵtemplate(9, InputBuilderComponent_form_0_div_1_span_9_Template, 4, 6, "span", 7);
    ɵɵtemplate(10, InputBuilderComponent_form_0_div_1_span_10_Template, 2, 4, "span", 6);
    ɵɵtemplate(11, InputBuilderComponent_form_0_div_1_span_11_Template, 2, 4, "span", 7);
    ɵɵtemplate(12, InputBuilderComponent_form_0_div_1_span_12_Template, 5, 10, "span", 6);
    ɵɵtemplate(13, InputBuilderComponent_form_0_div_1_span_13_Template, 5, 10, "span", 6);
    ɵɵtemplate(14, InputBuilderComponent_form_0_div_1_p_autoComplete_14_Template, 1, 8, "p-autoComplete", 8);
    ɵɵtemplate(15, InputBuilderComponent_form_0_div_1_span_15_Template, 2, 4, "span", 6);
    ɵɵtemplate(16, InputBuilderComponent_form_0_div_1_span_16_Template, 2, 6, "span", 6);
    ɵɵtemplate(17, InputBuilderComponent_form_0_div_1_span_17_Template, 4, 4, "span", 7);
    ɵɵtemplate(18, InputBuilderComponent_form_0_div_1_span_18_Template, 7, 13, "span", 6);
    ɵɵtemplate(19, InputBuilderComponent_form_0_div_1_span_19_Template, 7, 13, "span", 6);
    ɵɵtemplate(20, InputBuilderComponent_form_0_div_1_span_20_Template, 7, 13, "span", 6);
    ɵɵtemplate(21, InputBuilderComponent_form_0_div_1_span_21_Template, 6, 10, "span", 6);
    ɵɵtemplate(22, InputBuilderComponent_form_0_div_1_span_22_Template, 4, 4, "span", 6);
    ɵɵtemplate(23, InputBuilderComponent_form_0_div_1_span_23_Template, 3, 6, "span", 6);
    ɵɵtemplate(24, InputBuilderComponent_form_0_div_1_div_24_Template, 6, 4, "div", 9);
    ɵɵtemplate(25, InputBuilderComponent_form_0_div_1_span_25_Template, 3, 2, "span", 6);
    ɵɵtemplate(26, InputBuilderComponent_form_0_div_1_span_26_Template, 4, 4, "span", 10);
    ɵɵelementEnd();
    ɵɵtemplate(27, InputBuilderComponent_form_0_div_1_span_27_Template, 2, 1, "span", 11);
    ɵɵtemplate(28, InputBuilderComponent_form_0_div_1_div_28_Template, 7, 6, "div", 12);
    ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext(2);
    let tmp_29_0 = null;
    ɵɵclassProp("noPadding", ctx_r1.inputBuilderDefinition.inputLocation === "inline");
    ɵɵproperty("className", ctx_r1.controlStyle);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitch", input_r3.type)("className", ctx_r1.getContainerClass(input_r3));
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "null");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "textbox");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "password");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "email");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "number");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "slider");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "mask");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "spinner");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "textarea");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "checkbox");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "dropdown");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "dropdownobject");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "autocomplete");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "chips");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "multiselect");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "switch");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "datetime");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "datetimeUTC");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "date");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "time");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "json");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "fileattach");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "search");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "dynamic");
    ɵɵadvance(2);
    ɵɵproperty("ngIf", input_r3.help);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ((tmp_29_0 = ctx_r1.form.get(input_r3.name)) == null ? null : tmp_29_0.invalid) && (((tmp_29_0 = ctx_r1.form.get(input_r3.name)) == null ? null : tmp_29_0.dirty) || ((tmp_29_0 = ctx_r1.form.get(input_r3.name)) == null ? null : tmp_29_0.touched) || ctx_r1.formSubmitted));
} }
function InputBuilderComponent_form_0_div_2_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r87 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 51);
    ɵɵelementStart(1, "button", 52);
    ɵɵlistener("click", function InputBuilderComponent_form_0_div_2_div_1_Template_button_click_1_listener() { ɵɵrestoreView(_r87); const ctx_r86 = ɵɵnextContext(3); return ctx_r86.onCustom(); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r83 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵpropertyInterpolate("icon", ctx_r83.inputBuilderDefinition.customButtonIcon);
    ɵɵpropertyInterpolate("label", ctx_r83.inputBuilderDefinition.customButtonText);
} }
function InputBuilderComponent_form_0_div_2_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r89 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 51);
    ɵɵelementStart(1, "button", 53);
    ɵɵlistener("click", function InputBuilderComponent_form_0_div_2_div_2_Template_button_click_1_listener() { ɵɵrestoreView(_r89); const ctx_r88 = ɵɵnextContext(3); return ctx_r88.onCancel(); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r84 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵpropertyInterpolate("icon", ctx_r84.inputBuilderDefinition.cancelButtonIcon);
    ɵɵpropertyInterpolate("label", ctx_r84.inputBuilderDefinition.cancelButtonText);
} }
function InputBuilderComponent_form_0_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 51);
    ɵɵelement(1, "button", 54);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r85 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵpropertyInterpolate("icon", ctx_r85.inputBuilderDefinition.okButtonIcon);
    ɵɵpropertyInterpolate("label", ctx_r85.inputBuilderDefinition.okButtonText);
} }
function InputBuilderComponent_form_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 49);
    ɵɵtemplate(1, InputBuilderComponent_form_0_div_2_div_1_Template, 2, 2, "div", 50);
    ɵɵtemplate(2, InputBuilderComponent_form_0_div_2_div_2_Template, 2, 2, "div", 50);
    ɵɵtemplate(3, InputBuilderComponent_form_0_div_2_div_3_Template, 2, 2, "div", 50);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.inputBuilderDefinition.customButtonText);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.inputBuilderDefinition.cancelButtonText);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.inputBuilderDefinition.okButtonText);
} }
function InputBuilderComponent_form_0_Template(rf, ctx) { if (rf & 1) {
    const _r91 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "form", 1);
    ɵɵlistener("ngSubmit", function InputBuilderComponent_form_0_Template_form_ngSubmit_0_listener() { ɵɵrestoreView(_r91); const ctx_r90 = ɵɵnextContext(); return ctx_r90.onSubmit(ctx_r90.form); });
    ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_Template, 29, 31, "div", 2);
    ɵɵtemplate(2, InputBuilderComponent_form_0_div_2_Template, 4, 3, "div", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("noPadding", ctx_r0.inputBuilderDefinition.inputLocation === "inline")("form-group", ctx_r0.inputBuilderDefinition.inputLocation !== "inline");
    ɵɵproperty("formGroup", ctx_r0.form);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.filteredInputDetails);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.inputBuilderDefinition.customButtonText || ctx_r0.inputBuilderDefinition.cancelButtonText || ctx_r0.inputBuilderDefinition.okButtonText);
} }
class InputBuilderComponent {
    constructor(elementRef, ref, appSettings, appSettingsQuery, authQuery, refValuesService, componentLoader, authService) {
        this.elementRef = elementRef;
        this.ref = ref;
        this.appSettings = appSettings;
        this.appSettingsQuery = appSettingsQuery;
        this.authQuery = authQuery;
        this.refValuesService = refValuesService;
        this.componentLoader = componentLoader;
        this.authService = authService;
        this.modelUpdated = new EventEmitter();
        this.valueUpdated = new EventEmitter();
        this.fileAttached = new EventEmitter();
        this.okClicked = new EventEmitter();
        this.cancelClicked = new EventEmitter();
        this.formBuilt = false;
        this.controlStyle = 'p-col-12';
        this.containerClass = 'p-col-12'; // This changes to allow the help Icon
        this.formSubmitted = false;
        this.dataSourceLookup = {};
        this.editorOptions = new JsonEditorOptions();
        this.editorOptions.modes = ['code', 'text', 'tree', 'view']; // set all allowed modes
    }
    getLabel(input) {
        if (input.label) {
            return input.label;
        }
        else if (input.name) {
            return input.name.replace(/([A-Z]+)/g, ' $1').replace(/([A-Z][a-z])/g, ' $1');
        }
    }
    loadComponent(input) {
        this.componentLoader.loadComponent(input.angularComponent).then(element => {
            this.elementRef.nativeElement.querySelector(`#${input.name}`).appendChild(element);
        });
    }
    onSubmit(form) {
        this.formSubmitted = true;
        if (this.form.valid) {
            if (this.inputBuilderDefinition.okButtonCallBack) {
                this.inputBuilderDefinition.okButtonCallBack(this.clonedInputModel);
            }
            this.okClicked.emit([this.clonedInputModel, this.fileContent]);
        }
    }
    onCancel() {
        if (this.inputBuilderDefinition.cancelButtonCallBack) {
            this.inputBuilderDefinition.cancelButtonCallBack(this.clonedInputModel);
        }
        this.cancelClicked.emit();
    }
    onCustom() {
        if (this.inputBuilderDefinition.customButtonCallBack) {
            this.inputBuilderDefinition.customButtonCallBack(this.clonedInputModel);
        }
    }
    ngOnChanges(changes) {
        if (changes.inputModel && changes.inputModel.currentValue !== changes.inputModel.previousValue) {
            this.formBuilt = false;
        }
        if (changes.inputBuilderDefinition &&
            changes.inputBuilderDefinition.currentValue !== changes.inputBuilderDefinition.previousValue) {
            this.formBuilt = false;
        }
        this.buildForm();
    }
    decorateInputModel() {
        // Add in standard Values
        const currentUser = this.authQuery.getValue().userDetails;
        const now = new Date();
        this.clonedInputModel['now'] = now;
        this.clonedInputModel['zuluDate'] = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds()));
        this.clonedInputModel['userId'] = currentUser.userId;
    }
    ngOnInit() {
        this.maxFileSize = this.appSettingsQuery.hasEntity(AppSettings.maximumFileSize)
            ? this.appSettingsQuery.getEntity(AppSettings.maximumFileSize).value
            : 999999;
        this.allowedFileTypes = this.appSettingsQuery.hasEntity(AppSettings.allowedFileTypes)
            ? this.appSettingsQuery.getEntity(AppSettings.allowedFileTypes).value
            : '';
    }
    getContainerClass(inputDetail) {
        return inputDetail.help ? 'p-col-11' : 'p-col-12';
    }
    attachFiles(event, input) {
        if (this.inputBuilderDefinition.loadFileContent) {
            if (event.files && event.files.length > 0) {
                for (const file of event.files) {
                    const fileReader = new FileReader();
                    fileReader.onload = () => {
                        // this 'text' is the content of the file
                        this.fileContent = fileReader.result.toString();
                        this.fileAttached.emit(this.fileContent);
                    };
                    fileReader.readAsText(file);
                }
            }
        }
        else {
            this.fieldChanged(input, event.files[0]);
        }
    }
    searchAutoComplete($event, input) {
        this.loadDataSource(input, $event.query).subscribe(data => {
            this.dataSourceLookup[input.name] = data.referenceValueItems;
            setTimeout(() => {
                this.ref.detectChanges();
            }, 50);
        });
    }
    getDefaultValue(value) {
        switch (value) {
            case 'today':
            case 'now':
                return ZuluDateHelper.getGMTDate(new Date());
                break;
            case 'yesterday': {
                const now = new Date();
                return ZuluDateHelper.getGMTDate(new Date(now.setDate(now.getDate() - 1)));
                break;
            }
            case 'tomorrow': {
                const now = new Date();
                return ZuluDateHelper.getGMTDate(new Date(now.setDate(now.getDate() + 1)));
                break;
            }
            default:
                return value;
                break;
        }
    }
    buildForm() {
        if (this.formBuilt || !this.inputBuilderDefinition || !this.inputModel) {
            return;
        }
        this.formBuilt = true;
        // Clone our inputModel
        this.clonedInputModel = Object.assign({}, this.inputModel);
        this.decorateInputModel();
        // Default to full width (changes if help found)
        this.containerClass = 'p-col-12';
        if (this.inputBuilderDefinition.orientation === "horizontal" /* Horizontal */ ||
            this.inputBuilderDefinition.inputLocation === "inline" /* INLINE */) {
            if (this.inputBuilderDefinition.columnCount > 0 && this.inputBuilderDefinition.columnCount < 5) {
                const colSize = 12 / this.inputBuilderDefinition.columnCount;
                this.controlStyle = `p-col-${colSize}`;
            }
        }
        else {
            this.controlStyle = 'p-col-12';
        }
        const formGroup = {};
        const localModel = {};
        const asyncGets = [];
        // Always have one to run
        asyncGets.push(of(new ReferenceValue()));
        if (this.inputBuilderDefinition.inputDetails) {
            this.filteredInputDetails = this.authService.filterItemsByRole(this.inputBuilderDefinition.inputDetails);
            for (const inputDetail of this.filteredInputDetails) {
                // Get value from model and apply to new FormControl
                let inputValue = null;
                if (ObjectPathHelper.get(this.clonedInputModel, inputDetail.name)) {
                    // If we have a passed value in the model, set the control value to this
                    inputValue = this.parseValue(inputDetail, ObjectPathHelper.get(this.clonedInputModel, inputDetail.name));
                }
                else if (inputDetail.value) {
                    // If we have a value passed in the Input definition set the control value to this.
                    inputValue = this.getDefaultValue(inputDetail.value);
                    ObjectPathHelper.set(this.clonedInputModel, inputDetail.name, inputValue);
                }
                else {
                    // This ensures that the property is set if not passed in
                    ObjectPathHelper.set(this.clonedInputModel, inputDetail.name, null);
                }
                const formControl = new FormControl(inputValue, this.mapValidators(inputDetail)); // Validators passed here too
                // Readonly
                if (inputDetail.readonly) {
                    formControl.disable();
                }
                // Remember for dependecy check in a mo
                ObjectPathHelper.set(localModel, inputDetail.name, inputValue);
                if (inputDetail.type !== InputTypes.search) {
                    formControl.valueChanges.subscribe(changes => {
                        this.fieldChanged(inputDetail, changes);
                    });
                }
                else {
                    // Handle debounce for search boxes
                    formControl.valueChanges
                        .pipe(debounceTime(500), distinctUntilChanged(), tap(text => {
                        this.fieldChanged(inputDetail, text);
                    }))
                        .subscribe();
                }
                formGroup[inputDetail.name] = formControl;
                if (inputDetail['datasourceItems'] && inputDetail['datasourceItems'].length > 0) {
                    // Pre loaded datasourceItems
                    this.dataSourceLookup[inputDetail.name] = inputDetail['datasourceItems'];
                    this.manipulateValuesToObjects(formControl, inputDetail, inputValue);
                }
                else if (inputDetail.type !== InputTypes.autocomplete &&
                    inputDetail.hasOwnProperty('referenceValueName') &&
                    inputDetail.referenceValueName) {
                    // If Datasource, get the values
                    // Do we need a seed value
                    let seed = '';
                    if (inputDetail.referenceValueSeedDependency) {
                        seed = this.clonedInputModel[inputDetail.referenceValueSeedDependency];
                    }
                    asyncGets.push(this.loadDataSource(inputDetail, seed).pipe(tap(data => {
                        this.dataSourceLookup[inputDetail.name] = data.referenceValueItems;
                        this.manipulateValuesToObjects(formControl, inputDetail, inputValue);
                    })));
                }
            }
            // Now re-loop notifying any dependencies
            for (const inputDetail of this.filteredInputDetails) {
                this.checkForDependencies(inputDetail, localModel[inputDetail.name]);
            }
        }
        this.formRendered$ = forkJoin(asyncGets);
        this.formRendered$.subscribe(results => {
            console.log('Form rendering');
            this.form = new FormGroup(formGroup);
        });
        const formValidators = [];
        if (this.inputBuilderDefinition.customValidators) {
            this.inputBuilderDefinition.customValidators.forEach(validator => {
                formValidators.push({});
            });
        }
        this.form = new FormGroup(formGroup, formValidators);
    }
    manipulateValuesToObjects(formControl, inputDetail, inputValue) {
        if (inputDetail.type === InputTypes.multiselect) {
            if (inputValue) {
                const foundValues = this.dataSourceLookup[inputDetail.name].filter(ds => inputValue.includes(ds.value));
                setTimeout(_ => {
                    formControl.setValue(foundValues, {
                        onlySelf: true,
                        emitEvent: false
                    });
                }, 10);
            }
        }
        else {
            // Now we have the values, find the ReferenceValue that matches the inputValue from above
            if (this.clonedInputModel[inputDetail.name] && this.dataSourceLookup[inputDetail.name]) {
                if (inputValue) {
                    let foundInputValue;
                    if (inputValue === 'first') {
                        foundInputValue = this.dataSourceLookup[inputDetail.name][0];
                    }
                    else {
                        foundInputValue = this.dataSourceLookup[inputDetail.name] // tslint:disable-next-line:triple-equals
                            .find(ds => ds.value && ds.value.toString() == inputValue.toString()); // Full on corecion
                    }
                    if (foundInputValue) {
                        setTimeout(_ => {
                            formControl.setValue(foundInputValue, {
                                onlySelf: true,
                                emitEvent: false
                            });
                        }, 10);
                    }
                }
            }
        }
    }
    parseValue(inputDetail, value) {
        switch (inputDetail.type) {
            case InputTypes.checkbox:
            case InputTypes.switch: {
                return value.toString() === 'true' || value.toString() === 'True' || value.toString() === '1';
            }
            case InputTypes.number:
            case InputTypes.rating:
            case InputTypes.spinner: {
                return Number(value);
            }
            case InputTypes.date:
            case InputTypes.datetime:
            case InputTypes.time: {
                const valueAsDate = new Date(value);
                if (inputDetail.forceUTC) {
                    return ZuluDateHelper.getGMTDate(valueAsDate);
                }
                else {
                    return valueAsDate;
                }
            }
        }
        // Default just pass back original
        return value;
    }
    fieldChanged(inputDetail, value) {
        let returnedValue;
        // If we are any 'Object' type input just return the object. Simples.
        if (inputDetail.type && inputDetail.type.endsWith('object')) {
            returnedValue = value;
        }
        else if (inputDetail.type === InputTypes.fileattach) {
            returnedValue = value;
        }
        else if ((inputDetail.type && inputDetail.type === InputTypes.date) ||
            inputDetail.type === InputTypes.datetime ||
            inputDetail.type === InputTypes.time) {
            if (inputDetail.forceUTC) {
                returnedValue = ZuluDateHelper.setGMTDate(value);
            }
            else {
                returnedValue = value;
            }
        }
        else if (inputDetail.type === InputTypes.spinner) {
            returnedValue = Number(value);
        }
        else if (inputDetail.type && inputDetail.type === InputTypes.multiselect) {
            // This is an array
            if (Array.isArray(value)) {
                const asArray = value;
                returnedValue = asArray.map(refVal => refVal.value);
            }
            else {
                returnedValue = [];
            }
        }
        else {
            if (value) {
                returnedValue = value.toString();
            }
            else {
                returnedValue = null;
            }
            if (value && value.hasOwnProperty('value')) {
                returnedValue = value.value;
            }
            else {
                returnedValue = value;
            }
        }
        // Update listeners
        this.valueUpdated.emit([inputDetail.name, returnedValue]);
        // Do We need to notify another input of this change?
        this.checkForDependencies(inputDetail, returnedValue);
        // Flatten out Objects to value
        const updatedModel = Object.assign({}, this.clonedInputModel);
        updatedModel[inputDetail.name] = returnedValue;
        // Tell subscribers we have changes
        this.modelUpdated.emit(updatedModel);
        this.clonedInputModel = updatedModel;
    }
    checkForDependencies(inputDetail, updatedValue) {
        this.filteredInputDetails.forEach(input => {
            if (this.form &&
                input.hasOwnProperty('referenceValueSeedDependency') &&
                input.referenceValueSeedDependency &&
                input.referenceValueSeedDependency === inputDetail.name) {
                this.loadDataSource(input, updatedValue, input.referenceValueChildLevel).subscribe(data => {
                    this.dataSourceLookup[input.name] = data.referenceValueItems;
                    const formControl = this.form.controls[inputDetail.name];
                    this.manipulateValuesToObjects(formControl, inputDetail, formControl.value);
                });
            }
        });
    }
    loadDataSource(inputDetail, seed = '', childDepth = 0) {
        return this.refValuesService.getReferenceValue(inputDetail.referenceValueName, seed, childDepth);
    }
    mapValidators(inputDetail) {
        const formValidators = [];
        if (inputDetail) {
            // Required
            if (inputDetail.validateRequired) {
                formValidators.push(Validators.required);
            }
            // RequiredTrue
            if (inputDetail.validateRequiredTrue) {
                formValidators.push(Validators.requiredTrue);
            }
            // EMail
            if (inputDetail.validateEmail) {
                formValidators.push(Validators.email);
            }
            // Pattern
            if (inputDetail.validatePattern) {
                formValidators.push(Validators.pattern(inputDetail.validatePattern));
            }
            // Min Length
            if (inputDetail.validateMinLength) {
                formValidators.push(Validators.minLength(inputDetail.validateMinLength));
                if (!inputDetail.validateMinLengthMessage) {
                    inputDetail.validateMinLengthMessage = `${inputDetail.label} must be a minimum length of ${inputDetail.validateMinLength}`;
                }
            }
            // Max Length
            if (inputDetail.validateMaxLength) {
                formValidators.push(Validators.maxLength(inputDetail.validateMaxLength));
                if (!inputDetail.validateMaxLengthMessage) {
                    inputDetail.validateMaxLengthMessage = `${inputDetail.label} must be a max length of ${inputDetail.validateMinLength}`;
                }
            }
        }
        return formValidators;
    }
}
InputBuilderComponent.ɵfac = function InputBuilderComponent_Factory(t) { return new (t || InputBuilderComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(AppSettingsService), ɵɵdirectiveInject(AppSettingsQuery), ɵɵdirectiveInject(UserAuthenticationQuery), ɵɵdirectiveInject(ReferenceValuesService), ɵɵdirectiveInject(ComponentLoaderService), ɵɵdirectiveInject(UserAuthenticationBase)); };
InputBuilderComponent.ɵcmp = ɵɵdefineComponent({ type: InputBuilderComponent, selectors: [["ngs-input-builder"]], viewQuery: function InputBuilderComponent_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0$1, true);
    } if (rf & 2) {
        let _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropDownChildren = _t);
    } }, inputs: { inputBuilderDefinition: "inputBuilderDefinition", inputModel: "inputModel" }, outputs: { modelUpdated: "modelUpdated", valueUpdated: "valueUpdated", fileAttached: "fileAttached", okClicked: "okClicked", cancelClicked: "cancelClicked" }, features: [ɵɵNgOnChangesFeature], decls: 2, vars: 3, consts: [["novalidate", "", "class", "p-grid ui-fluid", 3, "noPadding", "form-group", "formGroup", "ngSubmit", 4, "ngIf"], ["novalidate", "", 1, "p-grid", "ui-fluid", 3, "formGroup", "ngSubmit"], [3, "className", "noPadding", 4, "ngFor", "ngForOf"], ["class", "button-line", "class", "p-col-12", 4, "ngIf"], [3, "className"], [3, "ngSwitch", "className"], ["class", "p-float-label", 4, "ngSwitchCase"], [4, "ngSwitchCase"], ["appendTo", "body", "dataKey", "value", "field", "display", 3, "style", "tabindex", "dropdown", "formControlName", "suggestions", "placeholder", "completeMethod", 4, "ngSwitchCase"], ["class", "ui-inputgroup", 4, "ngSwitchCase"], ["class", "p-float-label", 4, "ngSwitchDefault"], ["class", "p-col-1", 4, "ngIf"], ["class", "ui-message ui-messages-error ui-corner-all", 4, "ngIf"], [1, "p-float-label"], ["class", "textInput", "type", "text", "pInputText", "", 3, "tabindex", "formControlName", "id", 4, "ngIf"], [3, "for"], ["type", "text", "pInputText", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], ["class", "textInput", "type", "password", "pPassword", "", 3, "tabindex", "formControlName", "id", 4, "ngIf"], ["type", "password", "pPassword", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], ["class", "textInput", "type", "email", "pInputText", "", 3, "tabindex", "formControlName", "id", 4, "ngIf"], ["type", "email", "pInputText", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], ["type", "text", "pKeyFilter", "num", "pInputText", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], [3, "tabindex", "formControlName", "id", "min", "max", "step"], [3, "tabindex", "mask", "id", "formControl"], [3, "tabindex", "id", "min", "max", "formControl"], ["pInputTextarea", "", 1, "textInput", 3, "tabindex", "rows", "placeholder", "formControlName"], ["binary", "true", 3, "tabindex", "label", "id", "formControl"], ["appendTo", "body", "showClear", "true", "dataKey", "value", "optionLabel", "display", 1, "dropdownInput", 3, "tabindex", "id", "options", "filter", "formControlName"], ["dropDown", ""], ["appendTo", "body", "showClear", "true", "optionLabel", "display", 1, "dropdownInput", 3, "id", "options", "filter", "tabindex", "formControlName"], ["appendTo", "body", "dataKey", "value", "field", "display", 3, "tabindex", "dropdown", "formControlName", "suggestions", "placeholder", "completeMethod"], [3, "tabindex", "id", "placeholder", "formControlName"], ["appendTo", "body", "optionLabel", "display", "dataKey", "value", 1, "multi-select", 3, "tabindex", "id", "filterPlaceHolder", "formControlName", "filter", "options"], [3, "tabindex", "id", "formControlName"], [1, "switch-label"], ["appendTo", "body", "showTime", "true", "hourFormat", "24", 3, "tabindex", "showButtonBar", "showIcon", "dateFormat", "formControlName", "id"], ["appendTo", "body", 3, "tabindex", "showButtonBar", "showIcon", "dateFormat", "formControlName", "id"], ["appendTo", "body", "timeOnly", "true", "showTime", "true", "hourFormat", "24", 3, "tabindex", "showButtonBar", "showIcon", "formControlName", "id"], [3, "tabindex", "options", "data"], ["customUpload", "true", "auto", "true", 3, "tabindex", "accept", "maxFileSize", "chooseLabel", "uploadHandler"], [1, "ui-inputgroup"], ["type", "text", "pInputText", "", 2, "width", "100%", 3, "tabindex", "formControlName", "id"], ["pButton", "", "type", "button", "icon", "ui-icon-search"], [1, "textInput", 3, "id"], ["type", "text", "pInputText", "", 3, "tabindex", "formControlName", "id"], [1, "p-col-1"], ["tooltipPosition", "bottom", 1, "fa", "ui-icon-info", "helpIcon", 3, "pTooltip"], [1, "ui-message", "ui-messages-error", "ui-corner-all"], [4, "ngIf"], [1, "p-col-12"], ["class", "button-container p-col-3", 4, "ngIf"], [1, "button-container", "p-col-3"], ["pButton", "", "type", "button", "iconPos", "left", 1, "p-button-info", 3, "icon", "label", "click"], ["pButton", "", "type", "button", "iconPos", "left", 1, "p-button-warning", 3, "icon", "label", "click"], ["pButton", "", "type", "submit", "iconPos", "left", 1, "p-button-success", 3, "icon", "label"]], template: function InputBuilderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵtemplate(0, InputBuilderComponent_form_0_Template, 3, 7, "form", 0);
        ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, ctx.formRendered$) && ctx.formBuilt && ctx.inputBuilderDefinition && ctx.filteredInputDetails);
    } }, directives: [NgIf, ɵangular_packages_forms_forms_y, NgControlStatusGroup, FormGroupDirective, NgForOf, NgSwitch, NgSwitchCase, NgSwitchDefault, DefaultValueAccessor, InputText, NgControlStatus, FormControlName, Password, KeyFilter, Slider, InputMask, FormControlDirective, Spinner, InputTextarea, Checkbox, Dropdown, AutoComplete, Chips, MultiSelect, InputSwitch, Calendar, JsonEditorComponent, FileUpload, ButtonDirective, Tooltip], pipes: [AsyncPipe, TranslatePipe], styles: [".small-label[_ngcontent-%COMP%]{font-size:12px}.textInput[_ngcontent-%COMP%]{width:100%}.switch-label[_ngcontent-%COMP%]{margin-left:16px}.inlineInputs[_ngcontent-%COMP%]{padding:0 3px 0 0!important}.multi-select[_ngcontent-%COMP%]{width:100%}.button-container[_ngcontent-%COMP%]{display:inline;margin-left:6px}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(InputBuilderComponent, [{
        type: Component,
        args: [{
                selector: 'ngs-input-builder',
                templateUrl: 'inputBuilder.component.html',
                styleUrls: ['inputBuilder.component.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }, { type: AppSettingsService }, { type: AppSettingsQuery }, { type: UserAuthenticationQuery }, { type: ReferenceValuesService }, { type: ComponentLoaderService }, { type: UserAuthenticationBase }]; }, { inputBuilderDefinition: [{
            type: Input
        }], inputModel: [{
            type: Input
        }], modelUpdated: [{
            type: Output
        }], valueUpdated: [{
            type: Output
        }], fileAttached: [{
            type: Output
        }], okClicked: [{
            type: Output
        }], cancelClicked: [{
            type: Output
        }], dropDownChildren: [{
            type: ViewChildren,
            args: ['dropDown']
        }] }); })();

function InputBuilderPopupComponent_ngs_input_builder_5_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "ngs-input-builder", 4);
    ɵɵlistener("modelUpdated", function InputBuilderPopupComponent_ngs_input_builder_5_Template_ngs_input_builder_modelUpdated_0_listener($event) { ɵɵrestoreView(_r3); const ctx_r2 = ɵɵnextContext(); return ctx_r2.notifyChanged($event); })("okClicked", function InputBuilderPopupComponent_ngs_input_builder_5_Template_ngs_input_builder_okClicked_0_listener($event) { ɵɵrestoreView(_r3); const ctx_r4 = ɵɵnextContext(); return ctx_r4.onOkClicked($event); })("cancelClicked", function InputBuilderPopupComponent_ngs_input_builder_5_Template_ngs_input_builder_cancelClicked_0_listener() { ɵɵrestoreView(_r3); const ctx_r5 = ɵɵnextContext(); return ctx_r5.onCancelClicked(); })("modelUpdated", function InputBuilderPopupComponent_ngs_input_builder_5_Template_ngs_input_builder_modelUpdated_0_listener($event) { ɵɵrestoreView(_r3); const ctx_r6 = ɵɵnextContext(); return ctx_r6.onModelUpdated($event); })("valueUpdated", function InputBuilderPopupComponent_ngs_input_builder_5_Template_ngs_input_builder_valueUpdated_0_listener() { ɵɵrestoreView(_r3); const ctx_r7 = ɵɵnextContext(); return ctx_r7.onValueUpdated(); });
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("inputBuilderDefinition", ctx_r1.inputBuilderDefinition)("inputModel", ctx_r1.inputModel);
} }
class InputBuilderPopupComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.modelUpdated = new EventEmitter();
        this.valueUpdated = new EventEmitter();
        this.okClicked = new EventEmitter();
        this.cancelClicked = new EventEmitter();
        this.styleValues = {
            overflow: 'visible'
        };
        this.mouseSubscription = fromEvent(document.body, 'mousemove').subscribe(e => {
            if (this.attachMouseClick) {
                this.screenWidth = window.innerWidth;
                this.mouseY = e['pageY'];
                this.mouseX = e['pageX'];
                if (this.setWidth) {
                    if (this.mouseX + this.setWidth > this.screenWidth) {
                        this.setLeft = this.mouseX - this.setWidth;
                    }
                    else {
                        this.setLeft = this.mouseX;
                    }
                    this.setTop = this.mouseY;
                }
                else {
                    this.setLeft = this.mouseX;
                    this.setTop = this.mouseY;
                }
                if (!this.isShown) {
                    const newStyle = { overflow: 'visible', position: 'absolute' };
                    newStyle.top = `${this.setTop}px`;
                    newStyle.left = `${this.setLeft}px`;
                    this.styleValues = newStyle;
                    this.changeDetector.detectChanges();
                }
            }
        });
    }
    showPopup() {
        this.isShown = true;
        this.changeDetector.markForCheck();
    }
    ngOnDestroy() {
        if (this.mouseSubscription) {
            this.mouseSubscription.unsubscribe();
        }
    }
    notifyChanged(event) { }
    onModelUpdated(model) {
        this.modelUpdated.emit(model);
    }
    onValueUpdated() { }
    onOkClicked(model) {
        this.okClicked.emit(model);
    }
    onCancelClicked() {
        this.cancelClicked.emit(null);
        this.isShown = false;
        this.changeDetector.markForCheck();
    }
}
InputBuilderPopupComponent.ɵfac = function InputBuilderPopupComponent_Factory(t) { return new (t || InputBuilderPopupComponent)(ɵɵdirectiveInject(ChangeDetectorRef)); };
InputBuilderPopupComponent.ɵcmp = ɵɵdefineComponent({ type: InputBuilderPopupComponent, selectors: [["ngs-input-builder-popup"]], inputs: { inputBuilderDefinition: "inputBuilderDefinition", attachMouseClick: "attachMouseClick", inputModel: "inputModel", setWidth: "setWidth", setTop: "setTop", setLeft: "setLeft" }, outputs: { modelUpdated: "modelUpdated", valueUpdated: "valueUpdated", okClicked: "okClicked", cancelClicked: "cancelClicked" }, decls: 6, vars: 7, consts: [[3, "visible", "visibleChange"], [1, "ui-fluid"], ["popupContainer", ""], [3, "inputBuilderDefinition", "inputModel", "modelUpdated", "okClicked", "cancelClicked", "valueUpdated", 4, "ngIf"], [3, "inputBuilderDefinition", "inputModel", "modelUpdated", "okClicked", "cancelClicked", "valueUpdated"]], template: function InputBuilderPopupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵɵelementStart(0, "p-dialog", 0);
        ɵɵlistener("visibleChange", function InputBuilderPopupComponent_Template_p_dialog_visibleChange_0_listener($event) { return ctx.isShown = $event; });
        ɵɵelementStart(1, "p-header");
        ɵɵtext(2);
        ɵɵelementEnd();
        ɵɵelementStart(3, "div", 1, 2);
        ɵɵtemplate(5, InputBuilderPopupComponent_ngs_input_builder_5_Template, 1, 2, "ngs-input-builder", 3);
        ɵɵelementEnd();
        ɵɵelementEnd();
    } if (rf & 2) {
        ɵɵstyleMap(ctx.styleValues);
        ɵɵproperty("visible", ctx.isShown);
        ɵɵadvance(2);
        ɵɵtextInterpolate1(" ", ctx.inputBuilderDefinition == null ? null : ctx.inputBuilderDefinition.title, " ");
        ɵɵadvance(1);
        ɵɵstyleProp("width", ctx.setWidth, "px");
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.isShown);
    } }, directives: [Dialog, Header, NgIf, InputBuilderComponent], styles: [""], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵsetClassMetadata(InputBuilderPopupComponent, [{
        type: Component,
        args: [{
                selector: 'ngs-input-builder-popup',
                templateUrl: 'inputBuilderPopup.component.html',
                styleUrls: ['inputBuilderPopup.component.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ChangeDetectorRef }]; }, { inputBuilderDefinition: [{
            type: Input
        }], attachMouseClick: [{
            type: Input
        }], inputModel: [{
            type: Input
        }], setWidth: [{
            type: Input
        }], setTop: [{
            type: Input
        }], setLeft: [{
            type: Input
        }], modelUpdated: [{
            type: Output
        }], valueUpdated: [{
            type: Output
        }], okClicked: [{
            type: Output
        }], cancelClicked: [{
            type: Output
        }] }); })();

class InputBuilderModule {
    static forRoot() {
        return {
            ngModule: InputBuilderModule,
        };
    }
}
InputBuilderModule.ɵmod = ɵɵdefineNgModule({ type: InputBuilderModule });
InputBuilderModule.ɵinj = ɵɵdefineInjector({ factory: function InputBuilderModule_Factory(t) { return new (t || InputBuilderModule)(); }, imports: [[
            CommonModule,
            CoreModule,
            AutoCompleteModule,
            FormsModule,
            ReactiveFormsModule,
            DialogModule,
            SharedModule,
            EditorModule,
            ListboxModule,
            SelectButtonModule,
            ColorPickerModule,
            SliderModule,
            ChipsModule,
            ReactiveFormsModule,
            InputSwitchModule,
            InputTextModule,
            InputMaskModule,
            SpinnerModule,
            CalendarModule,
            TriStateCheckboxModule,
            InputTextareaModule,
            CheckboxModule,
            RadioButtonModule,
            DropdownModule,
            PasswordModule,
            RatingModule,
            KeyFilterModule,
            MultiSelectModule,
            ToggleButtonModule,
            TooltipModule,
            NgJsonEditorModule,
            FileUploadModule,
            TranslateModule.forChild(),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(InputBuilderModule, { declarations: [EditableTitleComponent, InputBuilderComponent, InputBuilderPopupComponent], imports: [CommonModule,
        CoreModule,
        AutoCompleteModule,
        FormsModule,
        ReactiveFormsModule,
        DialogModule,
        SharedModule,
        EditorModule,
        ListboxModule,
        SelectButtonModule,
        ColorPickerModule,
        SliderModule,
        ChipsModule,
        ReactiveFormsModule,
        InputSwitchModule,
        InputTextModule,
        InputMaskModule,
        SpinnerModule,
        CalendarModule,
        TriStateCheckboxModule,
        InputTextareaModule,
        CheckboxModule,
        RadioButtonModule,
        DropdownModule,
        PasswordModule,
        RatingModule,
        KeyFilterModule,
        MultiSelectModule,
        ToggleButtonModule,
        TooltipModule,
        NgJsonEditorModule,
        FileUploadModule, TranslateModule], exports: [EditableTitleComponent, InputBuilderComponent, InputBuilderPopupComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(InputBuilderModule, [{
        type: NgModule,
        args: [{
                declarations: [EditableTitleComponent, InputBuilderComponent, InputBuilderPopupComponent],
                imports: [
                    CommonModule,
                    CoreModule,
                    AutoCompleteModule,
                    FormsModule,
                    ReactiveFormsModule,
                    DialogModule,
                    SharedModule,
                    EditorModule,
                    ListboxModule,
                    SelectButtonModule,
                    ColorPickerModule,
                    SliderModule,
                    ChipsModule,
                    ReactiveFormsModule,
                    InputSwitchModule,
                    InputTextModule,
                    InputMaskModule,
                    SpinnerModule,
                    CalendarModule,
                    TriStateCheckboxModule,
                    InputTextareaModule,
                    CheckboxModule,
                    RadioButtonModule,
                    DropdownModule,
                    PasswordModule,
                    RatingModule,
                    KeyFilterModule,
                    MultiSelectModule,
                    ToggleButtonModule,
                    TooltipModule,
                    NgJsonEditorModule,
                    FileUploadModule,
                    TranslateModule.forChild(),
                ],
                exports: [EditableTitleComponent, InputBuilderComponent, InputBuilderPopupComponent],
            }]
    }], null, null); })();

/*
 * Public API Surface of inputbuilder
 */

/**
 * Generated bundle index. Do not edit.
 */

export { EditableTitleComponent, InputBuilderComponent, InputBuilderModule, InputBuilderPopupComponent };
//# sourceMappingURL=ngscaffolding-inputbuilder.js.map
