import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChildren } from '@angular/core';
import { of, forkJoin } from 'rxjs';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { JsonEditorOptions } from 'ang-jsoneditor';
import { tap, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { AppSettings, ZuluDateHelper, ReferenceValue, InputTypes, ObjectPathHelper } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "@ngscaffolding/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "primeng/inputtext";
import * as i5 from "primeng/password";
import * as i6 from "primeng/keyfilter";
import * as i7 from "primeng/slider";
import * as i8 from "primeng/inputmask";
import * as i9 from "primeng/spinner";
import * as i10 from "primeng/inputtextarea";
import * as i11 from "primeng/checkbox";
import * as i12 from "primeng/dropdown";
import * as i13 from "primeng/autocomplete";
import * as i14 from "primeng/chips";
import * as i15 from "primeng/multiselect";
import * as i16 from "primeng/inputswitch";
import * as i17 from "primeng/calendar";
import * as i18 from "ang-jsoneditor";
import * as i19 from "primeng/fileupload";
import * as i20 from "primeng/button";
import * as i21 from "primeng/tooltip";
import * as i22 from "@ngx-translate/core";
const _c0 = ["dropDown"];
function InputBuilderComponent_form_0_div_1_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 13);
} }
function InputBuilderComponent_form_0_div_1_span_3_input_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "input", 16);
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_span_3_input_1_Template, 1, 3, "input", 14);
    i0.ɵɵelementStart(2, "label", 15);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !input_r3.mask);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("for", input_r3.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r5.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_4_input_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "input", 18);
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_span_4_input_1_Template, 1, 3, "input", 17);
    i0.ɵɵelementStart(2, "label", 15);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !input_r3.mask);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("for", input_r3.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r6.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_5_input_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "input", 20);
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_span_5_input_1_Template, 1, 3, "input", 19);
    i0.ɵɵelementStart(2, "label");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !input_r3.mask);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r7.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "input", 21);
    i0.ɵɵelementStart(2, "label");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r8.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-slider", 22);
    i0.ɵɵelementStart(2, "label");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name)("min", input_r3.min)("max", input_r3.max)("step", input_r3.step);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r9.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "p-inputMask", 23);
    i0.ɵɵelementStart(2, "label");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("mask", input_r3.mask)("id", input_r3.name)("formControl", ctx_r10.form.controls[input_r3.name]);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r10.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "p-spinner", 24);
    i0.ɵɵelementStart(2, "label");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("min", input_r3.min)("max", input_r3.max)("formControl", ctx_r11.form.controls[input_r3.name]);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r11.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "textarea", 25);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("rows", input_r3.rows)("placeholder", input_r3.label)("formControlName", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "p-checkbox", 26);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("label", input_r3.label)("id", input_r3.name)("formControl", ctx_r13.form.controls[input_r3.name]);
} }
const _c1 = function () { return { width: "100%" }; };
function InputBuilderComponent_form_0_div_1_span_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-dropdown", 27, 28);
    i0.ɵɵelementStart(3, "label", 15);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c1));
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("options", ctx_r14.dataSourceLookup[input_r3.name])("filter", input_r3.selectFilter)("formControlName", input_r3.name);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("for", input_r3.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r14.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-dropdown", 29, 28);
    i0.ɵɵelementStart(3, "label", 15);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c1));
    i0.ɵɵproperty("id", input_r3.name)("options", ctx_r15.dataSourceLookup[input_r3.name])("filter", input_r3.selectFilter)("tabindex", input_r3.tabindex)("formControlName", input_r3.name);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("for", input_r3.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r15.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_p_autoComplete_14_Template(rf, ctx) { if (rf & 1) {
    const _r52 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "p-autoComplete", 30);
    i0.ɵɵlistener("completeMethod", function InputBuilderComponent_form_0_div_1_p_autoComplete_14_Template_p_autoComplete_completeMethod_0_listener($event) { i0.ɵɵrestoreView(_r52); const input_r3 = i0.ɵɵnextContext().$implicit; const ctx_r50 = i0.ɵɵnextContext(2); return ctx_r50.searchAutoComplete($event, input_r3); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r16 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(7, _c1));
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("dropdown", true)("formControlName", input_r3.name)("suggestions", ctx_r16.dataSourceLookup[input_r3.name])("placeholder", ctx_r16.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-chips", 31);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("placeholder", input_r3.label)("formControlName", input_r3.name);
} }
function InputBuilderComponent_form_0_div_1_span_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-multiSelect", 32);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("filterPlaceHolder", input_r3.name)("formControlName", input_r3.name)("filter", false)("options", ctx_r18.dataSourceLookup[input_r3.name]);
} }
function InputBuilderComponent_form_0_div_1_span_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵelement(1, "p-inputSwitch", 33);
    i0.ɵɵelementStart(2, "label", 34);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("id", input_r3.name)("formControlName", input_r3.name);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r19.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-calendar", 35);
    i0.ɵɵpipe(2, "async");
    i0.ɵɵpipe(3, "async");
    i0.ɵɵpipe(4, "async");
    i0.ɵɵelementStart(5, "label");
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r20 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", i0.ɵɵpipeBind1(2, 7, ctx_r20.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", i0.ɵɵpipeBind1(3, 9, ctx_r20.appSettings.getBoolean("inputShowCalendarIcon")))("dateFormat", i0.ɵɵpipeBind1(4, 11, ctx_r20.appSettings.getString("inputDateFormat")))("formControlName", input_r3.name)("id", input_r3.name);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r20.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-calendar", 35);
    i0.ɵɵpipe(2, "async");
    i0.ɵɵpipe(3, "async");
    i0.ɵɵpipe(4, "async");
    i0.ɵɵelementStart(5, "label");
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r21 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", i0.ɵɵpipeBind1(2, 7, ctx_r21.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", i0.ɵɵpipeBind1(3, 9, ctx_r21.appSettings.getBoolean("inputShowCalendarIcon")))("dateFormat", i0.ɵɵpipeBind1(4, 11, ctx_r21.appSettings.getString("inputDateFormat")))("formControlName", input_r3.name)("id", input_r3.name);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r21.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-calendar", 36);
    i0.ɵɵpipe(2, "async");
    i0.ɵɵpipe(3, "async");
    i0.ɵɵpipe(4, "async");
    i0.ɵɵelementStart(5, "label");
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", i0.ɵɵpipeBind1(2, 7, ctx_r22.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", i0.ɵɵpipeBind1(3, 9, ctx_r22.appSettings.getBoolean("inputShowCalendarIcon")))("dateFormat", i0.ɵɵpipeBind1(4, 11, ctx_r22.appSettings.getString("inputDateFormat")))("formControlName", input_r3.name)("id", input_r3.name);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r22.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "p-calendar", 37);
    i0.ɵɵpipe(2, "async");
    i0.ɵɵpipe(3, "async");
    i0.ɵɵelementStart(4, "label");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r23 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("showButtonBar", i0.ɵɵpipeBind1(2, 6, ctx_r23.appSettings.getBoolean("inputDateShowButtonBar")))("showIcon", i0.ɵɵpipeBind1(3, 8, ctx_r23.appSettings.getBoolean("inputShowCalendarIcon")))("formControlName", input_r3.name)("id", input_r3.name);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r23.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_22_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "json-editor", 38);
    i0.ɵɵelementStart(2, "label");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("options", ctx_r24.editorOptions)("data", input_r3.value);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r24.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_23_Template(rf, ctx) { if (rf & 1) {
    const _r64 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelementStart(1, "p-fileUpload", 39);
    i0.ɵɵlistener("uploadHandler", function InputBuilderComponent_form_0_div_1_span_23_Template_p_fileUpload_uploadHandler_1_listener($event) { i0.ɵɵrestoreView(_r64); const input_r3 = i0.ɵɵnextContext().$implicit; const ctx_r62 = i0.ɵɵnextContext(2); return ctx_r62.attachFiles($event, input_r3); });
    i0.ɵɵpipe(2, "translate");
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r25 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("chooseLabel", i0.ɵɵpipeBind1(2, 4, "Choose File"));
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("accept", input_r3.accept || ctx_r25.allowedFileTypes)("maxFileSize", input_r3.maxFileSize || ctx_r25.maxFileSize);
} }
function InputBuilderComponent_form_0_div_1_div_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 40);
    i0.ɵɵelementStart(1, "span", 13);
    i0.ɵɵelement(2, "input", 41);
    i0.ɵɵelementStart(3, "label");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
    i0.ɵɵelement(5, "button", 42);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r26 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r26.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelementStart(1, "div", 43);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r27 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("id", input_r3.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r27.loadComponent(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 13);
    i0.ɵɵelement(1, "input", 44);
    i0.ɵɵelementStart(2, "label");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r28 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("tabindex", input_r3.tabindex)("formControlName", input_r3.name)("id", input_r3.name);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r28.getLabel(input_r3));
} }
function InputBuilderComponent_form_0_div_1_span_27_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 45);
    i0.ɵɵelement(1, "i", 46);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("pTooltip", input_r3.help);
} }
function InputBuilderComponent_form_0_div_1_div_28_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", input_r3.validateRequired, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", input_r3.validateRequiredTrue, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", input_r3.validateEmail, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", input_r3.validatePatternMessage, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", input_r3.validateMinLengthMessage, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", input_r3.validateMaxLengthMessage, " ");
} }
function InputBuilderComponent_form_0_div_1_div_28_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 47);
    i0.ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_div_28_div_1_Template, 2, 1, "div", 48);
    i0.ɵɵtemplate(2, InputBuilderComponent_form_0_div_1_div_28_div_2_Template, 2, 1, "div", 48);
    i0.ɵɵtemplate(3, InputBuilderComponent_form_0_div_1_div_28_div_3_Template, 2, 1, "div", 48);
    i0.ɵɵtemplate(4, InputBuilderComponent_form_0_div_1_div_28_div_4_Template, 2, 1, "div", 48);
    i0.ɵɵtemplate(5, InputBuilderComponent_form_0_div_1_div_28_div_5_Template, 2, 1, "div", 48);
    i0.ɵɵtemplate(6, InputBuilderComponent_form_0_div_1_div_28_div_6_Template, 2, 1, "div", 48);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r30 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.required);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.requiredTrue);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.email);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.pattern);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.minlength);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r30.form.get(input_r3.name).errors.maxlength);
} }
function InputBuilderComponent_form_0_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵelementStart(1, "div", 5);
    i0.ɵɵtemplate(2, InputBuilderComponent_form_0_div_1_span_2_Template, 1, 0, "span", 6);
    i0.ɵɵtemplate(3, InputBuilderComponent_form_0_div_1_span_3_Template, 4, 3, "span", 6);
    i0.ɵɵtemplate(4, InputBuilderComponent_form_0_div_1_span_4_Template, 4, 3, "span", 6);
    i0.ɵɵtemplate(5, InputBuilderComponent_form_0_div_1_span_5_Template, 4, 2, "span", 6);
    i0.ɵɵtemplate(6, InputBuilderComponent_form_0_div_1_span_6_Template, 4, 4, "span", 6);
    i0.ɵɵtemplate(7, InputBuilderComponent_form_0_div_1_span_7_Template, 4, 7, "span", 6);
    i0.ɵɵtemplate(8, InputBuilderComponent_form_0_div_1_span_8_Template, 4, 5, "span", 7);
    i0.ɵɵtemplate(9, InputBuilderComponent_form_0_div_1_span_9_Template, 4, 6, "span", 7);
    i0.ɵɵtemplate(10, InputBuilderComponent_form_0_div_1_span_10_Template, 2, 4, "span", 6);
    i0.ɵɵtemplate(11, InputBuilderComponent_form_0_div_1_span_11_Template, 2, 4, "span", 7);
    i0.ɵɵtemplate(12, InputBuilderComponent_form_0_div_1_span_12_Template, 5, 10, "span", 6);
    i0.ɵɵtemplate(13, InputBuilderComponent_form_0_div_1_span_13_Template, 5, 10, "span", 6);
    i0.ɵɵtemplate(14, InputBuilderComponent_form_0_div_1_p_autoComplete_14_Template, 1, 8, "p-autoComplete", 8);
    i0.ɵɵtemplate(15, InputBuilderComponent_form_0_div_1_span_15_Template, 2, 4, "span", 6);
    i0.ɵɵtemplate(16, InputBuilderComponent_form_0_div_1_span_16_Template, 2, 6, "span", 6);
    i0.ɵɵtemplate(17, InputBuilderComponent_form_0_div_1_span_17_Template, 4, 4, "span", 7);
    i0.ɵɵtemplate(18, InputBuilderComponent_form_0_div_1_span_18_Template, 7, 13, "span", 6);
    i0.ɵɵtemplate(19, InputBuilderComponent_form_0_div_1_span_19_Template, 7, 13, "span", 6);
    i0.ɵɵtemplate(20, InputBuilderComponent_form_0_div_1_span_20_Template, 7, 13, "span", 6);
    i0.ɵɵtemplate(21, InputBuilderComponent_form_0_div_1_span_21_Template, 6, 10, "span", 6);
    i0.ɵɵtemplate(22, InputBuilderComponent_form_0_div_1_span_22_Template, 4, 4, "span", 6);
    i0.ɵɵtemplate(23, InputBuilderComponent_form_0_div_1_span_23_Template, 3, 6, "span", 6);
    i0.ɵɵtemplate(24, InputBuilderComponent_form_0_div_1_div_24_Template, 6, 4, "div", 9);
    i0.ɵɵtemplate(25, InputBuilderComponent_form_0_div_1_span_25_Template, 3, 2, "span", 6);
    i0.ɵɵtemplate(26, InputBuilderComponent_form_0_div_1_span_26_Template, 4, 4, "span", 10);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(27, InputBuilderComponent_form_0_div_1_span_27_Template, 2, 1, "span", 11);
    i0.ɵɵtemplate(28, InputBuilderComponent_form_0_div_1_div_28_Template, 7, 6, "div", 12);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const input_r3 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext(2);
    let tmp_29_0 = null;
    i0.ɵɵclassProp("noPadding", ctx_r1.inputBuilderDefinition.inputLocation === "inline");
    i0.ɵɵproperty("className", ctx_r1.controlStyle);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitch", input_r3.type)("className", ctx_r1.getContainerClass(input_r3));
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "null");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "textbox");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "password");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "email");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "number");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "slider");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "mask");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "spinner");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "textarea");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "checkbox");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "dropdown");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "dropdownobject");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "autocomplete");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "chips");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "multiselect");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "switch");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "datetime");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "datetimeUTC");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "date");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "time");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "json");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "fileattach");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "search");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitchCase", "dynamic");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", input_r3.help);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ((tmp_29_0 = ctx_r1.form.get(input_r3.name)) == null ? null : tmp_29_0.invalid) && (((tmp_29_0 = ctx_r1.form.get(input_r3.name)) == null ? null : tmp_29_0.dirty) || ((tmp_29_0 = ctx_r1.form.get(input_r3.name)) == null ? null : tmp_29_0.touched) || ctx_r1.formSubmitted));
} }
function InputBuilderComponent_form_0_div_2_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r87 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 51);
    i0.ɵɵelementStart(1, "button", 52);
    i0.ɵɵlistener("click", function InputBuilderComponent_form_0_div_2_div_1_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r87); const ctx_r86 = i0.ɵɵnextContext(3); return ctx_r86.onCustom(); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r83 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("icon", ctx_r83.inputBuilderDefinition.customButtonIcon);
    i0.ɵɵpropertyInterpolate("label", ctx_r83.inputBuilderDefinition.customButtonText);
} }
function InputBuilderComponent_form_0_div_2_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r89 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 51);
    i0.ɵɵelementStart(1, "button", 53);
    i0.ɵɵlistener("click", function InputBuilderComponent_form_0_div_2_div_2_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r89); const ctx_r88 = i0.ɵɵnextContext(3); return ctx_r88.onCancel(); });
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r84 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("icon", ctx_r84.inputBuilderDefinition.cancelButtonIcon);
    i0.ɵɵpropertyInterpolate("label", ctx_r84.inputBuilderDefinition.cancelButtonText);
} }
function InputBuilderComponent_form_0_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 51);
    i0.ɵɵelement(1, "button", 54);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r85 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵpropertyInterpolate("icon", ctx_r85.inputBuilderDefinition.okButtonIcon);
    i0.ɵɵpropertyInterpolate("label", ctx_r85.inputBuilderDefinition.okButtonText);
} }
function InputBuilderComponent_form_0_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 49);
    i0.ɵɵtemplate(1, InputBuilderComponent_form_0_div_2_div_1_Template, 2, 2, "div", 50);
    i0.ɵɵtemplate(2, InputBuilderComponent_form_0_div_2_div_2_Template, 2, 2, "div", 50);
    i0.ɵɵtemplate(3, InputBuilderComponent_form_0_div_2_div_3_Template, 2, 2, "div", 50);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.inputBuilderDefinition.customButtonText);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.inputBuilderDefinition.cancelButtonText);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.inputBuilderDefinition.okButtonText);
} }
function InputBuilderComponent_form_0_Template(rf, ctx) { if (rf & 1) {
    const _r91 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "form", 1);
    i0.ɵɵlistener("ngSubmit", function InputBuilderComponent_form_0_Template_form_ngSubmit_0_listener() { i0.ɵɵrestoreView(_r91); const ctx_r90 = i0.ɵɵnextContext(); return ctx_r90.onSubmit(ctx_r90.form); });
    i0.ɵɵtemplate(1, InputBuilderComponent_form_0_div_1_Template, 29, 31, "div", 2);
    i0.ɵɵtemplate(2, InputBuilderComponent_form_0_div_2_Template, 4, 3, "div", 3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("noPadding", ctx_r0.inputBuilderDefinition.inputLocation === "inline")("form-group", ctx_r0.inputBuilderDefinition.inputLocation !== "inline");
    i0.ɵɵproperty("formGroup", ctx_r0.form);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r0.filteredInputDetails);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.inputBuilderDefinition.customButtonText || ctx_r0.inputBuilderDefinition.cancelButtonText || ctx_r0.inputBuilderDefinition.okButtonText);
} }
export class InputBuilderComponent {
    constructor(elementRef, ref, appSettings, appSettingsQuery, authQuery, refValuesService, componentLoader, authService) {
        this.elementRef = elementRef;
        this.ref = ref;
        this.appSettings = appSettings;
        this.appSettingsQuery = appSettingsQuery;
        this.authQuery = authQuery;
        this.refValuesService = refValuesService;
        this.componentLoader = componentLoader;
        this.authService = authService;
        this.modelUpdated = new EventEmitter();
        this.valueUpdated = new EventEmitter();
        this.fileAttached = new EventEmitter();
        this.okClicked = new EventEmitter();
        this.cancelClicked = new EventEmitter();
        this.formBuilt = false;
        this.controlStyle = 'p-col-12';
        this.containerClass = 'p-col-12'; // This changes to allow the help Icon
        this.formSubmitted = false;
        this.dataSourceLookup = {};
        this.editorOptions = new JsonEditorOptions();
        this.editorOptions.modes = ['code', 'text', 'tree', 'view']; // set all allowed modes
    }
    getLabel(input) {
        if (input.label) {
            return input.label;
        }
        else if (input.name) {
            return input.name.replace(/([A-Z]+)/g, ' $1').replace(/([A-Z][a-z])/g, ' $1');
        }
    }
    loadComponent(input) {
        this.componentLoader.loadComponent(input.angularComponent).then(element => {
            this.elementRef.nativeElement.querySelector(`#${input.name}`).appendChild(element);
        });
    }
    onSubmit(form) {
        this.formSubmitted = true;
        if (this.form.valid) {
            if (this.inputBuilderDefinition.okButtonCallBack) {
                this.inputBuilderDefinition.okButtonCallBack(this.clonedInputModel);
            }
            this.okClicked.emit([this.clonedInputModel, this.fileContent]);
        }
    }
    onCancel() {
        if (this.inputBuilderDefinition.cancelButtonCallBack) {
            this.inputBuilderDefinition.cancelButtonCallBack(this.clonedInputModel);
        }
        this.cancelClicked.emit();
    }
    onCustom() {
        if (this.inputBuilderDefinition.customButtonCallBack) {
            this.inputBuilderDefinition.customButtonCallBack(this.clonedInputModel);
        }
    }
    ngOnChanges(changes) {
        if (changes.inputModel && changes.inputModel.currentValue !== changes.inputModel.previousValue) {
            this.formBuilt = false;
        }
        if (changes.inputBuilderDefinition &&
            changes.inputBuilderDefinition.currentValue !== changes.inputBuilderDefinition.previousValue) {
            this.formBuilt = false;
        }
        this.buildForm();
    }
    decorateInputModel() {
        // Add in standard Values
        const currentUser = this.authQuery.getValue().userDetails;
        const now = new Date();
        this.clonedInputModel['now'] = now;
        this.clonedInputModel['zuluDate'] = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds()));
        this.clonedInputModel['userId'] = currentUser.userId;
    }
    ngOnInit() {
        this.maxFileSize = this.appSettingsQuery.hasEntity(AppSettings.maximumFileSize)
            ? this.appSettingsQuery.getEntity(AppSettings.maximumFileSize).value
            : 999999;
        this.allowedFileTypes = this.appSettingsQuery.hasEntity(AppSettings.allowedFileTypes)
            ? this.appSettingsQuery.getEntity(AppSettings.allowedFileTypes).value
            : '';
    }
    getContainerClass(inputDetail) {
        return inputDetail.help ? 'p-col-11' : 'p-col-12';
    }
    attachFiles(event, input) {
        if (this.inputBuilderDefinition.loadFileContent) {
            if (event.files && event.files.length > 0) {
                for (const file of event.files) {
                    const fileReader = new FileReader();
                    fileReader.onload = () => {
                        // this 'text' is the content of the file
                        this.fileContent = fileReader.result.toString();
                        this.fileAttached.emit(this.fileContent);
                    };
                    fileReader.readAsText(file);
                }
            }
        }
        else {
            this.fieldChanged(input, event.files[0]);
        }
    }
    searchAutoComplete($event, input) {
        this.loadDataSource(input, $event.query).subscribe(data => {
            this.dataSourceLookup[input.name] = data.referenceValueItems;
            setTimeout(() => {
                this.ref.detectChanges();
            }, 50);
        });
    }
    getDefaultValue(value) {
        switch (value) {
            case 'today':
            case 'now':
                return ZuluDateHelper.getGMTDate(new Date());
                break;
            case 'yesterday': {
                const now = new Date();
                return ZuluDateHelper.getGMTDate(new Date(now.setDate(now.getDate() - 1)));
                break;
            }
            case 'tomorrow': {
                const now = new Date();
                return ZuluDateHelper.getGMTDate(new Date(now.setDate(now.getDate() + 1)));
                break;
            }
            default:
                return value;
                break;
        }
    }
    buildForm() {
        if (this.formBuilt || !this.inputBuilderDefinition || !this.inputModel) {
            return;
        }
        this.formBuilt = true;
        // Clone our inputModel
        this.clonedInputModel = Object.assign({}, this.inputModel);
        this.decorateInputModel();
        // Default to full width (changes if help found)
        this.containerClass = 'p-col-12';
        if (this.inputBuilderDefinition.orientation === "horizontal" /* Horizontal */ ||
            this.inputBuilderDefinition.inputLocation === "inline" /* INLINE */) {
            if (this.inputBuilderDefinition.columnCount > 0 && this.inputBuilderDefinition.columnCount < 5) {
                const colSize = 12 / this.inputBuilderDefinition.columnCount;
                this.controlStyle = `p-col-${colSize}`;
            }
        }
        else {
            this.controlStyle = 'p-col-12';
        }
        const formGroup = {};
        const localModel = {};
        const asyncGets = [];
        // Always have one to run
        asyncGets.push(of(new ReferenceValue()));
        if (this.inputBuilderDefinition.inputDetails) {
            this.filteredInputDetails = this.authService.filterItemsByRole(this.inputBuilderDefinition.inputDetails);
            for (const inputDetail of this.filteredInputDetails) {
                // Get value from model and apply to new FormControl
                let inputValue = null;
                if (ObjectPathHelper.get(this.clonedInputModel, inputDetail.name)) {
                    // If we have a passed value in the model, set the control value to this
                    inputValue = this.parseValue(inputDetail, ObjectPathHelper.get(this.clonedInputModel, inputDetail.name));
                }
                else if (inputDetail.value) {
                    // If we have a value passed in the Input definition set the control value to this.
                    inputValue = this.getDefaultValue(inputDetail.value);
                    ObjectPathHelper.set(this.clonedInputModel, inputDetail.name, inputValue);
                }
                else {
                    // This ensures that the property is set if not passed in
                    ObjectPathHelper.set(this.clonedInputModel, inputDetail.name, null);
                }
                const formControl = new FormControl(inputValue, this.mapValidators(inputDetail)); // Validators passed here too
                // Readonly
                if (inputDetail.readonly) {
                    formControl.disable();
                }
                // Remember for dependecy check in a mo
                ObjectPathHelper.set(localModel, inputDetail.name, inputValue);
                if (inputDetail.type !== InputTypes.search) {
                    formControl.valueChanges.subscribe(changes => {
                        this.fieldChanged(inputDetail, changes);
                    });
                }
                else {
                    // Handle debounce for search boxes
                    formControl.valueChanges
                        .pipe(debounceTime(500), distinctUntilChanged(), tap(text => {
                        this.fieldChanged(inputDetail, text);
                    }))
                        .subscribe();
                }
                formGroup[inputDetail.name] = formControl;
                if (inputDetail['datasourceItems'] && inputDetail['datasourceItems'].length > 0) {
                    // Pre loaded datasourceItems
                    this.dataSourceLookup[inputDetail.name] = inputDetail['datasourceItems'];
                    this.manipulateValuesToObjects(formControl, inputDetail, inputValue);
                }
                else if (inputDetail.type !== InputTypes.autocomplete &&
                    inputDetail.hasOwnProperty('referenceValueName') &&
                    inputDetail.referenceValueName) {
                    // If Datasource, get the values
                    // Do we need a seed value
                    let seed = '';
                    if (inputDetail.referenceValueSeedDependency) {
                        seed = this.clonedInputModel[inputDetail.referenceValueSeedDependency];
                    }
                    asyncGets.push(this.loadDataSource(inputDetail, seed).pipe(tap(data => {
                        this.dataSourceLookup[inputDetail.name] = data.referenceValueItems;
                        this.manipulateValuesToObjects(formControl, inputDetail, inputValue);
                    })));
                }
            }
            // Now re-loop notifying any dependencies
            for (const inputDetail of this.filteredInputDetails) {
                this.checkForDependencies(inputDetail, localModel[inputDetail.name]);
            }
        }
        this.formRendered$ = forkJoin(asyncGets);
        this.formRendered$.subscribe(results => {
            console.log('Form rendering');
            this.form = new FormGroup(formGroup);
        });
        const formValidators = [];
        if (this.inputBuilderDefinition.customValidators) {
            this.inputBuilderDefinition.customValidators.forEach(validator => {
                formValidators.push({});
            });
        }
        this.form = new FormGroup(formGroup, formValidators);
    }
    manipulateValuesToObjects(formControl, inputDetail, inputValue) {
        if (inputDetail.type === InputTypes.multiselect) {
            if (inputValue) {
                const foundValues = this.dataSourceLookup[inputDetail.name].filter(ds => inputValue.includes(ds.value));
                setTimeout(_ => {
                    formControl.setValue(foundValues, {
                        onlySelf: true,
                        emitEvent: false
                    });
                }, 10);
            }
        }
        else {
            // Now we have the values, find the ReferenceValue that matches the inputValue from above
            if (this.clonedInputModel[inputDetail.name] && this.dataSourceLookup[inputDetail.name]) {
                if (inputValue) {
                    let foundInputValue;
                    if (inputValue === 'first') {
                        foundInputValue = this.dataSourceLookup[inputDetail.name][0];
                    }
                    else {
                        foundInputValue = this.dataSourceLookup[inputDetail.name] // tslint:disable-next-line:triple-equals
                            .find(ds => ds.value && ds.value.toString() == inputValue.toString()); // Full on corecion
                    }
                    if (foundInputValue) {
                        setTimeout(_ => {
                            formControl.setValue(foundInputValue, {
                                onlySelf: true,
                                emitEvent: false
                            });
                        }, 10);
                    }
                }
            }
        }
    }
    parseValue(inputDetail, value) {
        switch (inputDetail.type) {
            case InputTypes.checkbox:
            case InputTypes.switch: {
                return value.toString() === 'true' || value.toString() === 'True' || value.toString() === '1';
            }
            case InputTypes.number:
            case InputTypes.rating:
            case InputTypes.spinner: {
                return Number(value);
            }
            case InputTypes.date:
            case InputTypes.datetime:
            case InputTypes.time: {
                const valueAsDate = new Date(value);
                if (inputDetail.forceUTC) {
                    return ZuluDateHelper.getGMTDate(valueAsDate);
                }
                else {
                    return valueAsDate;
                }
            }
        }
        // Default just pass back original
        return value;
    }
    fieldChanged(inputDetail, value) {
        let returnedValue;
        // If we are any 'Object' type input just return the object. Simples.
        if (inputDetail.type && inputDetail.type.endsWith('object')) {
            returnedValue = value;
        }
        else if (inputDetail.type === InputTypes.fileattach) {
            returnedValue = value;
        }
        else if ((inputDetail.type && inputDetail.type === InputTypes.date) ||
            inputDetail.type === InputTypes.datetime ||
            inputDetail.type === InputTypes.time) {
            if (inputDetail.forceUTC) {
                returnedValue = ZuluDateHelper.setGMTDate(value);
            }
            else {
                returnedValue = value;
            }
        }
        else if (inputDetail.type === InputTypes.spinner) {
            returnedValue = Number(value);
        }
        else if (inputDetail.type && inputDetail.type === InputTypes.multiselect) {
            // This is an array
            if (Array.isArray(value)) {
                const asArray = value;
                returnedValue = asArray.map(refVal => refVal.value);
            }
            else {
                returnedValue = [];
            }
        }
        else {
            if (value) {
                returnedValue = value.toString();
            }
            else {
                returnedValue = null;
            }
            if (value && value.hasOwnProperty('value')) {
                returnedValue = value.value;
            }
            else {
                returnedValue = value;
            }
        }
        // Update listeners
        this.valueUpdated.emit([inputDetail.name, returnedValue]);
        // Do We need to notify another input of this change?
        this.checkForDependencies(inputDetail, returnedValue);
        // Flatten out Objects to value
        const updatedModel = Object.assign({}, this.clonedInputModel);
        updatedModel[inputDetail.name] = returnedValue;
        // Tell subscribers we have changes
        this.modelUpdated.emit(updatedModel);
        this.clonedInputModel = updatedModel;
    }
    checkForDependencies(inputDetail, updatedValue) {
        this.filteredInputDetails.forEach(input => {
            if (this.form &&
                input.hasOwnProperty('referenceValueSeedDependency') &&
                input.referenceValueSeedDependency &&
                input.referenceValueSeedDependency === inputDetail.name) {
                this.loadDataSource(input, updatedValue, input.referenceValueChildLevel).subscribe(data => {
                    this.dataSourceLookup[input.name] = data.referenceValueItems;
                    const formControl = this.form.controls[inputDetail.name];
                    this.manipulateValuesToObjects(formControl, inputDetail, formControl.value);
                });
            }
        });
    }
    loadDataSource(inputDetail, seed = '', childDepth = 0) {
        return this.refValuesService.getReferenceValue(inputDetail.referenceValueName, seed, childDepth);
    }
    mapValidators(inputDetail) {
        const formValidators = [];
        if (inputDetail) {
            // Required
            if (inputDetail.validateRequired) {
                formValidators.push(Validators.required);
            }
            // RequiredTrue
            if (inputDetail.validateRequiredTrue) {
                formValidators.push(Validators.requiredTrue);
            }
            // EMail
            if (inputDetail.validateEmail) {
                formValidators.push(Validators.email);
            }
            // Pattern
            if (inputDetail.validatePattern) {
                formValidators.push(Validators.pattern(inputDetail.validatePattern));
            }
            // Min Length
            if (inputDetail.validateMinLength) {
                formValidators.push(Validators.minLength(inputDetail.validateMinLength));
                if (!inputDetail.validateMinLengthMessage) {
                    inputDetail.validateMinLengthMessage = `${inputDetail.label} must be a minimum length of ${inputDetail.validateMinLength}`;
                }
            }
            // Max Length
            if (inputDetail.validateMaxLength) {
                formValidators.push(Validators.maxLength(inputDetail.validateMaxLength));
                if (!inputDetail.validateMaxLengthMessage) {
                    inputDetail.validateMaxLengthMessage = `${inputDetail.label} must be a max length of ${inputDetail.validateMinLength}`;
                }
            }
        }
        return formValidators;
    }
}
InputBuilderComponent.ɵfac = function InputBuilderComponent_Factory(t) { return new (t || InputBuilderComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.AppSettingsService), i0.ɵɵdirectiveInject(i1.AppSettingsQuery), i0.ɵɵdirectiveInject(i1.UserAuthenticationQuery), i0.ɵɵdirectiveInject(i1.ReferenceValuesService), i0.ɵɵdirectiveInject(i1.ComponentLoaderService), i0.ɵɵdirectiveInject(i1.UserAuthenticationBase)); };
InputBuilderComponent.ɵcmp = i0.ɵɵdefineComponent({ type: InputBuilderComponent, selectors: [["ngs-input-builder"]], viewQuery: function InputBuilderComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropDownChildren = _t);
    } }, inputs: { inputBuilderDefinition: "inputBuilderDefinition", inputModel: "inputModel" }, outputs: { modelUpdated: "modelUpdated", valueUpdated: "valueUpdated", fileAttached: "fileAttached", okClicked: "okClicked", cancelClicked: "cancelClicked" }, features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 3, consts: [["novalidate", "", "class", "p-grid ui-fluid", 3, "noPadding", "form-group", "formGroup", "ngSubmit", 4, "ngIf"], ["novalidate", "", 1, "p-grid", "ui-fluid", 3, "formGroup", "ngSubmit"], [3, "className", "noPadding", 4, "ngFor", "ngForOf"], ["class", "button-line", "class", "p-col-12", 4, "ngIf"], [3, "className"], [3, "ngSwitch", "className"], ["class", "p-float-label", 4, "ngSwitchCase"], [4, "ngSwitchCase"], ["appendTo", "body", "dataKey", "value", "field", "display", 3, "style", "tabindex", "dropdown", "formControlName", "suggestions", "placeholder", "completeMethod", 4, "ngSwitchCase"], ["class", "ui-inputgroup", 4, "ngSwitchCase"], ["class", "p-float-label", 4, "ngSwitchDefault"], ["class", "p-col-1", 4, "ngIf"], ["class", "ui-message ui-messages-error ui-corner-all", 4, "ngIf"], [1, "p-float-label"], ["class", "textInput", "type", "text", "pInputText", "", 3, "tabindex", "formControlName", "id", 4, "ngIf"], [3, "for"], ["type", "text", "pInputText", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], ["class", "textInput", "type", "password", "pPassword", "", 3, "tabindex", "formControlName", "id", 4, "ngIf"], ["type", "password", "pPassword", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], ["class", "textInput", "type", "email", "pInputText", "", 3, "tabindex", "formControlName", "id", 4, "ngIf"], ["type", "email", "pInputText", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], ["type", "text", "pKeyFilter", "num", "pInputText", "", 1, "textInput", 3, "tabindex", "formControlName", "id"], [3, "tabindex", "formControlName", "id", "min", "max", "step"], [3, "tabindex", "mask", "id", "formControl"], [3, "tabindex", "id", "min", "max", "formControl"], ["pInputTextarea", "", 1, "textInput", 3, "tabindex", "rows", "placeholder", "formControlName"], ["binary", "true", 3, "tabindex", "label", "id", "formControl"], ["appendTo", "body", "showClear", "true", "dataKey", "value", "optionLabel", "display", 1, "dropdownInput", 3, "tabindex", "id", "options", "filter", "formControlName"], ["dropDown", ""], ["appendTo", "body", "showClear", "true", "optionLabel", "display", 1, "dropdownInput", 3, "id", "options", "filter", "tabindex", "formControlName"], ["appendTo", "body", "dataKey", "value", "field", "display", 3, "tabindex", "dropdown", "formControlName", "suggestions", "placeholder", "completeMethod"], [3, "tabindex", "id", "placeholder", "formControlName"], ["appendTo", "body", "optionLabel", "display", "dataKey", "value", 1, "multi-select", 3, "tabindex", "id", "filterPlaceHolder", "formControlName", "filter", "options"], [3, "tabindex", "id", "formControlName"], [1, "switch-label"], ["appendTo", "body", "showTime", "true", "hourFormat", "24", 3, "tabindex", "showButtonBar", "showIcon", "dateFormat", "formControlName", "id"], ["appendTo", "body", 3, "tabindex", "showButtonBar", "showIcon", "dateFormat", "formControlName", "id"], ["appendTo", "body", "timeOnly", "true", "showTime", "true", "hourFormat", "24", 3, "tabindex", "showButtonBar", "showIcon", "formControlName", "id"], [3, "tabindex", "options", "data"], ["customUpload", "true", "auto", "true", 3, "tabindex", "accept", "maxFileSize", "chooseLabel", "uploadHandler"], [1, "ui-inputgroup"], ["type", "text", "pInputText", "", 2, "width", "100%", 3, "tabindex", "formControlName", "id"], ["pButton", "", "type", "button", "icon", "ui-icon-search"], [1, "textInput", 3, "id"], ["type", "text", "pInputText", "", 3, "tabindex", "formControlName", "id"], [1, "p-col-1"], ["tooltipPosition", "bottom", 1, "fa", "ui-icon-info", "helpIcon", 3, "pTooltip"], [1, "ui-message", "ui-messages-error", "ui-corner-all"], [4, "ngIf"], [1, "p-col-12"], ["class", "button-container p-col-3", 4, "ngIf"], [1, "button-container", "p-col-3"], ["pButton", "", "type", "button", "iconPos", "left", 1, "p-button-info", 3, "icon", "label", "click"], ["pButton", "", "type", "button", "iconPos", "left", 1, "p-button-warning", 3, "icon", "label", "click"], ["pButton", "", "type", "submit", "iconPos", "left", 1, "p-button-success", 3, "icon", "label"]], template: function InputBuilderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, InputBuilderComponent_form_0_Template, 3, 7, "form", 0);
        i0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(1, 1, ctx.formRendered$) && ctx.formBuilt && ctx.inputBuilderDefinition && ctx.filteredInputDetails);
    } }, directives: [i2.NgIf, i3.ɵangular_packages_forms_forms_y, i3.NgControlStatusGroup, i3.FormGroupDirective, i2.NgForOf, i2.NgSwitch, i2.NgSwitchCase, i2.NgSwitchDefault, i3.DefaultValueAccessor, i4.InputText, i3.NgControlStatus, i3.FormControlName, i5.Password, i6.KeyFilter, i7.Slider, i8.InputMask, i3.FormControlDirective, i9.Spinner, i10.InputTextarea, i11.Checkbox, i12.Dropdown, i13.AutoComplete, i14.Chips, i15.MultiSelect, i16.InputSwitch, i17.Calendar, i18.JsonEditorComponent, i19.FileUpload, i20.ButtonDirective, i21.Tooltip], pipes: [i2.AsyncPipe, i22.TranslatePipe], styles: [".small-label[_ngcontent-%COMP%]{font-size:12px}.textInput[_ngcontent-%COMP%]{width:100%}.switch-label[_ngcontent-%COMP%]{margin-left:16px}.inlineInputs[_ngcontent-%COMP%]{padding:0 3px 0 0!important}.multi-select[_ngcontent-%COMP%]{width:100%}.button-container[_ngcontent-%COMP%]{display:inline;margin-left:6px}"], changeDetection: 0 });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(InputBuilderComponent, [{
        type: Component,
        args: [{
                selector: 'ngs-input-builder',
                templateUrl: 'inputBuilder.component.html',
                styleUrls: ['inputBuilder.component.scss'],
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.AppSettingsService }, { type: i1.AppSettingsQuery }, { type: i1.UserAuthenticationQuery }, { type: i1.ReferenceValuesService }, { type: i1.ComponentLoaderService }, { type: i1.UserAuthenticationBase }]; }, { inputBuilderDefinition: [{
            type: Input
        }], inputModel: [{
            type: Input
        }], modelUpdated: [{
            type: Output
        }], valueUpdated: [{
            type: Output
        }], fileAttached: [{
            type: Output
        }], okClicked: [{
            type: Output
        }], cancelClicked: [{
            type: Output
        }], dropDownChildren: [{
            type: ViewChildren,
            args: ['dropDown']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,