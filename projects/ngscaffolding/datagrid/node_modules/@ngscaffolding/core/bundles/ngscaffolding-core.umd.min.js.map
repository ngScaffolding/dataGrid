{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../projects/ngscaffolding/core/src/lib/services/appSettings/appSettings.store.ts","../projects/ngscaffolding/core/src/lib/services/appSettings/appSettings.query.ts","../projects/ngscaffolding/core/src/lib/services/broadcast/broadcast.service.ts","../projects/ngscaffolding/core/src/lib/services/notification/notification.service.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.store.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.query.ts","../projects/ngscaffolding/core/src/lib/services/logging/logging.service.ts","../projects/ngscaffolding/core/src/lib/services/appSettings/appSettings.service.ts","../projects/ngscaffolding/core/src/lib/services/appAudit/appAudit.service.ts","../projects/ngscaffolding/core/src/lib/services/auditLog/auditLog.store.ts","../projects/ngscaffolding/core/src/lib/services/auditLog/auditLog.query.ts","../projects/ngscaffolding/core/src/lib/services/auditLog/auditLog.service.ts","../../projects/ngscaffolding/core/src/lib/services/componentLoader.service.ts","../projects/ngscaffolding/core/src/lib/services/coreErrorHandler/coreErrorHandler.service.ts","../projects/ngscaffolding/core/src/lib/services/dataSource/dataSource.store.ts","../projects/ngscaffolding/core/src/lib/services/dataSource/dataSource.query.ts","../projects/ngscaffolding/core/src/lib/services/dataSource/dataSource.service.ts","../projects/ngscaffolding/core/src/lib/services/menu/menu.store.ts","../projects/ngscaffolding/core/src/lib/services/menu/menu.query.ts","../projects/ngscaffolding/core/src/lib/services/rolesService/roles.store.ts","../projects/ngscaffolding/core/src/lib/services/rolesService/roles.query.ts","../projects/ngscaffolding/core/src/lib/services/rolesService/roles.service.ts","../projects/ngscaffolding/core/src/lib/services/menu/menu.service.ts","../projects/ngscaffolding/core/src/lib/services/referenceValues/referenceValues.store.ts","../projects/ngscaffolding/core/src/lib/services/referenceValues/referenceValues.query.ts","../projects/ngscaffolding/core/src/lib/services/referenceValues/refrenceValues.service.ts","../projects/ngscaffolding/core/src/lib/services/spinnerService/spinner.service.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/UserAuthenticationBase.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.service.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.oauth.service.ts","../projects/ngscaffolding/core/src/lib/services/userPreferences/userPreferences.store.ts","../projects/ngscaffolding/core/src/lib/services/userPreferences/userPreferences.query.ts","../projects/ngscaffolding/core/src/lib/services/userPreferences/userPreferences.service.ts","../projects/ngscaffolding/core/src/lib/services/widgetsService/widget.store.ts","../projects/ngscaffolding/core/src/lib/services/widgetsService/widget.query.ts","../projects/ngscaffolding/core/src/lib/services/widgetsService/widget.service.ts","../projects/ngscaffolding/core/src/lib/services/userService/user.service.ts","../projects/ngscaffolding/core/src/lib/services/userService/user.service.base.ts","../projects/ngscaffolding/core/src/lib/services/versions/versions.service.ts","../../projects/ngscaffolding/core/src/lib/directives/fill-height.directive.ts","../../projects/ngscaffolding/core/src/lib/pipes/buttonColour.pipe.ts","../../projects/ngscaffolding/core/src/lib/pipes/ngsDate.pipe.ts","../../projects/ngscaffolding/core/src/lib/pipes/ngsDateTime.pipe.ts","../../projects/ngscaffolding/core/src/lib/pipes/truncateText.pipe.ts","../../projects/ngscaffolding/core/src/lib/routeGuards/authoriseRoleGuard.ts","../projects/ngscaffolding/core/src/lib/components/dialogWindow/dialogWindow.component.ts","../projects/ngscaffolding/core/src/lib/components/dialogWindow/dialogWindow.component.html","../../../projects/ngscaffolding/core/src/lib/version.ts","../../../projects/ngscaffolding/core/src/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","pop","push","__values","o","s","m","__read","ar","error","__spread","concat","AppSettingsStore","_super","_this","isInitialised","console","log","EntityStore","factory","ɵfac","providedIn","StoreConfig","name","idKey","AppSettingsQuery","store","isInitialised$","select","state","QueryEntity","i0","ɵɵinject","exports","BroadcastService","_eventBus","Subject","broadcast","data","on","pipe","filter","event","map","NotificationService","showMessage","message","AuthenticationStore","userDetails","createBasicUser","Store","UserAuthenticationQuery","authenticated$","authenticated","currentUser$","isAuthenticated","toBoolean","getValue","getUserId","userId","getUser","Query","LoggingService","notification","appSettingsQuery","userQuery","http","err","methodName","showToast","severity","summary","detail","warning","warn","info","objectInfo","i1","HttpClient","AppSettingsService","appSettingsStore","logger","className","setValue","hasEntity","update","add","AppSettings","apiHome","loadFromServer","toString","getEntity","setLoading","get","timeout","retry","subscribe","appValues","forEach","appValue","setValues","settings","keys","getBoolean","selectEntity","entity","getString","AppAuditService","RecordLog","appLog","logDate","ZuluDateHelper","setGMTDate","Date","userID","post","AuditLogStore","AuditLogQuery","allAuditLog","getAll","AuditLogService","auditLogStore","auditLogQuery","polling","retryVal","isSending","defaultLog","mobileDefaultPolling","val","mobileDefaultRetries","StartPolling","SetDefault","auditLog","workingLog","assign","id","uuid","setInterval","SendLogEntries","logEntries","keys_1","finalize","remove","ComponentLoaderService","loader","injector","componentRegistry","lazy-component","modulePath","moduleRef","registerComponent","loadComponent","componentTag","cmpRegistryEntry","Error","document","createElement","path_1","load","moduleFactory","instance","componentInstance","catch","NgModuleFactoryLoader","Injector","CoreErrorHandlerService","appSettingsService","logError","source","processError","handleError","errorLogConsole","errorLogServer","errorModel","ErrorModel","stack","stackTrace","errorShowUser","ErrorHandler","DataSourceStore","DataSourceQuery","DataSourceService","dataSourceStore","dataSourceQuery","appAuditService","inflightRequests","Map","decorateInput","inputDetails","getDataSource","dataRequest","getKey","forceRefresh","currentCacheValue","expiresWhen","of","has","formData","FormData","append","JSON","stringify","fileNames","fileCount_1","file","logEntry","action","values","filterValues","inputData","set","Observable","observer","expiryNow","expiresSeconds","newResults","getTime","rowCount","jsonData","results","delete","complete","errorResults","seed","MenuStore","MenuQuery","folders$","selectAll","filterBy","type","QueryConfig","sortBy","sortByOrder","Order","ASC","RolesStore","RolesQuery","RolesService","rolesQuery","dataSourceService","rolesStore","authQuery","routeRoles","combineLatest","_a","_b","selectLoading","take","loading","downloadRoles","isInRole","role","currentUser","indexOf","isInRoles","roles","addRouteRoles","route","getRouteRoles","MenuService","menuStore","menuQuery","rolesService","masterListMenu","routes","menuItems","routeSubject","BehaviorSubject","httpInFlight","lockCount","menuDownloaded","isMobile","downloadMenuItems","addLock","setCurrent","setActive","removeLock","addMenuItemsFromCode","authorised","addMenuItems","getFolders","menuItem","parentMenu","existingMenus","parse","parent","find","menu","toLowerCase","foundIndex","items","findIndex","childMenu","splice","saveMenuItem","updateExistingMenuItem","existing","upsert","isArray","addMenuItemsToReferenceList","removeUnauthorisedMenuItems","user","userRoles","removingMenus","returnMenus","menuIndex","removingThis","checkingRoles","allowedRole","downloadedMenuItems","newMenuItems","findInTree","fetchedMenuItems","calculateRouterLinks","loopMenuItem","upsertMenuItemToExistingTree","addNewMenuItemToEntities","routerLink","addRoute","path","newMenuItem","targetMenu","calcRouterLink","split","createdMenuItem_1","ReferenceValuesStore","ReferenceValuesQuery","ReferenceValuesService","refValuesQuery","refValuesStore","requestsInFlight","group","getReferenceValue","reference","clearReferenceValue","clearNames","namesArray","loopName","list","this_1","startsWith","list_1","e_2","list_1_1","refValue","compositeKey","namesArray_1","namesArray_1_1","setReferenceValue","referenceValue","isExpired","refVal","cacheSeconds","nowDate","expires","whenStored","setSeconds","getSeconds","childDepth","cacheValue","downloadRefValue","parentRef","referenceValueItems","clone_1","wrapper","SpinnerService","broadcastService","showSpinner","hideSpinner","UserAuthenticationBase","UserAuthenticationService","authStore","router","tokenStorageKey","jwtHelper","JwtHelperService","loadUserTokenFromStorage","filterItemsByRole","authItems","returnItems","authItem","checkByRoles","isAllowed","authRole","completeAuthentication","token","getToken","decodeToken","isTokenExpired","authorizationHeaderValue","forceLogon","returnUrl","logoff","navigate","queryParams","savedToken","localStorage","getItem","setToken","tokenDetails","newUser","BasicUser","email","logon","userName","password","HttpParams","authClientId","authClientSecret","authScope","apiAuth","authTokenEndpoint","headers","HttpHeaders","response","requiredRole","authRequiredRole","includes","authSaveinLocalStorage","setItem","removeItem","resetStores","exclude","i6","Router","OAuthService","authOAuthSettings","manager","UserManager","access_token","signinRedirect","signoutRedirect","signinRedirectCallback","expired","token_type","profile","UserPreferencesStore","UserPreferencesQuery","UserPreferencesService","userPrefsStore","userPrefsQuery","appSettings","prefix","storageKey","valuesDownloaded","definitionsDownloaded","loadFromLocal","getDefinitions","getValues","clearValues","deleteValue","saveToLocal","prefValues","prefValue","existingEntity","newEntity","UserPreferenceValue","prefDefinitions","defns_1","definition","preferenceDefinitions","stored","serial","entities","WidgetStore","WidgetQuery","WidgetService","widgetStore","widgetQuery","downloadWidgetItems","widgetItems","UserService","getUsers","createUser","deleteUser","changePassword","changePasswordModel","setPassword","resetPassword","saveUser","VersionsService","logging","versions","addVersion","module","version","isAppModule","getVersions","getVersion","moduleName","foundModule","FillHeightDirective","el","footerElement","fixedHeight","relativeToParentPercent","ngAfterViewInit","calculateAndSetElementHeight","onResize","parentHeight","nativeElement","parentNode","offsetHeight","style","height","overflow","windowHeight","window","innerHeight","elementOffsetTop","getElementOffsetTop","footerElementMargin","marginBottom","getfooterElementMargin","getBoundingClientRect","top","footerStyle","getComputedStyle","parseInt","ɵɵdirectiveInject","ElementRef","selectors","hostBindings","rf","ctx","$event","ɵɵresolveWindow","ButtonColourPipe","transform","inputColor","returnColor","pure","dateFormat","dateFormatimp","NgsDatePipe","inputDate","String","userTimezoneOffset","getTimezoneOffset","zuluDate","format","NgsDateTimePipe","dateTimeFormat","TruncateTextPipe","limit","trail","words","Math","abs","slice","join","AuthoriseRoleGuard","authService","canActivate","url","DialogWindowComponent","closed","EventEmitter","ngOnChanges","changes","ngOnDestroy","ngOnInit","cancel","emit","save","outputs","features","ɵɵNgOnChangesFeature","decls","vars","template","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","VERSION","CoreModule","forRoot","ngModule","imports","CommonModule","FormsModule","HttpClientModule","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { AppSettingsValue, AppSettings } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface AppSettingsState extends EntityState<AppSettingsValue> {\r\n  isInitialised: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'appSettings', idKey: 'name' })\r\nexport class AppSettingsStore extends EntityStore<AppSettingsState, AppSettingsValue> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false });\r\n    console.log('AppSettingsStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { AppSettingsStore, AppSettingsState } from './appSettings.store';\r\nimport { AppSettingsValue } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppSettingsQuery extends QueryEntity<AppSettingsState, AppSettingsValue> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: AppSettingsStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\ninterface BroadcastEvent {\r\n  key: any;\r\n  data?: any;\r\n}\r\n\r\nexport const enum BroadcastTypes {\r\n  SHOW_MESSAGE = 'SHOW_MESSAGE',\r\n\r\n  SHOW_SPINNER = 'SHOW_SPINNER',\r\n  HIDE_SPINNER = 'HIDE_SPINNER',\r\n  CLOSE_POPUP = 'CLOSE_POPUP'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BroadcastService {\r\n  private _eventBus: Subject<BroadcastEvent>;\r\n\r\n  constructor() {\r\n    this._eventBus = new Subject<BroadcastEvent>();\r\n  }\r\n\r\n  broadcast(key: any, data?: any) {\r\n    this._eventBus.next({ key, data });\r\n  }\r\n\r\n  on<T>(key: any): Observable<T> {\r\n    return this._eventBus.pipe(\r\n        filter(event => event.key === key),\r\n        map(event => <T>event.data)\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BroadcastService, BroadcastTypes } from '../broadcast/broadcast.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationService {\r\n  constructor(private broadcast: BroadcastService) {}\r\n\r\n  showMessage(message: any) {\r\n    this.broadcast.broadcast(BroadcastTypes.SHOW_MESSAGE, message);\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store, StoreConfig } from '@datorama/akita';\r\nimport { createBasicUser, BasicUser } from '@ngscaffolding/models';\r\n\r\nexport interface AuthenticationState {\r\n  authenticated: boolean;\r\n  token: string;\r\n  refreshToken: string;\r\n  userDetails: BasicUser;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'authorisation' })\r\nexport class AuthenticationStore extends Store<AuthenticationState> {\r\n  constructor() {\r\n    super({ userDetails: createBasicUser() });\r\n    console.log('AuthenticationStore Constructor');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Query, toBoolean } from '@datorama/akita';\r\nimport { BasicUser } from '@ngscaffolding/models';\r\nimport { AuthenticationStore, AuthenticationState } from './userAuthentication.store';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserAuthenticationQuery extends Query<AuthenticationState> {\r\n    authenticated$ = this.select(state => state.authenticated);\r\n    currentUser$ = this.select(state => state.userDetails);\r\n\r\n    constructor(protected store: AuthenticationStore) {\r\n        super(store);\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return toBoolean(this.getValue().authenticated);\r\n    }\r\n\r\n    getUserId() {\r\n        if (this.isAuthenticated() && this.getValue().userDetails) {\r\n            return this.getValue().userDetails.userId;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getUser(): BasicUser {\r\n        return this.getValue().userDetails;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NotificationService } from '../notification/notification.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggingService {\r\n    constructor(private notification: NotificationService, private appSettingsQuery: AppSettingsQuery,\r\n      private userQuery: UserAuthenticationQuery,\r\n      private http: HttpClient) {}\r\n\r\n  public error(err: any, methodName = '', showToast = false): void {\r\n    if (!methodName) {\r\n      console.error(`Method ${methodName}: Error ${err}`);\r\n    } else {\r\n      console.error(`Error ${err}`);\r\n    }\r\n\r\n    // TODO: Resume showing toast\r\n    if (showToast) {\r\n      this.notification.showMessage({\r\n        severity: 'error',\r\n        summary: 'Error',\r\n        detail: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  public warning(message: string, methodName = ''): void {\r\n    if (!methodName) {\r\n      console.warn(`Method ${methodName}: Warning ${message}`);\r\n    } else {\r\n      console.warn(`Warning ${message}`);\r\n    }\r\n  }\r\n\r\n  public info(message: string, methodName = '', objectInfo: any = null): void {\r\n    if (!methodName) {\r\n      // tslint:disable-next-line:no-console\r\n      console.info(`Info : ${message}`, objectInfo);\r\n    } else {\r\n      // tslint:disable-next-line:no-console\r\n      console.info(`[${methodName}] : ${message}`, objectInfo);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { AppSettings, AppSettingsValue } from '@ngscaffolding/models';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsStore } from './appSettings.store';\r\nimport { AppSettingsQuery } from './appSettings.query';\r\nimport { Observable } from 'rxjs';\r\nimport { timeout, retry } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppSettingsService {\r\n  private className = 'AppSettingsService';\r\n\r\n  public loading$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private appSettingsStore: AppSettingsStore,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private logger: LoggingService,\r\n    private http: HttpClient\r\n  ) {\r\n    console.log('AppSettingsService Constructor');\r\n  }\r\n\r\n  public setValue(name: string, value: any) {\r\n    if (this.appSettingsQuery.hasEntity(name)) {\r\n      this.appSettingsStore.update(name, { name: name, value: value });\r\n    } else {\r\n      this.appSettingsStore.add({ name: name, value: value });\r\n    }\r\n\r\n    if (name === AppSettings.apiHome) {\r\n        this.loadFromServer(value.toString());\r\n    }\r\n  }\r\n\r\n  public getValue(name: string): any {\r\n    if (this.appSettingsQuery.hasEntity(name)) {\r\n      return this.appSettingsQuery.getEntity(name).value;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private loadFromServer(apiHome: string) {\r\n    // Mark store as loading\r\n    this.appSettingsStore.setLoading(true);\r\n\r\n    // Load values from Server\r\n    this.http\r\n        .get<Array<AppSettingsValue>>(`${apiHome}/api/v1/appSettings`)\r\n        .pipe(timeout(20000), retry(3))\r\n        .subscribe(\r\n      appValues => {\r\n        if (appValues) {\r\n          appValues.forEach(appValue => {\r\n            this.setValue(appValue.name, appValue.value);\r\n          });\r\n        }\r\n        this.appSettingsStore.setLoading(false);\r\n        this.appSettingsStore.update({ isInitialised: true });\r\n      },\r\n      err => {\r\n        this.appSettingsStore.setLoading(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  public setValues(settings: object) {\r\n    // Mark store as loading\r\n    this.appSettingsStore.setLoading(true);\r\n    this.appSettingsStore.update({ isInitialised: false });\r\n\r\n    // Load values\r\n    if (settings) {\r\n      Object.keys(settings).forEach(key => {\r\n        // Setting Value Here\r\n        this.logger.info(`[${this.className}.loadSettings] Setting Value ${key} = ${settings[key]}`);\r\n        this.setValue(key, settings[key]);\r\n      });\r\n    }\r\n\r\n    this.appSettingsStore.setLoading(false);\r\n    this.appSettingsStore.update({ isInitialised: true });\r\n  }\r\n\r\n  public getBoolean(name: string): Observable<boolean> {\r\n    return this.appSettingsQuery.selectEntity(name, entity => entity.value);\r\n  }\r\n\r\n  public getString(name: string): Observable<string> {\r\n    return this.appSettingsQuery.selectEntity(name, entity => entity.value);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { timeout, retry } from 'rxjs/operators';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport {\r\n  ApplicationLog,\r\n  AppSettings,\r\n  ZuluDateHelper,\r\n} from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AppAuditService {\r\n  constructor(\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private userQuery: UserAuthenticationQuery,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  public RecordLog(appLog: ApplicationLog): void {\r\n    let apiHome = this.appSettingsQuery.getEntity(AppSettings.apiHome).value;\r\n\r\n    if (!appLog.logDate) {\r\n      appLog.logDate = ZuluDateHelper.setGMTDate(new Date());\r\n    }\r\n\r\n    if (!appLog.userID) {\r\n      appLog.userID = this.userQuery.getUserId();\r\n    }\r\n    try {\r\n      // This post is a fire and forget. Don't have to authorise either\r\n      this.http\r\n        .post(`${apiHome}/api/v1/applicationLog`, appLog)\r\n        .pipe(timeout(30000), retry(3))\r\n        .subscribe(\r\n          (data) => {},\r\n          (err) => {\r\n            console.log('Unable to send AppLog, offline?');\r\n          }\r\n        );\r\n    } catch (err) {\r\n      console.log('Unable to send AppLog, offline?');\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { AuditLog } from '@ngscaffolding/models';\r\n\r\nexport interface AuditLogState extends EntityState<AuditLog> {}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'auditLog', idKey: 'id' })\r\nexport class AuditLogStore extends EntityStore<AuditLogState, AuditLog> {\r\n    constructor() {\r\n        super({});\r\n        console.log('AuditLogStore Constructor');\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { AuditLogState, AuditLogStore } from './auditLog.store';\r\nimport { AuditLog } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuditLogQuery extends QueryEntity<AuditLogState, AuditLog> {\r\n    allAuditLog = this.getAll();\r\n\r\n    constructor(protected store: AuditLogStore) {\r\n        super(store);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuditLog, AppSettings, ZuluDateHelper } from '@ngscaffolding/models';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { timeout, retry, finalize } from 'rxjs/operators';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { AuditLogStore } from './auditLog.store';\r\nimport { AuditLogQuery } from './auditLog.query';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuditLogService {\r\n    private polling = 30000;\r\n    private retryVal = 3;\r\n\r\n    private isSending = false;\r\n    private defaultLog: AuditLog = {};\r\n\r\n    constructor(\r\n        private auditLogStore: AuditLogStore,\r\n        private auditLogQuery: AuditLogQuery,\r\n        private appSettingsQuery: AppSettingsQuery,\r\n        private userQuery: UserAuthenticationQuery,\r\n        private http: HttpClient\r\n    ) {\r\n        appSettingsQuery\r\n            .selectEntity(AppSettings.mobileDefaultPolling)\r\n            .subscribe(val => (this.polling = val.value > 0 ? val.value : 30000));\r\n        appSettingsQuery\r\n            .selectEntity(AppSettings.mobileDefaultRetries)\r\n            .subscribe(val => (this.retryVal = val.value > 0 ? val.value : 3));\r\n        this.StartPolling();\r\n    }\r\n\r\n    public SetDefault(defaultLog: AuditLog) {\r\n        this.defaultLog = defaultLog;\r\n    }\r\n\r\n    public RecordLog(auditLog: AuditLog): void {\r\n        const workingLog = {...this.defaultLog, ...auditLog};\r\n        workingLog.id = uuid();\r\n        if (!workingLog.logDate) {\r\n            workingLog.logDate = ZuluDateHelper.setGMTDate(new Date());\r\n        }\r\n\r\n        if (!workingLog.userID) {\r\n            workingLog.userID = this.userQuery.getUserId();\r\n        }\r\n\r\n        this.auditLogStore.add(workingLog);\r\n        try {\r\n        } catch (err) {\r\n            console.log('Unable to send AppLog, offline?');\r\n        }\r\n    }\r\n\r\n    private StartPolling() {\r\n        setInterval(_ => {\r\n            if (!this.isSending) {\r\n                this.isSending = true;\r\n                this.SendLogEntries();\r\n            }\r\n        }, this.polling);\r\n    }\r\n\r\n    public SendLogEntries() {\r\n        const apiHome = this.appSettingsQuery.getEntity(AppSettings.apiHome).value;\r\n        const logEntries = this.auditLogQuery.getAll();\r\n\r\n        if (logEntries && logEntries.length > 0) {\r\n            const keys = logEntries.map(log => log.id);\r\n            // This post is a fire and forget. Don't have to authorise either\r\n            this.http\r\n                .post(`${apiHome}/api/v1/auditlog`, logEntries)\r\n                .pipe(\r\n                    timeout(30000),\r\n                    retry(3),\r\n                    finalize(() => {\r\n                        this.isSending = false;\r\n                    })\r\n                )\r\n                .subscribe(\r\n                    data => {\r\n                        this.auditLogStore.remove(keys);\r\n                        // keys.forEach(key => this.auditLogStore.remove(({ id }) => id === key));\r\n                    },\r\n                    err => {\r\n                        console.log('Unable to send AppLog, offline?');\r\n                    }\r\n                );\r\n        } else {\r\n            this.isSending = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable, NgModuleFactoryLoader, Injector } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentLoaderService {\r\n  private componentRegistry = {\r\n    'lazy-component': {\r\n      modulePath:\r\n        './lazy-components/lazy-components.module#LazyComponentsModule',\r\n      moduleRef: null\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    private loader: NgModuleFactoryLoader,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  registerComponent(name: string, modulePath: string = null) {\r\n    if (!this.componentRegistry[name]) {\r\n      this.componentRegistry[name] = {\r\n        modulePath: modulePath,\r\n        moduleRef: null\r\n      };\r\n    }\r\n  }\r\n\r\n  loadComponent(componentTag: string): Promise<HTMLElement> {\r\n    const cmpRegistryEntry = this.componentRegistry[componentTag];\r\n    if (!cmpRegistryEntry) {\r\n      throw new Error(\r\n        `Unrecognized component \"${componentTag}\". Make sure it is registered in the component registry`\r\n      );\r\n    }\r\n\r\n    if (cmpRegistryEntry.modulePath) {\r\n      // Provided a path so this is a lazy loaded component\r\n      if (cmpRegistryEntry.moduleRef) {\r\n        return new Promise(resolve => {\r\n          const componentInstance = document.createElement(componentTag);\r\n          resolve(componentInstance);\r\n        });\r\n      } else {\r\n        const path = cmpRegistryEntry.modulePath;\r\n\r\n        return new Promise((resolve, reject) => {\r\n          this.loader\r\n            .load(path)\r\n            .then(moduleFactory => {\r\n              const moduleRef = moduleFactory.create(this.injector).instance;\r\n              cmpRegistryEntry.moduleRef = moduleRef;\r\n\r\n              // instantiate the component\r\n              const componentInstance = document.createElement(componentTag);\r\n              resolve(componentInstance);\r\n            })\r\n            .catch(err => {\r\n              console.error('error loading module', err);\r\n              reject(err);\r\n            });\r\n        });\r\n      }\r\n    } else {\r\n      // No path so simple Angular Element already webpacked\r\n      return new Promise((resolve, reject) => {\r\n        const componentInstance = document.createElement(componentTag);\r\n        resolve(componentInstance);\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ErrorModel, AppSettings } from '@ngscaffolding/models';\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport { NotificationService } from '../notification/notification.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CoreErrorHandlerService extends ErrorHandler {\r\n  constructor(\r\n    private appSettingsService: AppSettingsService,\r\n    private http: HttpClient\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public logError(error, source: string = null) {}\r\n\r\n  private processError(error, source: string = null) {}\r\n\r\n  handleError(error, source: string = null) {\r\n    super.handleError(error);\r\n\r\n    if (this.appSettingsService.getValue(AppSettings.errorLogConsole)) {\r\n      console.error(error.message);\r\n    }\r\n    if (this.appSettingsService.getValue(AppSettings.errorLogServer)) {\r\n      const errorModel = new ErrorModel(error);\r\n\r\n      if (source) {\r\n        errorModel.source = source;\r\n      }\r\n\r\n      if (error.stack) {\r\n        errorModel.stackTrace = error.stack;\r\n      }\r\n\r\n      // Consume any errors here. Otherwise we will just get stuck\r\n      try {\r\n        // This post is a fire and forget. Don't have to authorise either\r\n        this.http.post(this.appSettingsService.getValue(AppSettings.apiHome) + '/api/v1/error', errorModel).subscribe(\r\n          data => {\r\n            // alert('ID: ' + data.id);\r\n          },\r\n          err => {\r\n            console.log('Unable to send Error to Server, offline?');\r\n          }\r\n        );\r\n      } catch (err) {\r\n        console.log('Unable to send Error to Server, offline?');\r\n      }\r\n    }\r\n    if (this.appSettingsService.getValue(AppSettings.errorShowUser)) {\r\n      // TODO: Show User Error\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { AppSettingsValue, AppSettings, DataResults } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface DataSourceState extends EntityState<DataResults> {\r\n  isInitialised: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'dataSource', idKey: 'key' })\r\nexport class DataSourceStore extends EntityStore<DataSourceState, DataResults> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false});\r\n    console.log('DataSourceStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { DataSourceState, DataSourceStore } from './dataSource.store';\r\nimport { DataResults } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSourceQuery extends QueryEntity<DataSourceState, DataResults> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: DataSourceStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Observable, forkJoin, throwError, of } from 'rxjs';\r\nimport { retry, timeout } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport {\r\n  DataSourceRequest,\r\n  DataResults,\r\n  AppSettings,\r\n  ApplicationLog,\r\n} from '@ngscaffolding/models';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { DataSourceStore } from './dataSource.store';\r\nimport { DataSourceQuery } from './dataSource.query';\r\nimport { AppAuditService } from '../appAudit/appAudit.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DataSourceService {\r\n  private className = 'DataSourceService';\r\n  private inflightRequests = new Map<string, Observable<DataResults>>();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dataSourceStore: DataSourceStore,\r\n    private dataSourceQuery: DataSourceQuery,\r\n    private appSettingsService: AppSettingsService,\r\n    private appAuditService: AppAuditService,\r\n    private logger: LoggingService\r\n  ) {}\r\n\r\n  decorateInput(inputDetails: object): object {\r\n    return null;\r\n  }\r\n\r\n  getDataSource(dataRequest: DataSourceRequest): Observable<DataResults> {\r\n    const key = this.getKey(dataRequest);\r\n\r\n    if (dataRequest.forceRefresh) {\r\n      this.dataSourceStore.remove(key);\r\n    }\r\n\r\n    const currentCacheValue = this.dataSourceQuery.getEntity(key);\r\n    if (currentCacheValue) {\r\n      if (currentCacheValue.expiresWhen > new Date()) {\r\n        // Return good cached value\r\n        return of(currentCacheValue);\r\n      } else {\r\n        // Expired - Bad cache\r\n        this.dataSourceStore.remove(key);\r\n      }\r\n    }\r\n\r\n    if (this.inflightRequests.has(key)) {\r\n      return this.inflightRequests.get(key);\r\n    }\r\n\r\n    // Make HTTP Request\r\n    const formData: FormData = new FormData();\r\n    formData.append('dataSourceRequest', JSON.stringify(dataRequest));\r\n\r\n    // Add Files if passed\r\n    if (dataRequest.fileNames) {\r\n      let fileCount = 0;\r\n      dataRequest.fileNames.forEach((file) => {\r\n        formData.append(`file-${fileCount++}`, file, file.name);\r\n      });\r\n    }\r\n\r\n    const logEntry: ApplicationLog = {\r\n      entity: 'DataSource Call',\r\n      action: key,\r\n      values: {\r\n        filterValues: dataRequest.filterValues,\r\n        inputData: dataRequest.inputData,\r\n      },\r\n    };\r\n\r\n    this.logger.info(\r\n      `Calling Datasource ${dataRequest.name}`,\r\n      null,\r\n      logEntry.values\r\n    );\r\n\r\n    this.inflightRequests.set(\r\n      key,\r\n      new Observable<DataResults>((observer) => {\r\n        this.http\r\n          .post<DataResults>(\r\n            `${this.appSettingsService.getValue(\r\n              AppSettings.apiHome\r\n            )}/api/v1/datasource`,\r\n            formData\r\n          )\r\n          .pipe(timeout(20000), retry(3))\r\n          .subscribe(\r\n            (values) => {\r\n              const expiryNow = new Date();\r\n\r\n              // If expires Seconds not provided set long expiry\r\n              const expiresSeconds =\r\n                values.expiresSeconds > 0 ? values.expiresSeconds : 99999999;\r\n              const expiresWhen = new Date(\r\n                expiryNow.getTime() + expiresSeconds * 10000\r\n              );\r\n              const newResults: DataResults = {\r\n                expiresWhen: expiresWhen,\r\n                rowCount: values.rowCount,\r\n                jsonData: values.jsonData,\r\n                results: values.results,\r\n              };\r\n\r\n              // Log Datasource Success\r\n              this.appAuditService.RecordLog({\r\n                ...logEntry,\r\n                result: 'Success',\r\n              });\r\n\r\n              // Update the Store to tell the world we have data\r\n              this.dataSourceStore.update(key, newResults);\r\n              this.inflightRequests.delete(key);\r\n              observer.next(newResults);\r\n              observer.complete();\r\n            },\r\n            (err) => {\r\n              // Update the Store to tell the world we failed in every way. Shame.\r\n              const errorResults: DataResults = {\r\n                expiresWhen: new Date(),\r\n                error: err.message,\r\n              };\r\n\r\n              // Log Datasource Success\r\n              this.appAuditService.RecordLog({\r\n                ...logEntry,\r\n                result: err.message,\r\n              });\r\n\r\n              this.dataSourceStore.update(key, errorResults);\r\n              this.inflightRequests.delete(key);\r\n\r\n              this.logger.error(err, 'DataSource.Service.getDataSource', false);\r\n              observer.error(err);\r\n            }\r\n          );\r\n      })\r\n    );\r\n\r\n    return this.inflightRequests.get(key);\r\n  }\r\n\r\n  private getKey(dataRequest: DataSourceRequest) {\r\n    return `name:${dataRequest.name} seed:${\r\n      dataRequest.seed\r\n    } inputData:${JSON.stringify(dataRequest.inputData)} `;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { CoreMenuItem } from '@ngscaffolding/models';\r\n\r\nexport interface MenuState extends EntityState<CoreMenuItem> {\r\n  menuItems: CoreMenuItem[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'menu', idKey: 'name' })\r\nexport class MenuStore extends EntityStore<MenuState, CoreMenuItem> {\r\n\r\n  constructor() {\r\n    super();\r\n    console.log('MenuStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity, QueryConfig, Order } from '@datorama/akita';\r\nimport { CoreMenuItem, MenuTypes } from '@ngscaffolding/models';\r\nimport { MenuStore, MenuState } from './menu.store';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n@QueryConfig({\r\n    sortBy: 'order',\r\n    sortByOrder: Order.ASC // Order.DESC\r\n})\r\nexport class MenuQuery extends QueryEntity<MenuState, CoreMenuItem> {\r\n    public folders$: Observable<CoreMenuItem[]>;\r\n\r\n    constructor(protected store: MenuStore) {\r\n        super(store);\r\n        this.folders$ = this.selectAll({\r\n            filterBy: [entity => entity.type === MenuTypes.Folder]\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { Role } from '@ngscaffolding/models';\r\n\r\nexport interface RoleState extends EntityState<Role> {}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'role', idKey: 'name' })\r\nexport class RolesStore extends EntityStore<RoleState, Role> {\r\n\r\n  constructor() {\r\n    super();\r\n    console.log('RoleStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { Role } from '@ngscaffolding/models';\r\nimport { RoleState, RolesStore } from './roles.store';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RolesQuery extends QueryEntity<RoleState, Role> {\r\n  constructor(protected store: RolesStore) {\r\n    super(store);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { RolesQuery } from './roles.query';\r\nimport { RolesStore } from './roles.store';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { combineLatest } from 'rxjs';\r\nimport { AppSettings, SystemDataSourceNames } from '@ngscaffolding/models';\r\nimport { take, finalize } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DataSourceService } from '../dataSource/dataSource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RolesService {\r\n  private routeRoles = new Map<string, string[]>();\r\n  private apiHome: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private rolesQuery: RolesQuery,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private dataSourceService: DataSourceService,\r\n    private rolesStore: RolesStore,\r\n    public authQuery: UserAuthenticationQuery\r\n  ) {\r\n    // First Time load away\r\n    this.rolesStore.setLoading(false);\r\n\r\n    // Wait for settings, then load from server\r\n    combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)).subscribe(([authenticated, apiHome]) => {\r\n      if (authenticated && apiHome) {\r\n        this.apiHome = apiHome.value;\r\n        this.rolesQuery\r\n          .selectLoading()\r\n          .pipe(take(1))\r\n          .subscribe(loading => {\r\n            if (!loading) {\r\n              this.downloadRoles();\r\n            }\r\n          });\r\n      } else if (!authenticated) {\r\n        this.rolesStore.remove();\r\n      }\r\n    });\r\n  }\r\n\r\n  public downloadRoles() {\r\n    // Mark loading status\r\n    this.rolesStore.setLoading(true);\r\n\r\n    this.dataSourceService\r\n      .getDataSource({ name: SystemDataSourceNames.ROLES_SELECT })\r\n      .pipe(\r\n        finalize(() => {\r\n          this.rolesStore.setLoading(false);\r\n        })\r\n      )\r\n      .subscribe(results => {\r\n        if (results && !results.error) {\r\n          this.rolesStore.add(results.jsonData);\r\n          this.rolesStore.setLoading(false);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Checks if the current user is in this role.\r\n  public isInRole(role: string): boolean {\r\n    const currentUser = this.authQuery.getValue().userDetails;\r\n    if (currentUser && currentUser.role) {\r\n      return currentUser.role.indexOf(role) > -1;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Checks if the current user is in one of these roles.\r\n  public isInRoles(roles: string[]): boolean {\r\n    let result = false;\r\n    const currentUser = this.authQuery.getValue().userDetails;\r\n    if (currentUser && currentUser.role) {\r\n      roles.forEach(role => {\r\n        if (currentUser.role.indexOf(role) > -1) {\r\n          result = true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Repository of Roles: Routes\r\n  public addRouteRoles(route: string, roles: string[]) {\r\n    this.routeRoles.set(route, roles);\r\n  }\r\n\r\n  public getRouteRoles(route: string): string[] {\r\n    return this.routeRoles.get(route);\r\n  }\r\n}\r\n","import { RolesService } from '../rolesService/roles.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Route } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { timeout, finalize } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { CoreMenuItem, AppSettings, MenuTypes } from '@ngscaffolding/models';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { MenuStore } from './menu.store';\r\nimport { MenuQuery } from './menu.query';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n    private readonly methodName = 'MenuService';\r\n    private masterListMenu: Array<CoreMenuItem> = [];\r\n    private routes: Array<Route> = [];\r\n\r\n    private menuItems: CoreMenuItem[] = [];\r\n\r\n    private apiHome: string;\r\n\r\n    public routeSubject = new BehaviorSubject<Array<Route>>(this.routes);\r\n\r\n    private httpInFlight = false;\r\n    private lockCount = 0;\r\n    private menuDownloaded = false;\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private menuStore: MenuStore,\r\n        private menuQuery: MenuQuery,\r\n        private appSettingsQuery: AppSettingsQuery,\r\n        private authQuery: UserAuthenticationQuery,\r\n        private log: LoggingService,\r\n        public rolesService: RolesService\r\n    ) {\r\n        // Wait for settings, then load from server\r\n        combineLatest([\r\n            this.authQuery.authenticated$,\r\n            this.appSettingsQuery.selectEntity(AppSettings.apiHome),\r\n            this.appSettingsQuery.selectEntity(AppSettings.isMobile)\r\n        ]).subscribe(([authenticated, apiHome, isMobile]) => {\r\n            if (authenticated && apiHome && isMobile && !this.menuDownloaded) {\r\n                this.apiHome = apiHome.value;\r\n                if (!this.httpInFlight) {\r\n                    this.downloadMenuItems(isMobile.value || false);\r\n                }\r\n            } else if (!authenticated) {\r\n                this.menuDownloaded = false;\r\n                this.lockCount = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private addLock() {\r\n        this.lockCount++;\r\n        this.log.info(`MENU Service: Locks on Loading`, this.methodName, this.lockCount);\r\n        this.menuStore.setLoading(true);\r\n    }\r\n\r\n    public setCurrent(name: string) {\r\n        this.menuStore.setActive(name);\r\n    }\r\n\r\n    private removeLock() {\r\n        this.lockCount--;\r\n        this.log.info(`MENU Service: Locks on Loading`, this.methodName, this.lockCount);\r\n\r\n        if (this.lockCount === 0) {\r\n            this.menuStore.setLoading(false);\r\n        }\r\n    }\r\n\r\n    public addMenuItemsFromCode(menuItems: CoreMenuItem[], roles: string[] = null) {\r\n        this.addLock();\r\n        this.log.info('Adding MenuItems menuItems', this.methodName, menuItems);\r\n\r\n        // Wait till user authorised\r\n        this.authQuery.authenticated$.subscribe(authorised => {\r\n            if (authorised) {\r\n                // Save for later use\r\n                this.addMenuItems(menuItems);\r\n                this.removeLock();\r\n            }\r\n        });\r\n    }\r\n\r\n    public getFolders(): CoreMenuItem[] {\r\n        return this.menuQuery.getAll({\r\n            filterBy: [entity => entity.type === MenuTypes.Folder]\r\n        });\r\n    }\r\n\r\n    public delete(menuItem: CoreMenuItem): Observable<any> {\r\n        return new Observable<any>(observer => {\r\n            const obs = this.http.delete(`${this.apiHome}/api/v1/menuitems/${menuItem.name}`);\r\n            obs.subscribe(\r\n                () => {\r\n                    // Remove from our store\r\n                    this.menuStore.remove(menuItem.name);\r\n\r\n                    // Remove from Tree\r\n                    const existingMenus = JSON.parse(JSON.stringify(this.menuQuery.getValue())).menuItems;\r\n                    let parentMenu: CoreMenuItem;\r\n                    if (menuItem.parent) {\r\n                        parentMenu = existingMenus.find(menu => menu.name && menu.name.toLowerCase() === menuItem.parent.toLowerCase());\r\n                    }\r\n\r\n                    const foundIndex = (parentMenu.items as CoreMenuItem[]).findIndex(\r\n                        childMenu => childMenu.name && childMenu.name === menuItem.name\r\n                    );\r\n                    parentMenu.items.splice(foundIndex, 1);\r\n\r\n                    // Update tree and tell the world\r\n                    this.menuStore.update({ menuItems: existingMenus });\r\n                    observer.next();\r\n                    observer.complete();\r\n                },\r\n                err => {\r\n                    observer.error(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    public saveMenuItem(menuItem: CoreMenuItem): Observable<any> {\r\n        return this.http.post<CoreMenuItem>(this.apiHome + '/api/v1/menuitems', menuItem);\r\n    }\r\n\r\n    public updateExistingMenuItem(menuItem: CoreMenuItem) {\r\n        // Is this existing?\r\n        const existing = this.menuQuery.hasEntity(menuItem.name);\r\n        if (existing) {\r\n            this.menuStore.upsert(menuItem.name, menuItem);\r\n        } else {\r\n            // Add to reference list of menus\r\n            this.menuStore.add(menuItem);\r\n        }\r\n\r\n        const existingMenus = JSON.parse(JSON.stringify(this.menuQuery.getAll()));\r\n        let parentMenu: CoreMenuItem;\r\n        if (menuItem.parent) {\r\n            parentMenu = existingMenus.find(menu => menu.name.toLowerCase() === menuItem.parent.toLowerCase());\r\n        }\r\n        // Add to treeview for menu rendering\r\n        if (!parentMenu.items || !Array.isArray(parentMenu.items)) {\r\n            parentMenu.items = [];\r\n        }\r\n        if (existing) {\r\n            const foundIndex = (parentMenu.items as CoreMenuItem[]).findIndex(childMenu => childMenu.name === menuItem.name);\r\n            parentMenu.items[foundIndex] = menuItem;\r\n        } else {\r\n            (parentMenu.items as CoreMenuItem[]).push(menuItem);\r\n        }\r\n\r\n        // Update tree and tell the world\r\n        this.menuStore.update({ menuItems: existingMenus });\r\n    }\r\n\r\n    // Iterative Call\r\n    private addMenuItemsToReferenceList(menuItems: CoreMenuItem[]): void {\r\n        menuItems.forEach(menuItem => {\r\n            // Add to Entity Store\r\n            this.menuStore.upsert(menuItem.name, menuItem);\r\n            if (menuItem.items && Array.isArray(menuItem.items)) {\r\n                this.addMenuItemsToReferenceList(menuItem.items as Array<CoreMenuItem>);\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeUnauthorisedMenuItems(menuItems: CoreMenuItem[]): CoreMenuItem[] {\r\n        const user = this.authQuery.getValue();\r\n        let userRoles: string[] = [];\r\n        if (user && user.userDetails) {\r\n            userRoles = user.userDetails.role;\r\n        }\r\n\r\n        const removingMenus: string[] = [];\r\n        let returnMenus: CoreMenuItem[] = JSON.parse(JSON.stringify(menuItems));\r\n\r\n        for (let menuIndex = 0; menuIndex < returnMenus.length; menuIndex++) {\r\n            const menuItem = returnMenus[menuIndex];\r\n\r\n            let removingThis = false;\r\n\r\n            // makes sure roles is array\r\n            let checkingRoles = [];\r\n\r\n            if (!menuItem.roles) {\r\n                checkingRoles = [];\r\n            } else if (Array.isArray(menuItem.roles)) {\r\n                checkingRoles = [...menuItem.roles];\r\n            } else {\r\n                checkingRoles = [menuItem.roles];\r\n            }\r\n\r\n            // Is this role protected\r\n            if (checkingRoles && checkingRoles.length > 0) {\r\n                if (userRoles && checkingRoles.filter(allowedRole => userRoles.indexOf(allowedRole) !== -1).length === 0) {\r\n                    // No Authority. Remove\r\n                    removingThis = true;\r\n                    removingMenus.push(menuItem.name);\r\n                }\r\n            }\r\n\r\n            if (!removingThis && menuItem.items) {\r\n                menuItem.items = this.removeUnauthorisedMenuItems(menuItem.items as CoreMenuItem[]);\r\n            }\r\n        }\r\n\r\n        if (removingMenus.length > 0) {\r\n            returnMenus = menuItems.filter(menu => removingMenus.findIndex(remove => remove === menu.name) === -1);\r\n        }\r\n\r\n        return returnMenus;\r\n    }\r\n\r\n    public downloadMenuItems(isMobile: boolean) {\r\n        // Mark loading status\r\n        this.addLock();\r\n        this.httpInFlight = true;\r\n\r\n        const newMenuItems: CoreMenuItem[] = [];\r\n\r\n        this.http\r\n            .get<Array<CoreMenuItem>>(`${this.apiHome}/api/v1/menuitems?mobile=${isMobile}`)\r\n            .pipe(\r\n                timeout(60000),\r\n                finalize(() => {\r\n                    this.httpInFlight = false;\r\n                    this.removeLock();\r\n                })\r\n            )\r\n            .subscribe(\r\n                downloadedMenuItems => {\r\n                    this.log.info(`Downloaded MenuItems`);\r\n                    this.menuDownloaded = true;\r\n\r\n                    this.addMenuItems(downloadedMenuItems);\r\n                },\r\n                err => {\r\n                    this.log.error('Failed to download Menu');\r\n                }\r\n            );\r\n    }\r\n\r\n    public addMenuItems(newMenuItems: CoreMenuItem[], findInTree = false) {\r\n        // Clone so we can amend\r\n        const fetchedMenuItems = this.menuQuery.getValue().menuItems || [];\r\n        this.menuItems = JSON.parse(JSON.stringify(fetchedMenuItems));\r\n\r\n        this.calculateRouterLinks(newMenuItems);\r\n\r\n        // Add to flat reference List\r\n        this.addMenuItemsToReferenceList(newMenuItems);\r\n        if (findInTree) {\r\n            newMenuItems.forEach(loopMenuItem => {\r\n                this.upsertMenuItemToExistingTree(loopMenuItem);\r\n            });\r\n        } else {\r\n        newMenuItems.forEach(loopMenuItem => {\r\n            this.addNewMenuItemToEntities(this.menuItems, loopMenuItem);\r\n        });\r\n        }\r\n\r\n        // Remove the unatuhorised\r\n        this.menuItems = this.removeUnauthorisedMenuItems(this.menuItems);\r\n\r\n        this.menuStore.update({ menuItems: this.menuItems });\r\n    }\r\n\r\n    private calculateRouterLinks(menuItems: CoreMenuItem[]) {\r\n        if (menuItems) {\r\n            menuItems.forEach(menuItem => {\r\n                if (!menuItem.routerLink) {\r\n                    // Need to create our routerLink\r\n                    switch (menuItem.type) {\r\n                        case MenuTypes.Dashboard: {\r\n                            menuItem.routerLink = `dashboard/${menuItem.name}`;\r\n                            break;\r\n                        }\r\n                        case MenuTypes.Datagrid: {\r\n                            menuItem.routerLink = `datagrid/${menuItem.name}`;\r\n                            break;\r\n                        }\r\n                        case MenuTypes.Folder: {\r\n                            // No router link here\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            menuItem.routerLink = menuItem.name;\r\n                        }\r\n                    }\r\n                }\r\n                if (menuItem.items) {\r\n                    this.calculateRouterLinks(menuItem.items as CoreMenuItem[]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public addRoute(route: Route, roles: string[] = null) {\r\n        this.log.info(`Adding Route ${JSON.stringify(route)}`);\r\n        this.routes.push(route);\r\n\r\n        if (roles !== null) {\r\n            this.rolesService.addRouteRoles(route.path, roles);\r\n        }\r\n    }\r\n\r\n    private upsertMenuItemToExistingTree(newMenuItem: CoreMenuItem) {\r\n        const menuItems = [...this.menuItems];\r\n        if (!newMenuItem.parent || newMenuItem.parent === '') {\r\n            // Root menu item\r\n            let existing = menuItems.find(menu => menu.name === newMenuItem.name);\r\n            if (existing) {\r\n                existing = { ...newMenuItem };\r\n            } else {\r\n                menuItems.push({ ...newMenuItem });\r\n            }\r\n        } else {\r\n            // Submenu item\r\n            const parent = menuItems.find(menu => menu.name === newMenuItem.parent);\r\n            if (parent) {\r\n                let existing = (parent.items as CoreMenuItem[]).find(menu => menu.name === newMenuItem.name);\r\n                if (existing) {\r\n                    existing = { ...newMenuItem };\r\n                } else {\r\n                    (parent.items as CoreMenuItem[]).push({ ...newMenuItem });\r\n                }\r\n            }\r\n        }\r\n        this.menuItems = menuItems;\r\n    }\r\n\r\n    private addNewMenuItemToEntities(targetMenu: CoreMenuItem[], newMenuItem: CoreMenuItem) {\r\n        let calcRouterLink: string | string[];\r\n\r\n        // Don't add if we already know about this\r\n        if (targetMenu && !targetMenu.find(menu => menu.name === newMenuItem.name)) {\r\n            // Router bits\r\n            if (newMenuItem.routerLink && (<string>newMenuItem.routerLink).indexOf(',') > -1) {\r\n                calcRouterLink = (<string>newMenuItem.routerLink).split(',');\r\n            } else {\r\n                calcRouterLink = newMenuItem.routerLink;\r\n            }\r\n\r\n            const createdMenuItem: CoreMenuItem = { ...newMenuItem, routerLink: calcRouterLink };\r\n\r\n            targetMenu.push(createdMenuItem);\r\n\r\n            if (newMenuItem.items && newMenuItem.items.length > 0) {\r\n                createdMenuItem.items = [];\r\n                const castItems = newMenuItem.items as CoreMenuItem[];\r\n                castItems.forEach(menuItem => {\r\n                    this.addNewMenuItemToEntities(createdMenuItem.items as CoreMenuItem[], menuItem);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { ReferenceValue } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface ReferenceValuesState extends EntityState<ReferenceValue> {\r\n  isInitialised: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'referenceValues', idKey: 'compositeKey' })\r\nexport class ReferenceValuesStore extends EntityStore<ReferenceValuesState, ReferenceValue> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false });\r\n    console.log('ReferenceValuesStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { ReferenceValuesStore, ReferenceValuesState } from './referenceValues.store';\r\nimport { ReferenceValue } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReferenceValuesQuery extends QueryEntity<ReferenceValuesState, ReferenceValue> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: ReferenceValuesStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport { ReferenceValue, AppSettings } from '@ngscaffolding/models';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { ReferenceValuesQuery } from './referenceValues.query';\r\nimport { ReferenceValuesStore } from './referenceValues.store';\r\nimport { isArray } from 'util';\r\nimport { timeout, retry } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ReferenceValuesService {\r\n    private className = 'ReferenceValuesService';\r\n\r\n    private requestsInFlight = new Map<string, Observable<ReferenceValue>>();\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private appSettingsService: AppSettingsService,\r\n        private refValuesQuery: ReferenceValuesQuery,\r\n        private refValuesStore: ReferenceValuesStore,\r\n        private logger: LoggingService\r\n    ) {}\r\n\r\n    //\r\n    // Get a single string value from References\r\n    //\r\n    getValue(name: string, group: string): Observable<string> {\r\n        return new Observable<string>(observer => {\r\n            this.getReferenceValue(name, group).subscribe(reference => {\r\n                if (reference) {\r\n                    observer.next(reference.value);\r\n                } else {\r\n                    observer.next(null);\r\n                }\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    // Clear all Reference values with this name as root of key\r\n    clearReferenceValue(clearNames: string | Array<string>) {\r\n        let namesArray: Array<string>;\r\n        if (Array.isArray(clearNames)) {\r\n            namesArray = clearNames;\r\n        } else {\r\n            namesArray = [clearNames];\r\n        }\r\n\r\n        for (const loopName of namesArray) {\r\n            const list = this.refValuesQuery.getAll({ filterBy: entity => entity.name.startsWith(loopName) });\r\n\r\n        for (const refValue of list) {\r\n                this.refValuesStore.remove(refValue.compositeKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    setReferenceValue(referenceValue: ReferenceValue) {\r\n        referenceValue.compositeKey = this.getKey(referenceValue.name, '');\r\n        this.refValuesStore.upsert(this.getKey(referenceValue.name, ''), referenceValue);\r\n    }\r\n\r\n    private isExpired(refVal: ReferenceValue): boolean {\r\n        const cacheSeconds = refVal.cacheSeconds || 31556952; // Default to a year\r\n        const nowDate = new Date();\r\n        const expires = new Date(refVal.whenStored);\r\n\r\n        expires.setSeconds(expires.getSeconds() + cacheSeconds);\r\n        return nowDate > expires;\r\n    }\r\n\r\n    //\r\n    // Get a complex ReferenceValue (May include multiple values)\r\n    //\r\n    getReferenceValue(name: string, seed = '', childDepth = 0): Observable<ReferenceValue> {\r\n        if (this.refValuesQuery.hasEntity(this.getKey(name, seed))) {\r\n            const cacheValue = this.refValuesQuery.getEntity(this.getKey(name, seed));\r\n            if (this.isExpired(cacheValue)) {\r\n                // Expired cache value. Go get a new one\r\n                return this.downloadRefValue(name, seed);\r\n            }\r\n\r\n            // If we get one from Cache, thats handy to use\r\n            this.logger.info(`Reference Values From Cache ${name}::${seed}`);\r\n            return new Observable<ReferenceValue>(observer => {\r\n                observer.next(this.refValuesQuery.getEntity(this.getKey(name, seed)));\r\n                observer.complete();\r\n            });\r\n        } else if (childDepth > 0) {\r\n            const refValue = this.refValuesQuery.getEntity(this.getKey(name, ''));\r\n            if (refValue) {\r\n                const parentRef = refValue.referenceValueItems.find(parent => parent.value === seed);\r\n                if (parentRef) {\r\n                    const clone = { ...refValue };\r\n                    clone.referenceValueItems = parentRef.referenceValueItems;\r\n\r\n                    return new Observable<ReferenceValue>(observer => {\r\n                        observer.next(clone);\r\n                        observer.complete();\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            return this.downloadRefValue(name, seed);\r\n        }\r\n    }\r\n\r\n    private downloadRefValue(name: string, seed: string): Observable<ReferenceValue> {\r\n        // Nothing in the Cache\r\n        if (this.requestsInFlight.has(this.getKey(name, seed))) {\r\n            // We have already asked for this, return our existing Observable\r\n            return this.requestsInFlight.get(this.getKey(name, seed));\r\n        } else {\r\n            const wrapper = new Observable<ReferenceValue>(observer => {\r\n                // Call HTTP Here\r\n                this.logger.info(`Reference Values From HTTP ${name}::${seed}`);\r\n                const httpRequest = this.http\r\n                    .get<ReferenceValue>(\r\n                        `${this.appSettingsService.getValue(AppSettings.apiHome)}/api/v1/referencevalues?name=${name}&seed=${seed}`\r\n                    )\r\n                    .pipe(timeout(20000), retry(3));\r\n                httpRequest.subscribe(\r\n                        value => {\r\n                            value.compositeKey = this.getKey(name, seed);\r\n                            value.whenStored = new Date();\r\n\r\n                            this.refValuesStore.upsert(this.getKey(name, seed), value);\r\n                            this.requestsInFlight.delete(this.getKey(name, seed));\r\n\r\n                            observer.next(value);\r\n                            observer.complete();\r\n                        },\r\n                        err => {\r\n                            // Error here. If we have a valid value, respond with that\r\n                            if (this.refValuesQuery.hasEntity(this.getKey(name, seed))) {\r\n                                this.logger.info(`Reference Values From HTTP Failed using last Cache ${name}::${seed}`);\r\n                                observer.next(this.refValuesQuery.getEntity(this.getKey(name, seed)));\r\n                                observer.complete();\r\n                            } else {\r\n                                observer.error(err);\r\n                            }\r\n                        }\r\n                    );\r\n            });\r\n\r\n            this.requestsInFlight.set(this.getKey(name, seed), wrapper);\r\n            return wrapper;\r\n        }\r\n    }\r\n\r\n    private getKey(name: string, seed: string): string {\r\n        return `${name}::${seed}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  BroadcastService,\r\n  BroadcastTypes\r\n} from '../broadcast/broadcast.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SpinnerService {\r\n  constructor(private broadcastService: BroadcastService) {}\r\n\r\n  public showSpinner(message: string = null) {\r\n    this.broadcastService.broadcast(BroadcastTypes.SHOW_SPINNER, message);\r\n  }\r\n\r\n  public hideSpinner() {\r\n    this.broadcastService.broadcast(BroadcastTypes.HIDE_SPINNER);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseEntity } from '@ngscaffolding/models';\r\n\r\n@Injectable()\r\nexport abstract class UserAuthenticationBase {\r\n    abstract getToken(): string;\r\n    abstract forceLogon(returnUrl: string);\r\n    abstract logon(userName: string, password: string);\r\n    abstract logoff();\r\n\r\n    abstract async completeAuthentication();\r\n    abstract isAuthenticated(): boolean;\r\n    abstract authorizationHeaderValue();\r\n    abstract name(): string;\r\n\r\n    abstract filterItemsByRole(authItems: BaseEntity[]): BaseEntity[];\r\n\r\n    abstract checkByRoles(authItem: BaseEntity): boolean;\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { timeout } from 'rxjs/operators';\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport { LoggingService } from '../logging/logging.service';\r\n\r\nimport { BasicUser, AppSettings, BaseEntity } from '@ngscaffolding/models';\r\n\r\nimport { AuthenticationStore } from './userAuthentication.store';\r\n\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { UserAuthenticationBase } from './UserAuthenticationBase';\r\nimport { resetStores } from '@datorama/akita';\r\nimport { UserAuthenticationQuery } from './userAuthentication.query';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserAuthenticationService implements UserAuthenticationBase {\r\n    private readonly tokenStorageKey = 'USER_TOKEN';\r\n\r\n    private jwtHelper: JwtHelperService;\r\n\r\n    constructor(\r\n        private logger: LoggingService,\r\n        private http: HttpClient,\r\n        private authStore: AuthenticationStore,\r\n        private authQuery: UserAuthenticationQuery,\r\n        private appSettingsService: AppSettingsService,\r\n        private router: Router\r\n    ) {\r\n        logger.info('UserAuthorisationService - Constructor');\r\n        this.jwtHelper = new JwtHelperService({});\r\n        this.loadUserTokenFromStorage();\r\n    }\r\n\r\n    filterItemsByRole(authItems: BaseEntity[]): Array<BaseEntity> {\r\n        const returnItems: BaseEntity[] = [];\r\n\r\n        if (authItems) {\r\n            authItems.forEach(authItem => {\r\n                if (this.checkByRoles(authItem)) {\r\n                    returnItems.push(authItem);\r\n                }\r\n            });\r\n        }\r\n\r\n        return returnItems;\r\n    }\r\n\r\n    // Check if user passes muster\r\n    checkByRoles(authItem: BaseEntity): boolean {\r\n        // No roles = always okay\r\n        if (!authItem.roles) {\r\n            return true;\r\n        }\r\n\r\n        let isAllowed = false;\r\n        const user = this.authQuery.getUser();\r\n\r\n        if (user.role) {\r\n            user.role.forEach(role => {\r\n                authItem.roles.forEach(authRole => {\r\n                    if (role === authRole) {\r\n                        isAllowed = true;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return isAllowed;\r\n    }\r\n\r\n    completeAuthentication() {}\r\n    isAuthenticated(): boolean {\r\n        const token = this.getToken();\r\n        const tokenDetails = this.jwtHelper.decodeToken(token);\r\n\r\n        return tokenDetails && !this.jwtHelper.isTokenExpired(token);\r\n    }\r\n    authorizationHeaderValue() {}\r\n    name(): string {\r\n        return 'Hello World';\r\n    }\r\n\r\n    forceLogon(returnUrl: string) {\r\n        this.logoff();\r\n        this.router.navigate(['login'], { queryParams: { returnUrl: returnUrl } });\r\n    }\r\n\r\n    getToken(): string {\r\n        return this.authQuery.getValue().token;\r\n    }\r\n\r\n    private loadUserTokenFromStorage() {\r\n        const savedToken = localStorage.getItem(this.tokenStorageKey); // Loaded from Saved Storage\r\n        if (savedToken !== null) {\r\n            // New AuthUser Based on Token\r\n            if (!this.jwtHelper.isTokenExpired(savedToken)) {\r\n                // If all Good\r\n                this.logger.info('Token from Storage - Token Loaded and not Expired');\r\n                this.setToken(savedToken);\r\n            } else {\r\n                // Expired Token\r\n                this.logger.info('Token from Storage - Token Expired - Not using');\r\n            }\r\n        } else {\r\n            // No token\r\n            this.logger.info('Token from Storage - No Token Available');\r\n        }\r\n    }\r\n\r\n    private setToken(token: any) {\r\n        // New AuthUser Based on Token\r\n        const tokenDetails = this.jwtHelper.decodeToken(token);\r\n\r\n        const newUser = new BasicUser();\r\n\r\n        if (tokenDetails['firstName'] && tokenDetails['lastName']) {\r\n            newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];\r\n        }\r\n\r\n        if (tokenDetails['sub']) {\r\n            newUser.userId = tokenDetails['sub'];\r\n        }\r\n\r\n        if (tokenDetails['role']) {\r\n            newUser.role = tokenDetails['role'];\r\n        }\r\n\r\n        if (tokenDetails['email']) {\r\n            newUser.email = tokenDetails['email'];\r\n        }\r\n\r\n        this.authStore.update({ token: token, userDetails: newUser, authenticated: true });\r\n    }\r\n\r\n    public logon(userName: string, password: string): Observable<null> {\r\n        return new Observable<null>(observer => {\r\n            let body = new HttpParams();\r\n            body = body\r\n                .append('username', userName)\r\n                .append('password', password)\r\n                .append('grant_type', 'password')\r\n                .append('client_id', this.appSettingsService.getValue(AppSettings.authClientId))\r\n                .append('client_secret', this.appSettingsService.getValue(AppSettings.authClientSecret))\r\n                .append('scope', this.appSettingsService.getValue(AppSettings.authScope) + ' offline_access openid');\r\n\r\n            this.http\r\n                .post(\r\n                    this.appSettingsService.getValue(AppSettings.apiAuth) + this.appSettingsService.getValue(AppSettings.authTokenEndpoint),\r\n                    body,\r\n                    {\r\n                        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n                    }\r\n                )\r\n                .pipe(timeout(30000))\r\n                .subscribe(\r\n                    response => {\r\n                        // chek if user is is in 'user' role\r\n                        const tokenDetails = this.jwtHelper.decodeToken(response['access_token']);\r\n                        const requiredRole = this.appSettingsService.getValue(AppSettings.authRequiredRole);\r\n                        if (tokenDetails['role']) {\r\n                            if (requiredRole && !tokenDetails['role'].includes(requiredRole)) {\r\n                                observer.error('Unauthorised');\r\n                            } else {\r\n                        // Save Token in Storage if needed\r\n                        if (this.appSettingsService.getValue(AppSettings.authSaveinLocalStorage)) {\r\n                            localStorage.setItem(this.tokenStorageKey, response['access_token']);\r\n                        }\r\n\r\n                        // Load our details from this token\r\n                        this.setToken(response['access_token']);\r\n\r\n                        if (response['refresh_token']) {\r\n                            // this.refreshToken = response['refresh_token'];\r\n                        }\r\n\r\n                        observer.next(null);\r\n                        observer.complete();\r\n                            }\r\n                        }\r\n                    },\r\n                    err => {\r\n                        observer.error(err);\r\n                    }\r\n                );\r\n        });\r\n    }\r\n\r\n    public logoff(): void {\r\n        if (this.appSettingsService.getValue(AppSettings.authSaveinLocalStorage)) {\r\n            // Remove token from Local Storage\r\n            localStorage.removeItem(this.tokenStorageKey);\r\n        }\r\n\r\n        // Clear Akita Stores\r\n        resetStores({ exclude: ['appSettings'] });\r\n\r\n        this.authStore.update({ token: null, userDetails: null, authenticated: false });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UserManager, UserManagerSettings, User } from 'oidc-client';\r\nimport { UserAuthenticationBase } from './UserAuthenticationBase';\r\nimport { AppSettings, BaseEntity, BasicUser } from '@ngscaffolding/models';\r\nimport { AuthenticationStore } from './userAuthentication.store';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { UserAuthenticationQuery } from './userAuthentication.query';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OAuthService implements UserAuthenticationBase {\r\n  private manager: UserManager;\r\n  private user: User | null;\r\n  private jwtHelper: JwtHelperService;\r\n\r\n  constructor(\r\n    private authStore: AuthenticationStore,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private appSettingsQuery: AppSettingsQuery\r\n  ) {\r\n    this.jwtHelper = new JwtHelperService({});\r\n    appSettingsQuery\r\n      .selectEntity(AppSettings.authOAuthSettings)\r\n      .subscribe((settings) => {\r\n        this.manager = new UserManager(settings.value);\r\n        this.manager.getUser().then((user) => {\r\n          if (user) {\r\n            this.user = user;\r\n            this.setToken(this.user.access_token);\r\n          }\r\n        });\r\n      });\r\n  }\r\n  filterItemsByRole(authItems: BaseEntity[]): Array<BaseEntity> {\r\n    const returnItems: BaseEntity[] = [];\r\n\r\n    if (authItems) {\r\n      authItems.forEach((authItem) => {\r\n        if (this.checkByRoles(authItem)) {\r\n          returnItems.push(authItem);\r\n        }\r\n      });\r\n    }\r\n\r\n    return returnItems;\r\n  }\r\n\r\n  // Check if user passes muster\r\n  checkByRoles(authItem: BaseEntity): boolean {\r\n    // No roles = always okay\r\n    if (!authItem.roles) {\r\n      return true;\r\n    }\r\n\r\n    let isAllowed = false;\r\n    const user = this.authQuery.getUser();\r\n\r\n    if (user.role) {\r\n      user.role.forEach((role) => {\r\n        authItem.roles.forEach((authRole) => {\r\n          if (role === authRole) {\r\n            isAllowed = true;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return isAllowed;\r\n  }\r\n\r\n  getToken(): string {\r\n    return this.user.access_token;\r\n  }\r\n  forceLogon() {\r\n    this.logon();\r\n  }\r\n  logon(userName = '', password = '') {\r\n    return this.manager.signinRedirect();\r\n  }\r\n  async logoff() {\r\n    await this.manager.signoutRedirect();\r\n  }\r\n  async completeAuthentication() {\r\n    this.user = await this.manager.signinRedirectCallback();\r\n    this.setToken(this.user.access_token);\r\n  }\r\n  isAuthenticated(): boolean {\r\n    this.manager.getUser().then((user) => {\r\n      this.user = user;\r\n    });\r\n    return this.user != null && !this.user.expired;\r\n  }\r\n  authorizationHeaderValue() {\r\n    return `${this.user.token_type} ${this.user.access_token}`;\r\n  }\r\n  name(): string {\r\n    return this.user != null ? this.user.profile.name : '';\r\n  }\r\n\r\n  private setToken(token: any) {\r\n    // New AuthUser Based on Token\r\n    const tokenDetails = this.jwtHelper.decodeToken(token);\r\n\r\n    const newUser = new BasicUser();\r\n\r\n    if (tokenDetails['name']) {\r\n      newUser.name = tokenDetails['name'];\r\n    } else if (tokenDetails['firstName'] && tokenDetails['lastName']) {\r\n      newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];\r\n    }\r\n\r\n    if (tokenDetails['role']) {\r\n      newUser.role = tokenDetails['role'];\r\n    }\r\n\r\n    if (tokenDetails['email']) {\r\n      newUser.userId = tokenDetails['email'];\r\n      newUser.email = tokenDetails['email'];\r\n    }\r\n\r\n    this.authStore.update({\r\n      token: token,\r\n      userDetails: newUser,\r\n      authenticated: true,\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { UserPreferenceValue, UserPreferenceDefinition } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface UserPreferencesState extends EntityState<UserPreferenceValue> {\r\n  preferenceDefinitions: UserPreferenceDefinition[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'userPreferences', idKey: 'name' })\r\nexport class UserPreferencesStore extends EntityStore<UserPreferencesState, UserPreferenceValue> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false });\r\n    console.log('UserPreferencesStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { UserPreferencesStore, UserPreferencesState } from './userPreferences.store';\r\nimport { UserPreferenceValue } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserPreferencesQuery extends QueryEntity<UserPreferencesState, UserPreferenceValue> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: UserPreferencesStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, combineLatest } from 'rxjs';\r\n\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\n\r\n// Models\r\nimport { UserPreferenceDefinition, UserPreferenceValue, AppSettings } from '@ngscaffolding/models';\r\nimport { UserPreferencesStore } from './userPreferences.store';\r\nimport { UserPreferencesQuery } from './userPreferences.query';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserPreferencesService {\r\n  private readonly className = 'UserPreferencesService';\r\n  private readonly prefix = 'preference_';\r\n  private readonly storageKey = 'UserPreferences';\r\n\r\n  private apiHome: string;\r\n  private valuesDownloaded = false;\r\n  private definitionsDownloaded = false;\r\n  private httpInFlight = 0;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private logger: LoggingService,\r\n    private userPrefsStore: UserPreferencesStore,\r\n    private userPrefsQuery: UserPreferencesQuery,\r\n    private appSettings: AppSettingsService\r\n  ) {\r\n    // Wait for settings, then load from server\r\n    combineLatest([this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)]).subscribe(([authenticated, apiHome]) => {\r\n      if (authenticated && apiHome && !this.valuesDownloaded && !this.definitionsDownloaded) {\r\n        this.apiHome = apiHome.value;\r\n        if (!this.httpInFlight) {\r\n          // Load User Prefs from Localstorage\r\n          this.loadFromLocal();\r\n\r\n          // Load Pref Defs from server\r\n          this.getDefinitions();\r\n\r\n          // Load User Prefs from Server\r\n          this.getValues();\r\n        }\r\n      } else if (!authenticated) {\r\n        // Clear Here as we logoff\r\n        this.clearValues();\r\n      }\r\n    });\r\n  }\r\n\r\n  private clearValues() {\r\n    this.userPrefsStore.remove();\r\n\r\n    // Save to LocalStorage\r\n    localStorage.removeItem(this.storageKey);\r\n  }\r\n\r\n  public deleteValue(name: string) {\r\n    return new Observable<any>(observer => {\r\n      this.http.delete(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue/${name}`).subscribe(\r\n        () => {\r\n          // Remove and tell the world\r\n          this.userPrefsStore.remove(name);\r\n\r\n          localStorage.removeItem(this.storageKey);\r\n          this.saveToLocal();\r\n\r\n          observer.next();\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  public getValues() {\r\n    // Load values from Server\r\n    this.httpInFlight++;\r\n    this.http.get<Array<UserPreferenceValue>>(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue`).subscribe(\r\n      prefValues => {\r\n        if (prefValues) {\r\n          prefValues.forEach(prefValue => {\r\n            this.userPrefsStore.upsert(prefValue.name, prefValue);\r\n          });\r\n          this.userPrefsStore.setLoading(false);\r\n          this.httpInFlight--;\r\n          this.valuesDownloaded = true;\r\n        }\r\n      },\r\n      err => {\r\n        this.httpInFlight--;\r\n        this.logger.error(err, this.className, true);\r\n      }\r\n    );\r\n  }\r\n\r\n  public setValue(key: string, value: any): Observable<any> {\r\n    return new Observable<any>(observer => {\r\n      this.http.post(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue`, { name: key, value: value }).subscribe(\r\n        () => {\r\n          const existingEntity = this.userPrefsQuery.getEntity(key);\r\n          let newEntity = new UserPreferenceValue();\r\n\r\n          if (existingEntity) {\r\n            newEntity = JSON.parse(JSON.stringify(existingEntity));\r\n          } else {\r\n            newEntity.name = key;\r\n            newEntity.userId = this.authQuery.getValue().userDetails.userId;\r\n          }\r\n\r\n          newEntity.value = value;\r\n          this.userPrefsStore.upsert(key, newEntity);\r\n\r\n          observer.next();\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  private getDefinitions() {\r\n    this.httpInFlight++;\r\n    this.http.get<Array<UserPreferenceDefinition>>(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/UserPreferenceDefinition`).subscribe(\r\n      prefDefinitions => {\r\n        if (prefDefinitions && prefDefinitions.length > 0) {\r\n          let defns = [];\r\n          prefDefinitions.forEach(definition => {\r\n            defns.push(definition);\r\n          });\r\n          this.httpInFlight--;\r\n          this.definitionsDownloaded = true;\r\n          this.userPrefsStore.update({ preferenceDefinitions: defns });\r\n        }\r\n      },\r\n      err => {\r\n        this.httpInFlight--;\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadFromLocal() {\r\n    const stored = localStorage.getItem(this.storageKey);\r\n    if (stored) {\r\n      const map: Array<UserPreferenceValue> = JSON.parse(stored);\r\n      if (map && map.length > 0) {\r\n        map.forEach(value => {\r\n          // this.userPrefsStore.upsert(value.name, value.value);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private saveToLocal(): void {\r\n    // Save to LocalStorage\r\n    const serial = JSON.stringify(this.userPrefsQuery.getValue().entities);\r\n\r\n    localStorage.setItem(this.storageKey, serial);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { WidgetModelBase } from '@ngscaffolding/models';\r\n\r\nexport interface WidgetState extends EntityState<WidgetModelBase> {}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'widget', idKey: 'name' })\r\nexport class WidgetStore extends EntityStore<WidgetState, WidgetModelBase> {\r\n\r\n  constructor() {\r\n    super();\r\n    console.log('WidgetStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { WidgetModelBase } from '@ngscaffolding/models';\r\nimport { WidgetStore, WidgetState } from './widget.store';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WidgetQuery extends QueryEntity<WidgetState, WidgetModelBase> {\r\n  constructor(protected store: WidgetStore) {\r\n    super(store);\r\n  }\r\n}\r\n","import { RolesService } from '../rolesService/roles.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { finalize, take } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { WidgetModelBase, AppSettings } from '@ngscaffolding/models';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { WidgetStore } from './widget.store';\r\nimport { WidgetQuery } from './widget.query';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WidgetService {\r\n  private className = 'core.WidgetService';\r\n\r\n  private apiHome: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private widgetStore: WidgetStore,\r\n    private widgetQuery: WidgetQuery,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private log: LoggingService,\r\n    public rolesService: RolesService\r\n  ) {\r\n    // First Time load away\r\n    this.widgetStore.setLoading(false);\r\n\r\n    // Wait for settings, then load from server\r\n    combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)).subscribe(([authenticated, apiHome]) => {\r\n      if (authenticated && apiHome) {\r\n        this.apiHome = apiHome.value;\r\n        this.widgetQuery\r\n          .selectLoading()\r\n          .pipe(take(1))\r\n          .subscribe(loading => {\r\n            if (!loading) {\r\n              this.downloadWidgetItems();\r\n            }\r\n          });\r\n      } else if (!authenticated) {\r\n        this.widgetStore.remove();\r\n      }\r\n    });\r\n  }\r\n  public downloadWidgetItems() {\r\n    // Mark loading status\r\n    this.widgetStore.setLoading(true);\r\n\r\n    this.http\r\n      .get<Array<WidgetModelBase>>(this.apiHome + '/api/v1/widgets')\r\n      .pipe(\r\n        finalize(() => {\r\n          this.widgetStore.setLoading(false);\r\n        })\r\n      )\r\n      .subscribe(widgetItems => {\r\n        this.widgetStore.add(widgetItems);\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { RolesService } from '../rolesService/roles.service';\r\nimport { IUserModel, AppSettings, ChangePasswordModel } from '@ngscaffolding/models';\r\nimport { Observable } from 'rxjs';\r\nimport { timeout } from 'rxjs/operators';\r\nimport { UserServiceBase } from './user.service.base';\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService implements UserServiceBase  {\r\n  private className = 'core.UserService';\r\n\r\n  private apiHome: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private appSettingsService: AppSettingsService,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private log: LoggingService,\r\n    public rolesService: RolesService\r\n  ) {}\r\n\r\n  getUsers() {\r\n    return new Observable<IUserModel[]>(observer => {\r\n      this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n  createUser(user: any) {\r\n    return new Observable<IUserModel>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users`, user);\r\n    }).pipe(timeout(30000));\r\n  }\r\n  deleteUser(userId: any) {\r\n    return new Observable<null>(observer => {\r\n      this.http.delete(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/${userId}`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n  changePassword(changePasswordModel: ChangePasswordModel) {\r\n    return new Observable<null>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/changePassword`, changePasswordModel)\r\n        .pipe(timeout(30000))\r\n        .subscribe(response => {\r\n          observer.next(null);\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  setPassword(changePasswordModel: ChangePasswordModel) {\r\n    return new Observable<null>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/setPassword`, changePasswordModel)\r\n        .pipe(timeout(30000))\r\n        .subscribe(response => {\r\n          observer.next(null);\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  resetPassword(userId: any) {\r\n    return new Observable<null>(observer => {\r\n      this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/resetPassword/${userId}`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n\r\n\r\n  public getUser(userId: string): Observable<IUserModel> {\r\n    return new Observable<IUserModel>(observer => {\r\n      this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/${userId}`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n\r\n  public saveUser(user: IUserModel): Observable<any> {\r\n    return new Observable<IUserModel>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/`, user);\r\n    }).pipe(timeout(30000));\r\n  }\r\n}\r\n","import { IUserModel, ChangePasswordModel } from '@ngscaffolding/models';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport abstract class  UserServiceBase {\r\n    abstract getUser(userId: string): Observable<IUserModel>;\r\n    abstract saveUser(user: IUserModel): Observable<IUserModel>;\r\n\r\n    abstract getUsers(): Observable<IUserModel[]>;\r\n    abstract createUser(user: IUserModel): Observable<IUserModel>;\r\n    abstract deleteUser(userId: any): Observable<null>;\r\n\r\n    abstract changePassword(changePasswordModel: ChangePasswordModel): Observable<null>;\r\n    abstract resetPassword(userId: any): Observable<null>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggingService } from '../logging/logging.service';\r\n\r\nexport class SoftwareVersion {\r\n    module: string;\r\n    version: string;\r\n    isAppModule: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class VersionsService {\r\n    private versions: SoftwareVersion[];\r\n\r\n    constructor(private logging: LoggingService) {\r\n        this.versions = [];\r\n    }\r\n    addVersion(module: string, version: string, isAppModule = false) {\r\n        this.logging.info(`Loading Module ${module} Version ${version} IsAppModule ${isAppModule}`);\r\n        this.versions.push({\r\n            module: module,\r\n            version: version,\r\n            isAppModule: isAppModule\r\n        });\r\n    }\r\n    getVersions(): SoftwareVersion[] {\r\n        return this.versions;\r\n    }\r\n\r\n    getVersion(moduleName: string): string {\r\n        const foundModule = this.versions.find(v => v.module === moduleName);\r\n        if (foundModule) {\r\n            return foundModule.version;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import {\r\n  HostListener,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport { LoggingService } from '../services/logging/logging.service';\r\n\r\n@Directive({ selector: '[ngsFillHeight]' })\r\nexport class FillHeightDirective implements AfterViewInit {\r\n  @Input() footerElement = null;\r\n  @Input() fixedHeight = 0;\r\n  @Input() relativeToParentPercent = 0;\r\n\r\n  constructor(private el: ElementRef, private logger: LoggingService) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.calculateAndSetElementHeight();\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event) {\r\n    this.calculateAndSetElementHeight();\r\n  }\r\n\r\n  private calculateAndSetElementHeight() {\r\n    if (this.relativeToParentPercent > 0) {\r\n      const parentHeight = this.el.nativeElement.parentNode.parentNode\r\n        .parentNode.parentNode.parentNode.parentNode.offsetHeight;\r\n      if (parentHeight > 0) {\r\n        this.el.nativeElement.style.height = `${\r\n          parentHeight * (this.relativeToParentPercent / 100)\r\n        }px`;\r\n      }\r\n    } else if (this.fixedHeight > 0) {\r\n      this.el.nativeElement.style.height = `${this.fixedHeight}px`;\r\n    } else {\r\n      this.el.nativeElement.style.overflow = 'auto';\r\n      let windowHeight = window.innerHeight;\r\n      if (windowHeight === 0) {\r\n        this.logger.error('FillHeight: Window reported zero height');\r\n        windowHeight = 800;\r\n      }\r\n      const elementOffsetTop = this.getElementOffsetTop();\r\n      const elementMarginBottom = this.el.nativeElement.style.marginBottom;\r\n      const footerElementMargin = this.getfooterElementMargin();\r\n\r\n      this.el.nativeElement.style.height = `${\r\n        windowHeight - footerElementMargin - elementOffsetTop - 16\r\n      }px`;\r\n    }\r\n  }\r\n\r\n  private getElementOffsetTop() {\r\n    return this.el.nativeElement.getBoundingClientRect().top;\r\n  }\r\n\r\n  private getfooterElementMargin() {\r\n    if (!this.footerElement) {\r\n      return 0;\r\n    }\r\n    const footerStyle = window.getComputedStyle(this.footerElement);\r\n    return parseInt(footerStyle.height, 10);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ButtonColours } from '@ngscaffolding/models';\r\n\r\n@Pipe({ name: 'buttonColour' })\r\nexport class ButtonColourPipe implements PipeTransform {\r\n  transform(inputColor: string): string {\r\n    let returnColor: string;\r\n\r\n    switch (inputColor) {\r\n      case ButtonColours.primary: {\r\n        returnColor = 'p-button-primary';\r\n        break;\r\n      }\r\n      case ButtonColours.secondary: {\r\n        returnColor = 'p-button-secondary';\r\n        break;\r\n      }\r\n      case ButtonColours.success: {\r\n        returnColor = 'p-button-success';\r\n        break;\r\n      }\r\n      case ButtonColours.info: {\r\n        returnColor = 'p-button-info';\r\n        break;\r\n      }\r\n      case ButtonColours.warning: {\r\n        returnColor = 'p-button-warning';\r\n        break;\r\n      }\r\n      case ButtonColours.danger: {\r\n        returnColor = 'p-button-danger';\r\n        break;\r\n      }\r\n      case ButtonColours.blue: {\r\n        returnColor = 'blue-grey-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.cyan: {\r\n        returnColor = 'cyan-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.teal: {\r\n        returnColor = 'teal-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.orange: {\r\n        returnColor = 'orange-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.deeporange: {\r\n        returnColor = 'deep-orange-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.purple: {\r\n        returnColor = 'purple-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.indigo: {\r\n        returnColor = 'indigo-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.pink: {\r\n        returnColor = 'pink-btn';\r\n        break;\r\n      }\r\n      default: {\r\n        returnColor = 'p-button-info';\r\n      }\r\n    }\r\n    return returnColor;\r\n  }\r\n}\r\n","import * as dateFormatimp from 'dateformat';\r\nconst dateFormat = dateFormatimp;\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { AppSettingsQuery } from '../services/appSettings/appSettings.query';\r\nimport { AppSettings } from '@ngscaffolding/models';\r\n\r\n@Pipe({ name: 'ngsDate' })\r\nexport class NgsDatePipe implements PipeTransform {\r\n  constructor(private appSettings: AppSettingsQuery) {}\r\n  transform(inputDate: Date): string {\r\n    if (inputDate) {\r\n      // If a string gets through, convert to date object\r\n      if (typeof inputDate === 'string' || inputDate instanceof String) {\r\n        inputDate = new Date(inputDate);\r\n      }\r\n\r\n      const userTimezoneOffset = inputDate.getTimezoneOffset() * 60000;\r\n      const zuluDate = new Date(inputDate.getTime() + userTimezoneOffset);\r\n\r\n      const format = this.appSettings.getEntity(AppSettings.dateFormat);\r\n      if (format && format.value) {\r\n        return dateFormat(zuluDate, format.value);\r\n      } else {\r\n        return dateFormat(zuluDate, 'default');\r\n      }\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n","import * as dateFormatimp from 'dateformat';\r\nconst dateFormat = dateFormatimp;\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { AppSettingsQuery } from '../services/appSettings/appSettings.query';\r\nimport { AppSettings } from '@ngscaffolding/models';\r\n\r\n@Pipe({ name: 'ngsDateTime' })\r\nexport class NgsDateTimePipe implements PipeTransform {\r\n  constructor(private appSettings: AppSettingsQuery) {}\r\n  transform(inputDate: Date): string {\r\n    if (inputDate) {\r\n      // If a string gets through, convert to date object\r\n      if (typeof inputDate === 'string' || inputDate instanceof String) {\r\n        inputDate = new Date(inputDate);\r\n      }\r\n\r\n      const userTimezoneOffset = inputDate.getTimezoneOffset() * 60000;\r\n      const zuluDate = new Date(inputDate.getTime() + userTimezoneOffset);\r\n\r\n      const format = this.appSettings.getEntity(AppSettings.dateTimeFormat);\r\n      if (format && format.value) {\r\n        return dateFormat(zuluDate, format.value);\r\n      } else {\r\n        return dateFormat(zuluDate, 'default');\r\n      }\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'truncateText'\r\n})\r\nexport class TruncateTextPipe implements PipeTransform {\r\n\r\n  transform(value: string, limit: number = 40, trail: String = '…'): string {\r\n    let result = value || '';\r\n\r\n    if (value) {\r\n      const words = value.split(/\\s+/);\r\n      if (words.length > Math.abs(limit)) {\r\n        if (limit < 0) {\r\n          limit *= -1;\r\n          result =\r\n            trail + words.slice(words.length - limit, words.length).join(' ');\r\n        } else {\r\n          result = words.slice(0, limit).join(' ') + trail;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { RolesService } from '../services/rolesService/roles.service';\r\nimport { UserAuthenticationBase } from '../services/userAuthentication/UserAuthenticationBase';\r\n\r\n@Injectable()\r\nexport class AuthoriseRoleGuard implements CanActivate {\r\n  constructor(\r\n    private authService: UserAuthenticationBase,\r\n    private router: Router,\r\n    private rolesService: RolesService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n\r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    }\r\n\r\n    // No authority, bye bye.\r\n    this.authService.forceLogon(state.url);\r\n    return false;\r\n  }\r\n}\r\n","import { Component, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngs-dialog-window',\r\n    templateUrl: 'dialogWindow.component.html',\r\n    styleUrls: ['dialogWindow.component.scss']\r\n})\r\nexport class DialogWindowComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Output() closed = new EventEmitter<any>();\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {}\r\n    ngOnDestroy(): void {}\r\n    ngOnInit(): void {}\r\n\r\n    cancel(event: any) {\r\n        this.closed.emit(null);\r\n    }\r\n\r\n    save(event: any) {\r\n\r\n    }\r\n}\r\n","<h1>Dialog Window Base Class</h1>\r\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\r\n/* tslint:disable */\r\nexport const VERSION = {\r\n    \"dirty\": true,\r\n    \"raw\": \"608f2a0-dirty\",\r\n    \"hash\": \"608f2a0\",\r\n    \"distance\": null,\r\n    \"tag\": null,\r\n    \"semver\": null,\r\n    \"suffix\": \"608f2a0-dirty\",\r\n    \"semverString\": null,\r\n    \"version\": \"1.1.20\"\r\n};\r\n/* tslint:enable */\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n// Pipes\nimport { ButtonColourPipe } from './pipes/buttonColour.pipe';\nimport { NgsDateTimePipe } from './pipes/ngsDateTime.pipe';\nimport { NgsDatePipe } from './pipes/ngsDate.pipe';\nimport { TruncateTextPipe } from './pipes/truncateText.pipe';\n\n// Directives\nimport { FillHeightDirective } from './directives/fill-height.directive';\n\n// Services\nimport { VersionsService } from './services/versions/versions.service';\n\n// Components\nimport { DialogWindowComponent } from './components/dialogWindow/dialogWindow.component';\n\nimport { VERSION } from './version';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, HttpClientModule],\n    declarations: [\n        FillHeightDirective,\n        ButtonColourPipe,\n        NgsDatePipe,\n        NgsDateTimePipe,\n        TruncateTextPipe,\n        DialogWindowComponent\n    ],\n    exports: [\n        ButtonColourPipe,\n        NgsDatePipe,\n        NgsDateTimePipe,\n        TruncateTextPipe,\n        FillHeightDirective,\n        DialogWindowComponent\n    ]\n})\nexport class CoreModule {\n    static forRoot(): ModuleWithProviders<CoreModule> {\n        return {\n            ngModule: CoreModule\n        };\n    }\n    constructor(versions: VersionsService) {\n        versions.addVersion('@ngscaffolding/core', VERSION.version);\n    }\n}\n"]}