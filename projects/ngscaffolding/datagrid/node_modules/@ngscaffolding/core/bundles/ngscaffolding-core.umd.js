(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@datorama/akita'), require('@ngscaffolding/models'), require('rxjs/operators'), require('rxjs'), require('@angular/common/http'), require('uuid'), require('@auth0/angular-jwt'), require('@angular/router'), require('oidc-client'), require('dateformat'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ngscaffolding/core', ['exports', '@angular/core', '@datorama/akita', '@ngscaffolding/models', 'rxjs/operators', 'rxjs', '@angular/common/http', 'uuid', '@auth0/angular-jwt', '@angular/router', 'oidc-client', 'dateformat', '@angular/common', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ngscaffolding = global.ngscaffolding || {}, global.ngscaffolding.core = {}), global.ng.core, global.akita, global.models, global.rxjs.operators, global.rxjs, global.ng.common.http, global.uuid, global.angularJwt, global.ng.router, global.oidcClient, global.dateFormatimp, global.ng.common, global.ng.forms));
}(this, (function (exports, i0, akita, models, operators, rxjs, i1, uuid, angularJwt, i6, oidcClient, dateFormatimp, common, forms) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var dateFormatimp__namespace = /*#__PURE__*/_interopNamespace(dateFormatimp);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    exports.AppSettingsStore = /** @class */ (function (_super) {
        __extends(AppSettingsStore, _super);
        function AppSettingsStore() {
            var _this = _super.call(this, { isInitialised: false }) || this;
            console.log('AppSettingsStore Constructor');
            return _this;
        }
        return AppSettingsStore;
    }(akita.EntityStore));
    exports.AppSettingsStore.ɵfac = function AppSettingsStore_Factory(t) { return new (t || exports.AppSettingsStore)(); };
    exports.AppSettingsStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.AppSettingsStore, factory: exports.AppSettingsStore.ɵfac, providedIn: 'root' });
    exports.AppSettingsStore = __decorate([
        akita.StoreConfig({ name: 'appSettings', idKey: 'name' })
    ], exports.AppSettingsStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.AppSettingsStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var AppSettingsQuery = /** @class */ (function (_super) {
        __extends(AppSettingsQuery, _super);
        function AppSettingsQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            _this.isInitialised$ = _this.select(function (state) { return state.isInitialised; });
            return _this;
        }
        return AppSettingsQuery;
    }(akita.QueryEntity));
    AppSettingsQuery.ɵfac = function AppSettingsQuery_Factory(t) { return new (t || AppSettingsQuery)(i0.ɵɵinject(exports.AppSettingsStore)); };
    AppSettingsQuery.ɵprov = i0.ɵɵdefineInjectable({ token: AppSettingsQuery, factory: AppSettingsQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(AppSettingsQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.AppSettingsStore }]; }, null);
    })();

    var BroadcastService = /** @class */ (function () {
        function BroadcastService() {
            this._eventBus = new rxjs.Subject();
        }
        BroadcastService.prototype.broadcast = function (key, data) {
            this._eventBus.next({ key: key, data: data });
        };
        BroadcastService.prototype.on = function (key) {
            return this._eventBus.pipe(operators.filter(function (event) { return event.key === key; }), operators.map(function (event) { return event.data; }));
        };
        return BroadcastService;
    }());
    BroadcastService.ɵfac = function BroadcastService_Factory(t) { return new (t || BroadcastService)(); };
    BroadcastService.ɵprov = i0.ɵɵdefineInjectable({ token: BroadcastService, factory: BroadcastService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(BroadcastService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return []; }, null);
    })();

    var NotificationService = /** @class */ (function () {
        function NotificationService(broadcast) {
            this.broadcast = broadcast;
        }
        NotificationService.prototype.showMessage = function (message) {
            this.broadcast.broadcast("SHOW_MESSAGE" /* SHOW_MESSAGE */, message);
        };
        return NotificationService;
    }());
    NotificationService.ɵfac = function NotificationService_Factory(t) { return new (t || NotificationService)(i0.ɵɵinject(BroadcastService)); };
    NotificationService.ɵprov = i0.ɵɵdefineInjectable({ token: NotificationService, factory: NotificationService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NotificationService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return [{ type: BroadcastService }]; }, null);
    })();

    exports.AuthenticationStore = /** @class */ (function (_super) {
        __extends(AuthenticationStore, _super);
        function AuthenticationStore() {
            var _this = _super.call(this, { userDetails: models.createBasicUser() }) || this;
            console.log('AuthenticationStore Constructor');
            return _this;
        }
        return AuthenticationStore;
    }(akita.Store));
    exports.AuthenticationStore.ɵfac = function AuthenticationStore_Factory(t) { return new (t || exports.AuthenticationStore)(); };
    exports.AuthenticationStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.AuthenticationStore, factory: exports.AuthenticationStore.ɵfac, providedIn: 'root' });
    exports.AuthenticationStore = __decorate([
        akita.StoreConfig({ name: 'authorisation' })
    ], exports.AuthenticationStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.AuthenticationStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var UserAuthenticationQuery = /** @class */ (function (_super) {
        __extends(UserAuthenticationQuery, _super);
        function UserAuthenticationQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            _this.authenticated$ = _this.select(function (state) { return state.authenticated; });
            _this.currentUser$ = _this.select(function (state) { return state.userDetails; });
            return _this;
        }
        UserAuthenticationQuery.prototype.isAuthenticated = function () {
            return akita.toBoolean(this.getValue().authenticated);
        };
        UserAuthenticationQuery.prototype.getUserId = function () {
            if (this.isAuthenticated() && this.getValue().userDetails) {
                return this.getValue().userDetails.userId;
            }
            else {
                return null;
            }
        };
        UserAuthenticationQuery.prototype.getUser = function () {
            return this.getValue().userDetails;
        };
        return UserAuthenticationQuery;
    }(akita.Query));
    UserAuthenticationQuery.ɵfac = function UserAuthenticationQuery_Factory(t) { return new (t || UserAuthenticationQuery)(i0.ɵɵinject(exports.AuthenticationStore)); };
    UserAuthenticationQuery.ɵprov = i0.ɵɵdefineInjectable({ token: UserAuthenticationQuery, factory: UserAuthenticationQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(UserAuthenticationQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.AuthenticationStore }]; }, null);
    })();

    var LoggingService = /** @class */ (function () {
        function LoggingService(notification, appSettingsQuery, userQuery, http) {
            this.notification = notification;
            this.appSettingsQuery = appSettingsQuery;
            this.userQuery = userQuery;
            this.http = http;
        }
        LoggingService.prototype.error = function (err, methodName, showToast) {
            if (methodName === void 0) { methodName = ''; }
            if (showToast === void 0) { showToast = false; }
            if (!methodName) {
                console.error("Method " + methodName + ": Error " + err);
            }
            else {
                console.error("Error " + err);
            }
            // TODO: Resume showing toast
            if (showToast) {
                this.notification.showMessage({
                    severity: 'error',
                    summary: 'Error',
                    detail: err.message
                });
            }
        };
        LoggingService.prototype.warning = function (message, methodName) {
            if (methodName === void 0) { methodName = ''; }
            if (!methodName) {
                console.warn("Method " + methodName + ": Warning " + message);
            }
            else {
                console.warn("Warning " + message);
            }
        };
        LoggingService.prototype.info = function (message, methodName, objectInfo) {
            if (methodName === void 0) { methodName = ''; }
            if (objectInfo === void 0) { objectInfo = null; }
            if (!methodName) {
                // tslint:disable-next-line:no-console
                console.info("Info : " + message, objectInfo);
            }
            else {
                // tslint:disable-next-line:no-console
                console.info("[" + methodName + "] : " + message, objectInfo);
            }
        };
        return LoggingService;
    }());
    LoggingService.ɵfac = function LoggingService_Factory(t) { return new (t || LoggingService)(i0.ɵɵinject(NotificationService), i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(i1.HttpClient)); };
    LoggingService.ɵprov = i0.ɵɵdefineInjectable({ token: LoggingService, factory: LoggingService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(LoggingService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: NotificationService }, { type: AppSettingsQuery }, { type: UserAuthenticationQuery }, { type: i1.HttpClient }]; }, null);
    })();

    var AppSettingsService = /** @class */ (function () {
        function AppSettingsService(appSettingsStore, appSettingsQuery, logger, http) {
            this.appSettingsStore = appSettingsStore;
            this.appSettingsQuery = appSettingsQuery;
            this.logger = logger;
            this.http = http;
            this.className = 'AppSettingsService';
            console.log('AppSettingsService Constructor');
        }
        AppSettingsService.prototype.setValue = function (name, value) {
            if (this.appSettingsQuery.hasEntity(name)) {
                this.appSettingsStore.update(name, { name: name, value: value });
            }
            else {
                this.appSettingsStore.add({ name: name, value: value });
            }
            if (name === models.AppSettings.apiHome) {
                this.loadFromServer(value.toString());
            }
        };
        AppSettingsService.prototype.getValue = function (name) {
            if (this.appSettingsQuery.hasEntity(name)) {
                return this.appSettingsQuery.getEntity(name).value;
            }
            else {
                return null;
            }
        };
        AppSettingsService.prototype.loadFromServer = function (apiHome) {
            var _this = this;
            // Mark store as loading
            this.appSettingsStore.setLoading(true);
            // Load values from Server
            this.http
                .get(apiHome + "/api/v1/appSettings")
                .pipe(operators.timeout(20000), operators.retry(3))
                .subscribe(function (appValues) {
                if (appValues) {
                    appValues.forEach(function (appValue) {
                        _this.setValue(appValue.name, appValue.value);
                    });
                }
                _this.appSettingsStore.setLoading(false);
                _this.appSettingsStore.update({ isInitialised: true });
            }, function (err) {
                _this.appSettingsStore.setLoading(false);
            });
        };
        AppSettingsService.prototype.setValues = function (settings) {
            var _this = this;
            // Mark store as loading
            this.appSettingsStore.setLoading(true);
            this.appSettingsStore.update({ isInitialised: false });
            // Load values
            if (settings) {
                Object.keys(settings).forEach(function (key) {
                    // Setting Value Here
                    _this.logger.info("[" + _this.className + ".loadSettings] Setting Value " + key + " = " + settings[key]);
                    _this.setValue(key, settings[key]);
                });
            }
            this.appSettingsStore.setLoading(false);
            this.appSettingsStore.update({ isInitialised: true });
        };
        AppSettingsService.prototype.getBoolean = function (name) {
            return this.appSettingsQuery.selectEntity(name, function (entity) { return entity.value; });
        };
        AppSettingsService.prototype.getString = function (name) {
            return this.appSettingsQuery.selectEntity(name, function (entity) { return entity.value; });
        };
        return AppSettingsService;
    }());
    AppSettingsService.ɵfac = function AppSettingsService_Factory(t) { return new (t || AppSettingsService)(i0.ɵɵinject(exports.AppSettingsStore), i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(LoggingService), i0.ɵɵinject(i1.HttpClient)); };
    AppSettingsService.ɵprov = i0.ɵɵdefineInjectable({ token: AppSettingsService, factory: AppSettingsService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(AppSettingsService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.AppSettingsStore }, { type: AppSettingsQuery }, { type: LoggingService }, { type: i1.HttpClient }]; }, null);
    })();

    var AppAuditService = /** @class */ (function () {
        function AppAuditService(appSettingsQuery, userQuery, http) {
            this.appSettingsQuery = appSettingsQuery;
            this.userQuery = userQuery;
            this.http = http;
        }
        AppAuditService.prototype.RecordLog = function (appLog) {
            var apiHome = this.appSettingsQuery.getEntity(models.AppSettings.apiHome).value;
            if (!appLog.logDate) {
                appLog.logDate = models.ZuluDateHelper.setGMTDate(new Date());
            }
            if (!appLog.userID) {
                appLog.userID = this.userQuery.getUserId();
            }
            try {
                // This post is a fire and forget. Don't have to authorise either
                this.http
                    .post(apiHome + "/api/v1/applicationLog", appLog)
                    .pipe(operators.timeout(30000), operators.retry(3))
                    .subscribe(function (data) { }, function (err) {
                    console.log('Unable to send AppLog, offline?');
                });
            }
            catch (err) {
                console.log('Unable to send AppLog, offline?');
            }
        };
        return AppAuditService;
    }());
    AppAuditService.ɵfac = function AppAuditService_Factory(t) { return new (t || AppAuditService)(i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(i1.HttpClient)); };
    AppAuditService.ɵprov = i0.ɵɵdefineInjectable({ token: AppAuditService, factory: AppAuditService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(AppAuditService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return [{ type: AppSettingsQuery }, { type: UserAuthenticationQuery }, { type: i1.HttpClient }]; }, null);
    })();

    var AuditLogStore = /** @class */ (function (_super) {
        __extends(AuditLogStore, _super);
        function AuditLogStore() {
            var _this = _super.call(this, {}) || this;
            console.log('AuditLogStore Constructor');
            return _this;
        }
        return AuditLogStore;
    }(akita.EntityStore));
    AuditLogStore.ɵfac = function AuditLogStore_Factory(t) { return new (t || AuditLogStore)(); };
    AuditLogStore.ɵprov = i0.ɵɵdefineInjectable({ token: AuditLogStore, factory: AuditLogStore.ɵfac, providedIn: 'root' });
    AuditLogStore = __decorate([
        akita.StoreConfig({ name: 'auditLog', idKey: 'id' })
    ], AuditLogStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(AuditLogStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var AuditLogQuery = /** @class */ (function (_super) {
        __extends(AuditLogQuery, _super);
        function AuditLogQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            _this.allAuditLog = _this.getAll();
            return _this;
        }
        return AuditLogQuery;
    }(akita.QueryEntity));
    AuditLogQuery.ɵfac = function AuditLogQuery_Factory(t) { return new (t || AuditLogQuery)(i0.ɵɵinject(AuditLogStore)); };
    AuditLogQuery.ɵprov = i0.ɵɵdefineInjectable({ token: AuditLogQuery, factory: AuditLogQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(AuditLogQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: AuditLogStore }]; }, null);
    })();

    var AuditLogService = /** @class */ (function () {
        function AuditLogService(auditLogStore, auditLogQuery, appSettingsQuery, userQuery, http) {
            var _this = this;
            this.auditLogStore = auditLogStore;
            this.auditLogQuery = auditLogQuery;
            this.appSettingsQuery = appSettingsQuery;
            this.userQuery = userQuery;
            this.http = http;
            this.polling = 30000;
            this.retryVal = 3;
            this.isSending = false;
            this.defaultLog = {};
            appSettingsQuery
                .selectEntity(models.AppSettings.mobileDefaultPolling)
                .subscribe(function (val) { return (_this.polling = val.value > 0 ? val.value : 30000); });
            appSettingsQuery
                .selectEntity(models.AppSettings.mobileDefaultRetries)
                .subscribe(function (val) { return (_this.retryVal = val.value > 0 ? val.value : 3); });
            this.StartPolling();
        }
        AuditLogService.prototype.SetDefault = function (defaultLog) {
            this.defaultLog = defaultLog;
        };
        AuditLogService.prototype.RecordLog = function (auditLog) {
            var workingLog = Object.assign(Object.assign({}, this.defaultLog), auditLog);
            workingLog.id = uuid.v4();
            if (!workingLog.logDate) {
                workingLog.logDate = models.ZuluDateHelper.setGMTDate(new Date());
            }
            if (!workingLog.userID) {
                workingLog.userID = this.userQuery.getUserId();
            }
            this.auditLogStore.add(workingLog);
            try {
            }
            catch (err) {
                console.log('Unable to send AppLog, offline?');
            }
        };
        AuditLogService.prototype.StartPolling = function () {
            var _this = this;
            setInterval(function (_) {
                if (!_this.isSending) {
                    _this.isSending = true;
                    _this.SendLogEntries();
                }
            }, this.polling);
        };
        AuditLogService.prototype.SendLogEntries = function () {
            var _this = this;
            var apiHome = this.appSettingsQuery.getEntity(models.AppSettings.apiHome).value;
            var logEntries = this.auditLogQuery.getAll();
            if (logEntries && logEntries.length > 0) {
                var keys_1 = logEntries.map(function (log) { return log.id; });
                // This post is a fire and forget. Don't have to authorise either
                this.http
                    .post(apiHome + "/api/v1/auditlog", logEntries)
                    .pipe(operators.timeout(30000), operators.retry(3), operators.finalize(function () {
                    _this.isSending = false;
                }))
                    .subscribe(function (data) {
                    _this.auditLogStore.remove(keys_1);
                    // keys.forEach(key => this.auditLogStore.remove(({ id }) => id === key));
                }, function (err) {
                    console.log('Unable to send AppLog, offline?');
                });
            }
            else {
                this.isSending = false;
            }
        };
        return AuditLogService;
    }());
    AuditLogService.ɵfac = function AuditLogService_Factory(t) { return new (t || AuditLogService)(i0.ɵɵinject(AuditLogStore), i0.ɵɵinject(AuditLogQuery), i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(i1.HttpClient)); };
    AuditLogService.ɵprov = i0.ɵɵdefineInjectable({ token: AuditLogService, factory: AuditLogService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(AuditLogService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: AuditLogStore }, { type: AuditLogQuery }, { type: AppSettingsQuery }, { type: UserAuthenticationQuery }, { type: i1.HttpClient }]; }, null);
    })();

    var ComponentLoaderService = /** @class */ (function () {
        function ComponentLoaderService(loader, injector) {
            this.loader = loader;
            this.injector = injector;
            this.componentRegistry = {
                'lazy-component': {
                    modulePath: './lazy-components/lazy-components.module#LazyComponentsModule',
                    moduleRef: null
                }
            };
        }
        ComponentLoaderService.prototype.registerComponent = function (name, modulePath) {
            if (modulePath === void 0) { modulePath = null; }
            if (!this.componentRegistry[name]) {
                this.componentRegistry[name] = {
                    modulePath: modulePath,
                    moduleRef: null
                };
            }
        };
        ComponentLoaderService.prototype.loadComponent = function (componentTag) {
            var _this = this;
            var cmpRegistryEntry = this.componentRegistry[componentTag];
            if (!cmpRegistryEntry) {
                throw new Error("Unrecognized component \"" + componentTag + "\". Make sure it is registered in the component registry");
            }
            if (cmpRegistryEntry.modulePath) {
                // Provided a path so this is a lazy loaded component
                if (cmpRegistryEntry.moduleRef) {
                    return new Promise(function (resolve) {
                        var componentInstance = document.createElement(componentTag);
                        resolve(componentInstance);
                    });
                }
                else {
                    var path_1 = cmpRegistryEntry.modulePath;
                    return new Promise(function (resolve, reject) {
                        _this.loader
                            .load(path_1)
                            .then(function (moduleFactory) {
                            var moduleRef = moduleFactory.create(_this.injector).instance;
                            cmpRegistryEntry.moduleRef = moduleRef;
                            // instantiate the component
                            var componentInstance = document.createElement(componentTag);
                            resolve(componentInstance);
                        })
                            .catch(function (err) {
                            console.error('error loading module', err);
                            reject(err);
                        });
                    });
                }
            }
            else {
                // No path so simple Angular Element already webpacked
                return new Promise(function (resolve, reject) {
                    var componentInstance = document.createElement(componentTag);
                    resolve(componentInstance);
                });
            }
        };
        return ComponentLoaderService;
    }());
    ComponentLoaderService.ɵfac = function ComponentLoaderService_Factory(t) { return new (t || ComponentLoaderService)(i0.ɵɵinject(i0.NgModuleFactoryLoader), i0.ɵɵinject(i0.Injector)); };
    ComponentLoaderService.ɵprov = i0.ɵɵdefineInjectable({ token: ComponentLoaderService, factory: ComponentLoaderService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(ComponentLoaderService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i0.NgModuleFactoryLoader }, { type: i0.Injector }]; }, null);
    })();

    var CoreErrorHandlerService = /** @class */ (function (_super) {
        __extends(CoreErrorHandlerService, _super);
        function CoreErrorHandlerService(appSettingsService, http) {
            var _this = _super.call(this) || this;
            _this.appSettingsService = appSettingsService;
            _this.http = http;
            return _this;
        }
        CoreErrorHandlerService.prototype.logError = function (error, source) {
            if (source === void 0) { source = null; }
        };
        CoreErrorHandlerService.prototype.processError = function (error, source) {
            if (source === void 0) { source = null; }
        };
        CoreErrorHandlerService.prototype.handleError = function (error, source) {
            if (source === void 0) { source = null; }
            _super.prototype.handleError.call(this, error);
            if (this.appSettingsService.getValue(models.AppSettings.errorLogConsole)) {
                console.error(error.message);
            }
            if (this.appSettingsService.getValue(models.AppSettings.errorLogServer)) {
                var errorModel = new models.ErrorModel(error);
                if (source) {
                    errorModel.source = source;
                }
                if (error.stack) {
                    errorModel.stackTrace = error.stack;
                }
                // Consume any errors here. Otherwise we will just get stuck
                try {
                    // This post is a fire and forget. Don't have to authorise either
                    this.http.post(this.appSettingsService.getValue(models.AppSettings.apiHome) + '/api/v1/error', errorModel).subscribe(function (data) {
                        // alert('ID: ' + data.id);
                    }, function (err) {
                        console.log('Unable to send Error to Server, offline?');
                    });
                }
                catch (err) {
                    console.log('Unable to send Error to Server, offline?');
                }
            }
            if (this.appSettingsService.getValue(models.AppSettings.errorShowUser)) {
                // TODO: Show User Error
            }
        };
        return CoreErrorHandlerService;
    }(i0.ErrorHandler));
    CoreErrorHandlerService.ɵfac = function CoreErrorHandlerService_Factory(t) { return new (t || CoreErrorHandlerService)(i0.ɵɵinject(AppSettingsService), i0.ɵɵinject(i1.HttpClient)); };
    CoreErrorHandlerService.ɵprov = i0.ɵɵdefineInjectable({ token: CoreErrorHandlerService, factory: CoreErrorHandlerService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(CoreErrorHandlerService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: AppSettingsService }, { type: i1.HttpClient }]; }, null);
    })();

    exports.DataSourceStore = /** @class */ (function (_super) {
        __extends(DataSourceStore, _super);
        function DataSourceStore() {
            var _this = _super.call(this, { isInitialised: false }) || this;
            console.log('DataSourceStore Constructor');
            return _this;
        }
        return DataSourceStore;
    }(akita.EntityStore));
    exports.DataSourceStore.ɵfac = function DataSourceStore_Factory(t) { return new (t || exports.DataSourceStore)(); };
    exports.DataSourceStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.DataSourceStore, factory: exports.DataSourceStore.ɵfac, providedIn: 'root' });
    exports.DataSourceStore = __decorate([
        akita.StoreConfig({ name: 'dataSource', idKey: 'key' })
    ], exports.DataSourceStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.DataSourceStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var DataSourceQuery = /** @class */ (function (_super) {
        __extends(DataSourceQuery, _super);
        function DataSourceQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            _this.isInitialised$ = _this.select(function (state) { return state.isInitialised; });
            return _this;
        }
        return DataSourceQuery;
    }(akita.QueryEntity));
    DataSourceQuery.ɵfac = function DataSourceQuery_Factory(t) { return new (t || DataSourceQuery)(i0.ɵɵinject(exports.DataSourceStore)); };
    DataSourceQuery.ɵprov = i0.ɵɵdefineInjectable({ token: DataSourceQuery, factory: DataSourceQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(DataSourceQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.DataSourceStore }]; }, null);
    })();

    var DataSourceService = /** @class */ (function () {
        function DataSourceService(http, dataSourceStore, dataSourceQuery, appSettingsService, appAuditService, logger) {
            this.http = http;
            this.dataSourceStore = dataSourceStore;
            this.dataSourceQuery = dataSourceQuery;
            this.appSettingsService = appSettingsService;
            this.appAuditService = appAuditService;
            this.logger = logger;
            this.className = 'DataSourceService';
            this.inflightRequests = new Map();
        }
        DataSourceService.prototype.decorateInput = function (inputDetails) {
            return null;
        };
        DataSourceService.prototype.getDataSource = function (dataRequest) {
            var _this = this;
            var key = this.getKey(dataRequest);
            if (dataRequest.forceRefresh) {
                this.dataSourceStore.remove(key);
            }
            var currentCacheValue = this.dataSourceQuery.getEntity(key);
            if (currentCacheValue) {
                if (currentCacheValue.expiresWhen > new Date()) {
                    // Return good cached value
                    return rxjs.of(currentCacheValue);
                }
                else {
                    // Expired - Bad cache
                    this.dataSourceStore.remove(key);
                }
            }
            if (this.inflightRequests.has(key)) {
                return this.inflightRequests.get(key);
            }
            // Make HTTP Request
            var formData = new FormData();
            formData.append('dataSourceRequest', JSON.stringify(dataRequest));
            // Add Files if passed
            if (dataRequest.fileNames) {
                var fileCount_1 = 0;
                dataRequest.fileNames.forEach(function (file) {
                    formData.append("file-" + fileCount_1++, file, file.name);
                });
            }
            var logEntry = {
                entity: 'DataSource Call',
                action: key,
                values: {
                    filterValues: dataRequest.filterValues,
                    inputData: dataRequest.inputData,
                },
            };
            this.logger.info("Calling Datasource " + dataRequest.name, null, logEntry.values);
            this.inflightRequests.set(key, new rxjs.Observable(function (observer) {
                _this.http
                    .post(_this.appSettingsService.getValue(models.AppSettings.apiHome) + "/api/v1/datasource", formData)
                    .pipe(operators.timeout(20000), operators.retry(3))
                    .subscribe(function (values) {
                    var expiryNow = new Date();
                    // If expires Seconds not provided set long expiry
                    var expiresSeconds = values.expiresSeconds > 0 ? values.expiresSeconds : 99999999;
                    var expiresWhen = new Date(expiryNow.getTime() + expiresSeconds * 10000);
                    var newResults = {
                        expiresWhen: expiresWhen,
                        rowCount: values.rowCount,
                        jsonData: values.jsonData,
                        results: values.results,
                    };
                    // Log Datasource Success
                    _this.appAuditService.RecordLog(Object.assign(Object.assign({}, logEntry), { result: 'Success' }));
                    // Update the Store to tell the world we have data
                    _this.dataSourceStore.update(key, newResults);
                    _this.inflightRequests.delete(key);
                    observer.next(newResults);
                    observer.complete();
                }, function (err) {
                    // Update the Store to tell the world we failed in every way. Shame.
                    var errorResults = {
                        expiresWhen: new Date(),
                        error: err.message,
                    };
                    // Log Datasource Success
                    _this.appAuditService.RecordLog(Object.assign(Object.assign({}, logEntry), { result: err.message }));
                    _this.dataSourceStore.update(key, errorResults);
                    _this.inflightRequests.delete(key);
                    _this.logger.error(err, 'DataSource.Service.getDataSource', false);
                    observer.error(err);
                });
            }));
            return this.inflightRequests.get(key);
        };
        DataSourceService.prototype.getKey = function (dataRequest) {
            return "name:" + dataRequest.name + " seed:" + dataRequest.seed + " inputData:" + JSON.stringify(dataRequest.inputData) + " ";
        };
        return DataSourceService;
    }());
    DataSourceService.ɵfac = function DataSourceService_Factory(t) { return new (t || DataSourceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(exports.DataSourceStore), i0.ɵɵinject(DataSourceQuery), i0.ɵɵinject(AppSettingsService), i0.ɵɵinject(AppAuditService), i0.ɵɵinject(LoggingService)); };
    DataSourceService.ɵprov = i0.ɵɵdefineInjectable({ token: DataSourceService, factory: DataSourceService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(DataSourceService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return [{ type: i1.HttpClient }, { type: exports.DataSourceStore }, { type: DataSourceQuery }, { type: AppSettingsService }, { type: AppAuditService }, { type: LoggingService }]; }, null);
    })();

    exports.MenuStore = /** @class */ (function (_super) {
        __extends(MenuStore, _super);
        function MenuStore() {
            var _this = _super.call(this) || this;
            console.log('MenuStore Constructor');
            return _this;
        }
        return MenuStore;
    }(akita.EntityStore));
    exports.MenuStore.ɵfac = function MenuStore_Factory(t) { return new (t || exports.MenuStore)(); };
    exports.MenuStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.MenuStore, factory: exports.MenuStore.ɵfac, providedIn: 'root' });
    exports.MenuStore = __decorate([
        akita.StoreConfig({ name: 'menu', idKey: 'name' })
    ], exports.MenuStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.MenuStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    exports.MenuQuery = /** @class */ (function (_super) {
        __extends(MenuQuery, _super);
        function MenuQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            _this.folders$ = _this.selectAll({
                filterBy: [function (entity) { return entity.type === "folder"; } /* Folder */]
            });
            return _this;
        }
        return MenuQuery;
    }(akita.QueryEntity));
    exports.MenuQuery.ɵfac = function MenuQuery_Factory(t) { return new (t || exports.MenuQuery)(i0.ɵɵinject(exports.MenuStore)); };
    exports.MenuQuery.ɵprov = i0.ɵɵdefineInjectable({ token: exports.MenuQuery, factory: exports.MenuQuery.ɵfac, providedIn: 'root' });
    exports.MenuQuery = __decorate([
        akita.QueryConfig({
            sortBy: 'order',
            sortByOrder: akita.Order.ASC // Order.DESC
        })
    ], exports.MenuQuery);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.MenuQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.MenuStore }]; }, null);
    })();

    exports.RolesStore = /** @class */ (function (_super) {
        __extends(RolesStore, _super);
        function RolesStore() {
            var _this = _super.call(this) || this;
            console.log('RoleStore Constructor');
            return _this;
        }
        return RolesStore;
    }(akita.EntityStore));
    exports.RolesStore.ɵfac = function RolesStore_Factory(t) { return new (t || exports.RolesStore)(); };
    exports.RolesStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.RolesStore, factory: exports.RolesStore.ɵfac, providedIn: 'root' });
    exports.RolesStore = __decorate([
        akita.StoreConfig({ name: 'role', idKey: 'name' })
    ], exports.RolesStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.RolesStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var RolesQuery = /** @class */ (function (_super) {
        __extends(RolesQuery, _super);
        function RolesQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            return _this;
        }
        return RolesQuery;
    }(akita.QueryEntity));
    RolesQuery.ɵfac = function RolesQuery_Factory(t) { return new (t || RolesQuery)(i0.ɵɵinject(exports.RolesStore)); };
    RolesQuery.ɵprov = i0.ɵɵdefineInjectable({ token: RolesQuery, factory: RolesQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(RolesQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.RolesStore }]; }, null);
    })();

    var RolesService = /** @class */ (function () {
        function RolesService(http, rolesQuery, appSettingsQuery, dataSourceService, rolesStore, authQuery) {
            var _this = this;
            this.http = http;
            this.rolesQuery = rolesQuery;
            this.appSettingsQuery = appSettingsQuery;
            this.dataSourceService = dataSourceService;
            this.rolesStore = rolesStore;
            this.authQuery = authQuery;
            this.routeRoles = new Map();
            // First Time load away
            this.rolesStore.setLoading(false);
            // Wait for settings, then load from server
            rxjs.combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(models.AppSettings.apiHome)).subscribe(function (_a) {
                var _b = __read(_a, 2), authenticated = _b[0], apiHome = _b[1];
                if (authenticated && apiHome) {
                    _this.apiHome = apiHome.value;
                    _this.rolesQuery
                        .selectLoading()
                        .pipe(operators.take(1))
                        .subscribe(function (loading) {
                        if (!loading) {
                            _this.downloadRoles();
                        }
                    });
                }
                else if (!authenticated) {
                    _this.rolesStore.remove();
                }
            });
        }
        RolesService.prototype.downloadRoles = function () {
            var _this = this;
            // Mark loading status
            this.rolesStore.setLoading(true);
            this.dataSourceService
                .getDataSource({ name: "system.Roles.Select" /* ROLES_SELECT */ })
                .pipe(operators.finalize(function () {
                _this.rolesStore.setLoading(false);
            }))
                .subscribe(function (results) {
                if (results && !results.error) {
                    _this.rolesStore.add(results.jsonData);
                    _this.rolesStore.setLoading(false);
                }
            });
        };
        // Checks if the current user is in this role.
        RolesService.prototype.isInRole = function (role) {
            var currentUser = this.authQuery.getValue().userDetails;
            if (currentUser && currentUser.role) {
                return currentUser.role.indexOf(role) > -1;
            }
            else {
                return false;
            }
        };
        // Checks if the current user is in one of these roles.
        RolesService.prototype.isInRoles = function (roles) {
            var result = false;
            var currentUser = this.authQuery.getValue().userDetails;
            if (currentUser && currentUser.role) {
                roles.forEach(function (role) {
                    if (currentUser.role.indexOf(role) > -1) {
                        result = true;
                    }
                });
            }
            return result;
        };
        // Repository of Roles: Routes
        RolesService.prototype.addRouteRoles = function (route, roles) {
            this.routeRoles.set(route, roles);
        };
        RolesService.prototype.getRouteRoles = function (route) {
            return this.routeRoles.get(route);
        };
        return RolesService;
    }());
    RolesService.ɵfac = function RolesService_Factory(t) { return new (t || RolesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(RolesQuery), i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(DataSourceService), i0.ɵɵinject(exports.RolesStore), i0.ɵɵinject(UserAuthenticationQuery)); };
    RolesService.ɵprov = i0.ɵɵdefineInjectable({ token: RolesService, factory: RolesService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(RolesService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1.HttpClient }, { type: RolesQuery }, { type: AppSettingsQuery }, { type: DataSourceService }, { type: exports.RolesStore }, { type: UserAuthenticationQuery }]; }, null);
    })();

    var MenuService = /** @class */ (function () {
        function MenuService(http, menuStore, menuQuery, appSettingsQuery, authQuery, log, rolesService) {
            var _this = this;
            this.http = http;
            this.menuStore = menuStore;
            this.menuQuery = menuQuery;
            this.appSettingsQuery = appSettingsQuery;
            this.authQuery = authQuery;
            this.log = log;
            this.rolesService = rolesService;
            this.methodName = 'MenuService';
            this.masterListMenu = [];
            this.routes = [];
            this.menuItems = [];
            this.routeSubject = new rxjs.BehaviorSubject(this.routes);
            this.httpInFlight = false;
            this.lockCount = 0;
            this.menuDownloaded = false;
            // Wait for settings, then load from server
            rxjs.combineLatest([
                this.authQuery.authenticated$,
                this.appSettingsQuery.selectEntity(models.AppSettings.apiHome),
                this.appSettingsQuery.selectEntity(models.AppSettings.isMobile)
            ]).subscribe(function (_a) {
                var _b = __read(_a, 3), authenticated = _b[0], apiHome = _b[1], isMobile = _b[2];
                if (authenticated && apiHome && isMobile && !_this.menuDownloaded) {
                    _this.apiHome = apiHome.value;
                    if (!_this.httpInFlight) {
                        _this.downloadMenuItems(isMobile.value || false);
                    }
                }
                else if (!authenticated) {
                    _this.menuDownloaded = false;
                    _this.lockCount = 0;
                }
            });
        }
        MenuService.prototype.addLock = function () {
            this.lockCount++;
            this.log.info("MENU Service: Locks on Loading", this.methodName, this.lockCount);
            this.menuStore.setLoading(true);
        };
        MenuService.prototype.setCurrent = function (name) {
            this.menuStore.setActive(name);
        };
        MenuService.prototype.removeLock = function () {
            this.lockCount--;
            this.log.info("MENU Service: Locks on Loading", this.methodName, this.lockCount);
            if (this.lockCount === 0) {
                this.menuStore.setLoading(false);
            }
        };
        MenuService.prototype.addMenuItemsFromCode = function (menuItems, roles) {
            var _this = this;
            if (roles === void 0) { roles = null; }
            this.addLock();
            this.log.info('Adding MenuItems menuItems', this.methodName, menuItems);
            // Wait till user authorised
            this.authQuery.authenticated$.subscribe(function (authorised) {
                if (authorised) {
                    // Save for later use
                    _this.addMenuItems(menuItems);
                    _this.removeLock();
                }
            });
        };
        MenuService.prototype.getFolders = function () {
            return this.menuQuery.getAll({
                filterBy: [function (entity) { return entity.type === "folder"; } /* Folder */]
            });
        };
        MenuService.prototype.delete = function (menuItem) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                var obs = _this.http.delete(_this.apiHome + "/api/v1/menuitems/" + menuItem.name);
                obs.subscribe(function () {
                    // Remove from our store
                    _this.menuStore.remove(menuItem.name);
                    // Remove from Tree
                    var existingMenus = JSON.parse(JSON.stringify(_this.menuQuery.getValue())).menuItems;
                    var parentMenu;
                    if (menuItem.parent) {
                        parentMenu = existingMenus.find(function (menu) { return menu.name && menu.name.toLowerCase() === menuItem.parent.toLowerCase(); });
                    }
                    var foundIndex = parentMenu.items.findIndex(function (childMenu) { return childMenu.name && childMenu.name === menuItem.name; });
                    parentMenu.items.splice(foundIndex, 1);
                    // Update tree and tell the world
                    _this.menuStore.update({ menuItems: existingMenus });
                    observer.next();
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            });
        };
        MenuService.prototype.saveMenuItem = function (menuItem) {
            return this.http.post(this.apiHome + '/api/v1/menuitems', menuItem);
        };
        MenuService.prototype.updateExistingMenuItem = function (menuItem) {
            // Is this existing?
            var existing = this.menuQuery.hasEntity(menuItem.name);
            if (existing) {
                this.menuStore.upsert(menuItem.name, menuItem);
            }
            else {
                // Add to reference list of menus
                this.menuStore.add(menuItem);
            }
            var existingMenus = JSON.parse(JSON.stringify(this.menuQuery.getAll()));
            var parentMenu;
            if (menuItem.parent) {
                parentMenu = existingMenus.find(function (menu) { return menu.name.toLowerCase() === menuItem.parent.toLowerCase(); });
            }
            // Add to treeview for menu rendering
            if (!parentMenu.items || !Array.isArray(parentMenu.items)) {
                parentMenu.items = [];
            }
            if (existing) {
                var foundIndex = parentMenu.items.findIndex(function (childMenu) { return childMenu.name === menuItem.name; });
                parentMenu.items[foundIndex] = menuItem;
            }
            else {
                parentMenu.items.push(menuItem);
            }
            // Update tree and tell the world
            this.menuStore.update({ menuItems: existingMenus });
        };
        // Iterative Call
        MenuService.prototype.addMenuItemsToReferenceList = function (menuItems) {
            var _this = this;
            menuItems.forEach(function (menuItem) {
                // Add to Entity Store
                _this.menuStore.upsert(menuItem.name, menuItem);
                if (menuItem.items && Array.isArray(menuItem.items)) {
                    _this.addMenuItemsToReferenceList(menuItem.items);
                }
            });
        };
        MenuService.prototype.removeUnauthorisedMenuItems = function (menuItems) {
            var user = this.authQuery.getValue();
            var userRoles = [];
            if (user && user.userDetails) {
                userRoles = user.userDetails.role;
            }
            var removingMenus = [];
            var returnMenus = JSON.parse(JSON.stringify(menuItems));
            for (var menuIndex = 0; menuIndex < returnMenus.length; menuIndex++) {
                var menuItem = returnMenus[menuIndex];
                var removingThis = false;
                // makes sure roles is array
                var checkingRoles = [];
                if (!menuItem.roles) {
                    checkingRoles = [];
                }
                else if (Array.isArray(menuItem.roles)) {
                    checkingRoles = __spread(menuItem.roles);
                }
                else {
                    checkingRoles = [menuItem.roles];
                }
                // Is this role protected
                if (checkingRoles && checkingRoles.length > 0) {
                    if (userRoles && checkingRoles.filter(function (allowedRole) { return userRoles.indexOf(allowedRole) !== -1; }).length === 0) {
                        // No Authority. Remove
                        removingThis = true;
                        removingMenus.push(menuItem.name);
                    }
                }
                if (!removingThis && menuItem.items) {
                    menuItem.items = this.removeUnauthorisedMenuItems(menuItem.items);
                }
            }
            if (removingMenus.length > 0) {
                returnMenus = menuItems.filter(function (menu) { return removingMenus.findIndex(function (remove) { return remove === menu.name; }) === -1; });
            }
            return returnMenus;
        };
        MenuService.prototype.downloadMenuItems = function (isMobile) {
            var _this = this;
            // Mark loading status
            this.addLock();
            this.httpInFlight = true;
            var newMenuItems = [];
            this.http
                .get(this.apiHome + "/api/v1/menuitems?mobile=" + isMobile)
                .pipe(operators.timeout(60000), operators.finalize(function () {
                _this.httpInFlight = false;
                _this.removeLock();
            }))
                .subscribe(function (downloadedMenuItems) {
                _this.log.info("Downloaded MenuItems");
                _this.menuDownloaded = true;
                _this.addMenuItems(downloadedMenuItems);
            }, function (err) {
                _this.log.error('Failed to download Menu');
            });
        };
        MenuService.prototype.addMenuItems = function (newMenuItems, findInTree) {
            var _this = this;
            if (findInTree === void 0) { findInTree = false; }
            // Clone so we can amend
            var fetchedMenuItems = this.menuQuery.getValue().menuItems || [];
            this.menuItems = JSON.parse(JSON.stringify(fetchedMenuItems));
            this.calculateRouterLinks(newMenuItems);
            // Add to flat reference List
            this.addMenuItemsToReferenceList(newMenuItems);
            if (findInTree) {
                newMenuItems.forEach(function (loopMenuItem) {
                    _this.upsertMenuItemToExistingTree(loopMenuItem);
                });
            }
            else {
                newMenuItems.forEach(function (loopMenuItem) {
                    _this.addNewMenuItemToEntities(_this.menuItems, loopMenuItem);
                });
            }
            // Remove the unatuhorised
            this.menuItems = this.removeUnauthorisedMenuItems(this.menuItems);
            this.menuStore.update({ menuItems: this.menuItems });
        };
        MenuService.prototype.calculateRouterLinks = function (menuItems) {
            var _this = this;
            if (menuItems) {
                menuItems.forEach(function (menuItem) {
                    if (!menuItem.routerLink) {
                        // Need to create our routerLink
                        switch (menuItem.type) {
                            case "dashboard" /* Dashboard */: {
                                menuItem.routerLink = "dashboard/" + menuItem.name;
                                break;
                            }
                            case "datagrid" /* Datagrid */: {
                                menuItem.routerLink = "datagrid/" + menuItem.name;
                                break;
                            }
                            case "folder" /* Folder */: {
                                // No router link here
                                break;
                            }
                            default: {
                                menuItem.routerLink = menuItem.name;
                            }
                        }
                    }
                    if (menuItem.items) {
                        _this.calculateRouterLinks(menuItem.items);
                    }
                });
            }
        };
        MenuService.prototype.addRoute = function (route, roles) {
            if (roles === void 0) { roles = null; }
            this.log.info("Adding Route " + JSON.stringify(route));
            this.routes.push(route);
            if (roles !== null) {
                this.rolesService.addRouteRoles(route.path, roles);
            }
        };
        MenuService.prototype.upsertMenuItemToExistingTree = function (newMenuItem) {
            var menuItems = __spread(this.menuItems);
            if (!newMenuItem.parent || newMenuItem.parent === '') {
                // Root menu item
                var existing = menuItems.find(function (menu) { return menu.name === newMenuItem.name; });
                if (existing) {
                    existing = Object.assign({}, newMenuItem);
                }
                else {
                    menuItems.push(Object.assign({}, newMenuItem));
                }
            }
            else {
                // Submenu item
                var parent = menuItems.find(function (menu) { return menu.name === newMenuItem.parent; });
                if (parent) {
                    var existing = parent.items.find(function (menu) { return menu.name === newMenuItem.name; });
                    if (existing) {
                        existing = Object.assign({}, newMenuItem);
                    }
                    else {
                        parent.items.push(Object.assign({}, newMenuItem));
                    }
                }
            }
            this.menuItems = menuItems;
        };
        MenuService.prototype.addNewMenuItemToEntities = function (targetMenu, newMenuItem) {
            var _this = this;
            var calcRouterLink;
            // Don't add if we already know about this
            if (targetMenu && !targetMenu.find(function (menu) { return menu.name === newMenuItem.name; })) {
                // Router bits
                if (newMenuItem.routerLink && newMenuItem.routerLink.indexOf(',') > -1) {
                    calcRouterLink = newMenuItem.routerLink.split(',');
                }
                else {
                    calcRouterLink = newMenuItem.routerLink;
                }
                var createdMenuItem_1 = Object.assign(Object.assign({}, newMenuItem), { routerLink: calcRouterLink });
                targetMenu.push(createdMenuItem_1);
                if (newMenuItem.items && newMenuItem.items.length > 0) {
                    createdMenuItem_1.items = [];
                    var castItems = newMenuItem.items;
                    castItems.forEach(function (menuItem) {
                        _this.addNewMenuItemToEntities(createdMenuItem_1.items, menuItem);
                    });
                }
            }
        };
        return MenuService;
    }());
    MenuService.ɵfac = function MenuService_Factory(t) { return new (t || MenuService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(exports.MenuStore), i0.ɵɵinject(exports.MenuQuery), i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(LoggingService), i0.ɵɵinject(RolesService)); };
    MenuService.ɵprov = i0.ɵɵdefineInjectable({ token: MenuService, factory: MenuService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(MenuService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1.HttpClient }, { type: exports.MenuStore }, { type: exports.MenuQuery }, { type: AppSettingsQuery }, { type: UserAuthenticationQuery }, { type: LoggingService }, { type: RolesService }]; }, null);
    })();

    exports.ReferenceValuesStore = /** @class */ (function (_super) {
        __extends(ReferenceValuesStore, _super);
        function ReferenceValuesStore() {
            var _this = _super.call(this, { isInitialised: false }) || this;
            console.log('ReferenceValuesStore Constructor');
            return _this;
        }
        return ReferenceValuesStore;
    }(akita.EntityStore));
    exports.ReferenceValuesStore.ɵfac = function ReferenceValuesStore_Factory(t) { return new (t || exports.ReferenceValuesStore)(); };
    exports.ReferenceValuesStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.ReferenceValuesStore, factory: exports.ReferenceValuesStore.ɵfac, providedIn: 'root' });
    exports.ReferenceValuesStore = __decorate([
        akita.StoreConfig({ name: 'referenceValues', idKey: 'compositeKey' })
    ], exports.ReferenceValuesStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.ReferenceValuesStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var ReferenceValuesQuery = /** @class */ (function (_super) {
        __extends(ReferenceValuesQuery, _super);
        function ReferenceValuesQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            _this.isInitialised$ = _this.select(function (state) { return state.isInitialised; });
            return _this;
        }
        return ReferenceValuesQuery;
    }(akita.QueryEntity));
    ReferenceValuesQuery.ɵfac = function ReferenceValuesQuery_Factory(t) { return new (t || ReferenceValuesQuery)(i0.ɵɵinject(exports.ReferenceValuesStore)); };
    ReferenceValuesQuery.ɵprov = i0.ɵɵdefineInjectable({ token: ReferenceValuesQuery, factory: ReferenceValuesQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(ReferenceValuesQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.ReferenceValuesStore }]; }, null);
    })();

    var ReferenceValuesService = /** @class */ (function () {
        function ReferenceValuesService(http, appSettingsService, refValuesQuery, refValuesStore, logger) {
            this.http = http;
            this.appSettingsService = appSettingsService;
            this.refValuesQuery = refValuesQuery;
            this.refValuesStore = refValuesStore;
            this.logger = logger;
            this.className = 'ReferenceValuesService';
            this.requestsInFlight = new Map();
        }
        //
        // Get a single string value from References
        //
        ReferenceValuesService.prototype.getValue = function (name, group) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.getReferenceValue(name, group).subscribe(function (reference) {
                    if (reference) {
                        observer.next(reference.value);
                    }
                    else {
                        observer.next(null);
                    }
                    observer.complete();
                });
            });
        };
        // Clear all Reference values with this name as root of key
        ReferenceValuesService.prototype.clearReferenceValue = function (clearNames) {
            var e_1, _a;
            var namesArray;
            if (Array.isArray(clearNames)) {
                namesArray = clearNames;
            }
            else {
                namesArray = [clearNames];
            }
            var _loop_1 = function (loopName) {
                var e_2, _a;
                var list = this_1.refValuesQuery.getAll({ filterBy: function (entity) { return entity.name.startsWith(loopName); } });
                try {
                    for (var list_1 = (e_2 = void 0, __values(list)), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                        var refValue = list_1_1.value;
                        this_1.refValuesStore.remove(refValue.compositeKey);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            };
            var this_1 = this;
            try {
                for (var namesArray_1 = __values(namesArray), namesArray_1_1 = namesArray_1.next(); !namesArray_1_1.done; namesArray_1_1 = namesArray_1.next()) {
                    var loopName = namesArray_1_1.value;
                    _loop_1(loopName);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (namesArray_1_1 && !namesArray_1_1.done && (_a = namesArray_1.return)) _a.call(namesArray_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        ReferenceValuesService.prototype.setReferenceValue = function (referenceValue) {
            referenceValue.compositeKey = this.getKey(referenceValue.name, '');
            this.refValuesStore.upsert(this.getKey(referenceValue.name, ''), referenceValue);
        };
        ReferenceValuesService.prototype.isExpired = function (refVal) {
            var cacheSeconds = refVal.cacheSeconds || 31556952; // Default to a year
            var nowDate = new Date();
            var expires = new Date(refVal.whenStored);
            expires.setSeconds(expires.getSeconds() + cacheSeconds);
            return nowDate > expires;
        };
        //
        // Get a complex ReferenceValue (May include multiple values)
        //
        ReferenceValuesService.prototype.getReferenceValue = function (name, seed, childDepth) {
            var _this = this;
            if (seed === void 0) { seed = ''; }
            if (childDepth === void 0) { childDepth = 0; }
            if (this.refValuesQuery.hasEntity(this.getKey(name, seed))) {
                var cacheValue = this.refValuesQuery.getEntity(this.getKey(name, seed));
                if (this.isExpired(cacheValue)) {
                    // Expired cache value. Go get a new one
                    return this.downloadRefValue(name, seed);
                }
                // If we get one from Cache, thats handy to use
                this.logger.info("Reference Values From Cache " + name + "::" + seed);
                return new rxjs.Observable(function (observer) {
                    observer.next(_this.refValuesQuery.getEntity(_this.getKey(name, seed)));
                    observer.complete();
                });
            }
            else if (childDepth > 0) {
                var refValue = this.refValuesQuery.getEntity(this.getKey(name, ''));
                if (refValue) {
                    var parentRef = refValue.referenceValueItems.find(function (parent) { return parent.value === seed; });
                    if (parentRef) {
                        var clone_1 = Object.assign({}, refValue);
                        clone_1.referenceValueItems = parentRef.referenceValueItems;
                        return new rxjs.Observable(function (observer) {
                            observer.next(clone_1);
                            observer.complete();
                        });
                    }
                }
            }
            else {
                return this.downloadRefValue(name, seed);
            }
        };
        ReferenceValuesService.prototype.downloadRefValue = function (name, seed) {
            var _this = this;
            // Nothing in the Cache
            if (this.requestsInFlight.has(this.getKey(name, seed))) {
                // We have already asked for this, return our existing Observable
                return this.requestsInFlight.get(this.getKey(name, seed));
            }
            else {
                var wrapper = new rxjs.Observable(function (observer) {
                    // Call HTTP Here
                    _this.logger.info("Reference Values From HTTP " + name + "::" + seed);
                    var httpRequest = _this.http
                        .get(_this.appSettingsService.getValue(models.AppSettings.apiHome) + "/api/v1/referencevalues?name=" + name + "&seed=" + seed)
                        .pipe(operators.timeout(20000), operators.retry(3));
                    httpRequest.subscribe(function (value) {
                        value.compositeKey = _this.getKey(name, seed);
                        value.whenStored = new Date();
                        _this.refValuesStore.upsert(_this.getKey(name, seed), value);
                        _this.requestsInFlight.delete(_this.getKey(name, seed));
                        observer.next(value);
                        observer.complete();
                    }, function (err) {
                        // Error here. If we have a valid value, respond with that
                        if (_this.refValuesQuery.hasEntity(_this.getKey(name, seed))) {
                            _this.logger.info("Reference Values From HTTP Failed using last Cache " + name + "::" + seed);
                            observer.next(_this.refValuesQuery.getEntity(_this.getKey(name, seed)));
                            observer.complete();
                        }
                        else {
                            observer.error(err);
                        }
                    });
                });
                this.requestsInFlight.set(this.getKey(name, seed), wrapper);
                return wrapper;
            }
        };
        ReferenceValuesService.prototype.getKey = function (name, seed) {
            return name + "::" + seed;
        };
        return ReferenceValuesService;
    }());
    ReferenceValuesService.ɵfac = function ReferenceValuesService_Factory(t) { return new (t || ReferenceValuesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(AppSettingsService), i0.ɵɵinject(ReferenceValuesQuery), i0.ɵɵinject(exports.ReferenceValuesStore), i0.ɵɵinject(LoggingService)); };
    ReferenceValuesService.ɵprov = i0.ɵɵdefineInjectable({ token: ReferenceValuesService, factory: ReferenceValuesService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(ReferenceValuesService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1.HttpClient }, { type: AppSettingsService }, { type: ReferenceValuesQuery }, { type: exports.ReferenceValuesStore }, { type: LoggingService }]; }, null);
    })();

    var SpinnerService = /** @class */ (function () {
        function SpinnerService(broadcastService) {
            this.broadcastService = broadcastService;
        }
        SpinnerService.prototype.showSpinner = function (message) {
            if (message === void 0) { message = null; }
            this.broadcastService.broadcast("SHOW_SPINNER" /* SHOW_SPINNER */, message);
        };
        SpinnerService.prototype.hideSpinner = function () {
            this.broadcastService.broadcast("HIDE_SPINNER" /* HIDE_SPINNER */);
        };
        return SpinnerService;
    }());
    SpinnerService.ɵfac = function SpinnerService_Factory(t) { return new (t || SpinnerService)(i0.ɵɵinject(BroadcastService)); };
    SpinnerService.ɵprov = i0.ɵɵdefineInjectable({ token: SpinnerService, factory: SpinnerService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(SpinnerService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return [{ type: BroadcastService }]; }, null);
    })();

    var UserAuthenticationBase = /** @class */ (function () {
        function UserAuthenticationBase() {
        }
        return UserAuthenticationBase;
    }());
    UserAuthenticationBase.ɵfac = function UserAuthenticationBase_Factory(t) { return new (t || UserAuthenticationBase)(); };
    UserAuthenticationBase.ɵprov = i0.ɵɵdefineInjectable({ token: UserAuthenticationBase, factory: UserAuthenticationBase.ɵfac });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(UserAuthenticationBase, [{
                type: i0.Injectable
            }], null, null);
    })();

    var UserAuthenticationService = /** @class */ (function () {
        function UserAuthenticationService(logger, http, authStore, authQuery, appSettingsService, router) {
            this.logger = logger;
            this.http = http;
            this.authStore = authStore;
            this.authQuery = authQuery;
            this.appSettingsService = appSettingsService;
            this.router = router;
            this.tokenStorageKey = 'USER_TOKEN';
            logger.info('UserAuthorisationService - Constructor');
            this.jwtHelper = new angularJwt.JwtHelperService({});
            this.loadUserTokenFromStorage();
        }
        UserAuthenticationService.prototype.filterItemsByRole = function (authItems) {
            var _this = this;
            var returnItems = [];
            if (authItems) {
                authItems.forEach(function (authItem) {
                    if (_this.checkByRoles(authItem)) {
                        returnItems.push(authItem);
                    }
                });
            }
            return returnItems;
        };
        // Check if user passes muster
        UserAuthenticationService.prototype.checkByRoles = function (authItem) {
            // No roles = always okay
            if (!authItem.roles) {
                return true;
            }
            var isAllowed = false;
            var user = this.authQuery.getUser();
            if (user.role) {
                user.role.forEach(function (role) {
                    authItem.roles.forEach(function (authRole) {
                        if (role === authRole) {
                            isAllowed = true;
                        }
                    });
                });
            }
            return isAllowed;
        };
        UserAuthenticationService.prototype.completeAuthentication = function () { };
        UserAuthenticationService.prototype.isAuthenticated = function () {
            var token = this.getToken();
            var tokenDetails = this.jwtHelper.decodeToken(token);
            return tokenDetails && !this.jwtHelper.isTokenExpired(token);
        };
        UserAuthenticationService.prototype.authorizationHeaderValue = function () { };
        UserAuthenticationService.prototype.name = function () {
            return 'Hello World';
        };
        UserAuthenticationService.prototype.forceLogon = function (returnUrl) {
            this.logoff();
            this.router.navigate(['login'], { queryParams: { returnUrl: returnUrl } });
        };
        UserAuthenticationService.prototype.getToken = function () {
            return this.authQuery.getValue().token;
        };
        UserAuthenticationService.prototype.loadUserTokenFromStorage = function () {
            var savedToken = localStorage.getItem(this.tokenStorageKey); // Loaded from Saved Storage
            if (savedToken !== null) {
                // New AuthUser Based on Token
                if (!this.jwtHelper.isTokenExpired(savedToken)) {
                    // If all Good
                    this.logger.info('Token from Storage - Token Loaded and not Expired');
                    this.setToken(savedToken);
                }
                else {
                    // Expired Token
                    this.logger.info('Token from Storage - Token Expired - Not using');
                }
            }
            else {
                // No token
                this.logger.info('Token from Storage - No Token Available');
            }
        };
        UserAuthenticationService.prototype.setToken = function (token) {
            // New AuthUser Based on Token
            var tokenDetails = this.jwtHelper.decodeToken(token);
            var newUser = new models.BasicUser();
            if (tokenDetails['firstName'] && tokenDetails['lastName']) {
                newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];
            }
            if (tokenDetails['sub']) {
                newUser.userId = tokenDetails['sub'];
            }
            if (tokenDetails['role']) {
                newUser.role = tokenDetails['role'];
            }
            if (tokenDetails['email']) {
                newUser.email = tokenDetails['email'];
            }
            this.authStore.update({ token: token, userDetails: newUser, authenticated: true });
        };
        UserAuthenticationService.prototype.logon = function (userName, password) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                var body = new i1.HttpParams();
                body = body
                    .append('username', userName)
                    .append('password', password)
                    .append('grant_type', 'password')
                    .append('client_id', _this.appSettingsService.getValue(models.AppSettings.authClientId))
                    .append('client_secret', _this.appSettingsService.getValue(models.AppSettings.authClientSecret))
                    .append('scope', _this.appSettingsService.getValue(models.AppSettings.authScope) + ' offline_access openid');
                _this.http
                    .post(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + _this.appSettingsService.getValue(models.AppSettings.authTokenEndpoint), body, {
                    headers: new i1.HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
                })
                    .pipe(operators.timeout(30000))
                    .subscribe(function (response) {
                    // chek if user is is in 'user' role
                    var tokenDetails = _this.jwtHelper.decodeToken(response['access_token']);
                    var requiredRole = _this.appSettingsService.getValue(models.AppSettings.authRequiredRole);
                    if (tokenDetails['role']) {
                        if (requiredRole && !tokenDetails['role'].includes(requiredRole)) {
                            observer.error('Unauthorised');
                        }
                        else {
                            // Save Token in Storage if needed
                            if (_this.appSettingsService.getValue(models.AppSettings.authSaveinLocalStorage)) {
                                localStorage.setItem(_this.tokenStorageKey, response['access_token']);
                            }
                            // Load our details from this token
                            _this.setToken(response['access_token']);
                            if (response['refresh_token']) {
                                // this.refreshToken = response['refresh_token'];
                            }
                            observer.next(null);
                            observer.complete();
                        }
                    }
                }, function (err) {
                    observer.error(err);
                });
            });
        };
        UserAuthenticationService.prototype.logoff = function () {
            if (this.appSettingsService.getValue(models.AppSettings.authSaveinLocalStorage)) {
                // Remove token from Local Storage
                localStorage.removeItem(this.tokenStorageKey);
            }
            // Clear Akita Stores
            akita.resetStores({ exclude: ['appSettings'] });
            this.authStore.update({ token: null, userDetails: null, authenticated: false });
        };
        return UserAuthenticationService;
    }());
    UserAuthenticationService.ɵfac = function UserAuthenticationService_Factory(t) { return new (t || UserAuthenticationService)(i0.ɵɵinject(LoggingService), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(exports.AuthenticationStore), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(AppSettingsService), i0.ɵɵinject(i6.Router)); };
    UserAuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ token: UserAuthenticationService, factory: UserAuthenticationService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(UserAuthenticationService, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return [{ type: LoggingService }, { type: i1.HttpClient }, { type: exports.AuthenticationStore }, { type: UserAuthenticationQuery }, { type: AppSettingsService }, { type: i6.Router }]; }, null);
    })();

    var OAuthService = /** @class */ (function () {
        function OAuthService(authStore, authQuery, appSettingsQuery) {
            var _this = this;
            this.authStore = authStore;
            this.authQuery = authQuery;
            this.appSettingsQuery = appSettingsQuery;
            this.jwtHelper = new angularJwt.JwtHelperService({});
            appSettingsQuery
                .selectEntity(models.AppSettings.authOAuthSettings)
                .subscribe(function (settings) {
                _this.manager = new oidcClient.UserManager(settings.value);
                _this.manager.getUser().then(function (user) {
                    if (user) {
                        _this.user = user;
                        _this.setToken(_this.user.access_token);
                    }
                });
            });
        }
        OAuthService.prototype.filterItemsByRole = function (authItems) {
            var _this = this;
            var returnItems = [];
            if (authItems) {
                authItems.forEach(function (authItem) {
                    if (_this.checkByRoles(authItem)) {
                        returnItems.push(authItem);
                    }
                });
            }
            return returnItems;
        };
        // Check if user passes muster
        OAuthService.prototype.checkByRoles = function (authItem) {
            // No roles = always okay
            if (!authItem.roles) {
                return true;
            }
            var isAllowed = false;
            var user = this.authQuery.getUser();
            if (user.role) {
                user.role.forEach(function (role) {
                    authItem.roles.forEach(function (authRole) {
                        if (role === authRole) {
                            isAllowed = true;
                        }
                    });
                });
            }
            return isAllowed;
        };
        OAuthService.prototype.getToken = function () {
            return this.user.access_token;
        };
        OAuthService.prototype.forceLogon = function () {
            this.logon();
        };
        OAuthService.prototype.logon = function (userName, password) {
            if (userName === void 0) { userName = ''; }
            if (password === void 0) { password = ''; }
            return this.manager.signinRedirect();
        };
        OAuthService.prototype.logoff = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.manager.signoutRedirect()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        OAuthService.prototype.completeAuthentication = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.manager.signinRedirectCallback()];
                        case 1:
                            _a.user = _b.sent();
                            this.setToken(this.user.access_token);
                            return [2 /*return*/];
                    }
                });
            });
        };
        OAuthService.prototype.isAuthenticated = function () {
            var _this = this;
            this.manager.getUser().then(function (user) {
                _this.user = user;
            });
            return this.user != null && !this.user.expired;
        };
        OAuthService.prototype.authorizationHeaderValue = function () {
            return this.user.token_type + " " + this.user.access_token;
        };
        OAuthService.prototype.name = function () {
            return this.user != null ? this.user.profile.name : '';
        };
        OAuthService.prototype.setToken = function (token) {
            // New AuthUser Based on Token
            var tokenDetails = this.jwtHelper.decodeToken(token);
            var newUser = new models.BasicUser();
            if (tokenDetails['name']) {
                newUser.name = tokenDetails['name'];
            }
            else if (tokenDetails['firstName'] && tokenDetails['lastName']) {
                newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];
            }
            if (tokenDetails['role']) {
                newUser.role = tokenDetails['role'];
            }
            if (tokenDetails['email']) {
                newUser.userId = tokenDetails['email'];
                newUser.email = tokenDetails['email'];
            }
            this.authStore.update({
                token: token,
                userDetails: newUser,
                authenticated: true,
            });
        };
        return OAuthService;
    }());
    OAuthService.ɵfac = function OAuthService_Factory(t) { return new (t || OAuthService)(i0.ɵɵinject(exports.AuthenticationStore), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(AppSettingsQuery)); };
    OAuthService.ɵprov = i0.ɵɵdefineInjectable({ token: OAuthService, factory: OAuthService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(OAuthService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return [{ type: exports.AuthenticationStore }, { type: UserAuthenticationQuery }, { type: AppSettingsQuery }]; }, null);
    })();

    exports.UserPreferencesStore = /** @class */ (function (_super) {
        __extends(UserPreferencesStore, _super);
        function UserPreferencesStore() {
            var _this = _super.call(this, { isInitialised: false }) || this;
            console.log('UserPreferencesStore Constructor');
            return _this;
        }
        return UserPreferencesStore;
    }(akita.EntityStore));
    exports.UserPreferencesStore.ɵfac = function UserPreferencesStore_Factory(t) { return new (t || exports.UserPreferencesStore)(); };
    exports.UserPreferencesStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.UserPreferencesStore, factory: exports.UserPreferencesStore.ɵfac, providedIn: 'root' });
    exports.UserPreferencesStore = __decorate([
        akita.StoreConfig({ name: 'userPreferences', idKey: 'name' })
    ], exports.UserPreferencesStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.UserPreferencesStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var UserPreferencesQuery = /** @class */ (function (_super) {
        __extends(UserPreferencesQuery, _super);
        function UserPreferencesQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            _this.isInitialised$ = _this.select(function (state) { return state.isInitialised; });
            return _this;
        }
        return UserPreferencesQuery;
    }(akita.QueryEntity));
    UserPreferencesQuery.ɵfac = function UserPreferencesQuery_Factory(t) { return new (t || UserPreferencesQuery)(i0.ɵɵinject(exports.UserPreferencesStore)); };
    UserPreferencesQuery.ɵprov = i0.ɵɵdefineInjectable({ token: UserPreferencesQuery, factory: UserPreferencesQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(UserPreferencesQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.UserPreferencesStore }]; }, null);
    })();

    var UserPreferencesService = /** @class */ (function () {
        function UserPreferencesService(http, authQuery, appSettingsQuery, logger, userPrefsStore, userPrefsQuery, appSettings) {
            var _this = this;
            this.http = http;
            this.authQuery = authQuery;
            this.appSettingsQuery = appSettingsQuery;
            this.logger = logger;
            this.userPrefsStore = userPrefsStore;
            this.userPrefsQuery = userPrefsQuery;
            this.appSettings = appSettings;
            this.className = 'UserPreferencesService';
            this.prefix = 'preference_';
            this.storageKey = 'UserPreferences';
            this.valuesDownloaded = false;
            this.definitionsDownloaded = false;
            this.httpInFlight = 0;
            // Wait for settings, then load from server
            rxjs.combineLatest([this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(models.AppSettings.apiHome)]).subscribe(function (_a) {
                var _b = __read(_a, 2), authenticated = _b[0], apiHome = _b[1];
                if (authenticated && apiHome && !_this.valuesDownloaded && !_this.definitionsDownloaded) {
                    _this.apiHome = apiHome.value;
                    if (!_this.httpInFlight) {
                        // Load User Prefs from Localstorage
                        _this.loadFromLocal();
                        // Load Pref Defs from server
                        _this.getDefinitions();
                        // Load User Prefs from Server
                        _this.getValues();
                    }
                }
                else if (!authenticated) {
                    // Clear Here as we logoff
                    _this.clearValues();
                }
            });
        }
        UserPreferencesService.prototype.clearValues = function () {
            this.userPrefsStore.remove();
            // Save to LocalStorage
            localStorage.removeItem(this.storageKey);
        };
        UserPreferencesService.prototype.deleteValue = function (name) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.delete(_this.appSettings.getValue(models.AppSettings.apiHome) + "/api/v1/userpreferencevalue/" + name).subscribe(function () {
                    // Remove and tell the world
                    _this.userPrefsStore.remove(name);
                    localStorage.removeItem(_this.storageKey);
                    _this.saveToLocal();
                    observer.next();
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            });
        };
        UserPreferencesService.prototype.getValues = function () {
            var _this = this;
            // Load values from Server
            this.httpInFlight++;
            this.http.get(this.appSettings.getValue(models.AppSettings.apiHome) + "/api/v1/userpreferencevalue").subscribe(function (prefValues) {
                if (prefValues) {
                    prefValues.forEach(function (prefValue) {
                        _this.userPrefsStore.upsert(prefValue.name, prefValue);
                    });
                    _this.userPrefsStore.setLoading(false);
                    _this.httpInFlight--;
                    _this.valuesDownloaded = true;
                }
            }, function (err) {
                _this.httpInFlight--;
                _this.logger.error(err, _this.className, true);
            });
        };
        UserPreferencesService.prototype.setValue = function (key, value) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.post(_this.appSettings.getValue(models.AppSettings.apiHome) + "/api/v1/userpreferencevalue", { name: key, value: value }).subscribe(function () {
                    var existingEntity = _this.userPrefsQuery.getEntity(key);
                    var newEntity = new models.UserPreferenceValue();
                    if (existingEntity) {
                        newEntity = JSON.parse(JSON.stringify(existingEntity));
                    }
                    else {
                        newEntity.name = key;
                        newEntity.userId = _this.authQuery.getValue().userDetails.userId;
                    }
                    newEntity.value = value;
                    _this.userPrefsStore.upsert(key, newEntity);
                    observer.next();
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            });
        };
        UserPreferencesService.prototype.getDefinitions = function () {
            var _this = this;
            this.httpInFlight++;
            this.http.get(this.appSettings.getValue(models.AppSettings.apiHome) + "/api/v1/UserPreferenceDefinition").subscribe(function (prefDefinitions) {
                if (prefDefinitions && prefDefinitions.length > 0) {
                    var defns_1 = [];
                    prefDefinitions.forEach(function (definition) {
                        defns_1.push(definition);
                    });
                    _this.httpInFlight--;
                    _this.definitionsDownloaded = true;
                    _this.userPrefsStore.update({ preferenceDefinitions: defns_1 });
                }
            }, function (err) {
                _this.httpInFlight--;
            });
        };
        UserPreferencesService.prototype.loadFromLocal = function () {
            var stored = localStorage.getItem(this.storageKey);
            if (stored) {
                var map = JSON.parse(stored);
                if (map && map.length > 0) {
                    map.forEach(function (value) {
                        // this.userPrefsStore.upsert(value.name, value.value);
                    });
                }
            }
        };
        UserPreferencesService.prototype.saveToLocal = function () {
            // Save to LocalStorage
            var serial = JSON.stringify(this.userPrefsQuery.getValue().entities);
            localStorage.setItem(this.storageKey, serial);
        };
        return UserPreferencesService;
    }());
    UserPreferencesService.ɵfac = function UserPreferencesService_Factory(t) { return new (t || UserPreferencesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(LoggingService), i0.ɵɵinject(exports.UserPreferencesStore), i0.ɵɵinject(UserPreferencesQuery), i0.ɵɵinject(AppSettingsService)); };
    UserPreferencesService.ɵprov = i0.ɵɵdefineInjectable({ token: UserPreferencesService, factory: UserPreferencesService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(UserPreferencesService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1.HttpClient }, { type: UserAuthenticationQuery }, { type: AppSettingsQuery }, { type: LoggingService }, { type: exports.UserPreferencesStore }, { type: UserPreferencesQuery }, { type: AppSettingsService }]; }, null);
    })();

    exports.WidgetStore = /** @class */ (function (_super) {
        __extends(WidgetStore, _super);
        function WidgetStore() {
            var _this = _super.call(this) || this;
            console.log('WidgetStore Constructor');
            return _this;
        }
        return WidgetStore;
    }(akita.EntityStore));
    exports.WidgetStore.ɵfac = function WidgetStore_Factory(t) { return new (t || exports.WidgetStore)(); };
    exports.WidgetStore.ɵprov = i0.ɵɵdefineInjectable({ token: exports.WidgetStore, factory: exports.WidgetStore.ɵfac, providedIn: 'root' });
    exports.WidgetStore = __decorate([
        akita.StoreConfig({ name: 'widget', idKey: 'name' })
    ], exports.WidgetStore);
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(exports.WidgetStore, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return []; }, null);
    })();

    var WidgetQuery = /** @class */ (function (_super) {
        __extends(WidgetQuery, _super);
        function WidgetQuery(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            return _this;
        }
        return WidgetQuery;
    }(akita.QueryEntity));
    WidgetQuery.ɵfac = function WidgetQuery_Factory(t) { return new (t || WidgetQuery)(i0.ɵɵinject(exports.WidgetStore)); };
    WidgetQuery.ɵprov = i0.ɵɵdefineInjectable({ token: WidgetQuery, factory: WidgetQuery.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(WidgetQuery, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: exports.WidgetStore }]; }, null);
    })();

    var WidgetService = /** @class */ (function () {
        function WidgetService(http, widgetStore, widgetQuery, appSettingsQuery, authQuery, log, rolesService) {
            var _this = this;
            this.http = http;
            this.widgetStore = widgetStore;
            this.widgetQuery = widgetQuery;
            this.appSettingsQuery = appSettingsQuery;
            this.authQuery = authQuery;
            this.log = log;
            this.rolesService = rolesService;
            this.className = 'core.WidgetService';
            // First Time load away
            this.widgetStore.setLoading(false);
            // Wait for settings, then load from server
            rxjs.combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(models.AppSettings.apiHome)).subscribe(function (_a) {
                var _b = __read(_a, 2), authenticated = _b[0], apiHome = _b[1];
                if (authenticated && apiHome) {
                    _this.apiHome = apiHome.value;
                    _this.widgetQuery
                        .selectLoading()
                        .pipe(operators.take(1))
                        .subscribe(function (loading) {
                        if (!loading) {
                            _this.downloadWidgetItems();
                        }
                    });
                }
                else if (!authenticated) {
                    _this.widgetStore.remove();
                }
            });
        }
        WidgetService.prototype.downloadWidgetItems = function () {
            var _this = this;
            // Mark loading status
            this.widgetStore.setLoading(true);
            this.http
                .get(this.apiHome + '/api/v1/widgets')
                .pipe(operators.finalize(function () {
                _this.widgetStore.setLoading(false);
            }))
                .subscribe(function (widgetItems) {
                _this.widgetStore.add(widgetItems);
            });
        };
        return WidgetService;
    }());
    WidgetService.ɵfac = function WidgetService_Factory(t) { return new (t || WidgetService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(exports.WidgetStore), i0.ɵɵinject(WidgetQuery), i0.ɵɵinject(AppSettingsQuery), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(LoggingService), i0.ɵɵinject(RolesService)); };
    WidgetService.ɵprov = i0.ɵɵdefineInjectable({ token: WidgetService, factory: WidgetService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(WidgetService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: i1.HttpClient }, { type: exports.WidgetStore }, { type: WidgetQuery }, { type: AppSettingsQuery }, { type: UserAuthenticationQuery }, { type: LoggingService }, { type: RolesService }]; }, null);
    })();

    var UserService = /** @class */ (function () {
        function UserService(http, appSettingsService, authQuery, log, rolesService) {
            this.http = http;
            this.appSettingsService = appSettingsService;
            this.authQuery = authQuery;
            this.log = log;
            this.rolesService = rolesService;
            this.className = 'core.UserService';
        }
        UserService.prototype.getUsers = function () {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.get(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users");
            }).pipe(operators.timeout(30000));
        };
        UserService.prototype.createUser = function (user) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.post(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users", user);
            }).pipe(operators.timeout(30000));
        };
        UserService.prototype.deleteUser = function (userId) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.delete(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users/" + userId);
            }).pipe(operators.timeout(30000));
        };
        UserService.prototype.changePassword = function (changePasswordModel) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.post(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users/changePassword", changePasswordModel)
                    .pipe(operators.timeout(30000))
                    .subscribe(function (response) {
                    observer.next(null);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            });
        };
        UserService.prototype.setPassword = function (changePasswordModel) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.post(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users/setPassword", changePasswordModel)
                    .pipe(operators.timeout(30000))
                    .subscribe(function (response) {
                    observer.next(null);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            });
        };
        UserService.prototype.resetPassword = function (userId) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.get(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users/resetPassword/" + userId);
            }).pipe(operators.timeout(30000));
        };
        UserService.prototype.getUser = function (userId) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.get(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users/" + userId);
            }).pipe(operators.timeout(30000));
        };
        UserService.prototype.saveUser = function (user) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this.http.post(_this.appSettingsService.getValue(models.AppSettings.apiAuth) + "/api/v1/users/", user);
            }).pipe(operators.timeout(30000));
        };
        return UserService;
    }());
    UserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(AppSettingsService), i0.ɵɵinject(UserAuthenticationQuery), i0.ɵɵinject(LoggingService), i0.ɵɵinject(RolesService)); };
    UserService.ɵprov = i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(UserService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], function () { return [{ type: i1.HttpClient }, { type: AppSettingsService }, { type: UserAuthenticationQuery }, { type: LoggingService }, { type: RolesService }]; }, null);
    })();

    var UserServiceBase = /** @class */ (function () {
        function UserServiceBase() {
        }
        return UserServiceBase;
    }());

    var SoftwareVersion = /** @class */ (function () {
        function SoftwareVersion() {
        }
        return SoftwareVersion;
    }());
    var VersionsService = /** @class */ (function () {
        function VersionsService(logging) {
            this.logging = logging;
            this.versions = [];
        }
        VersionsService.prototype.addVersion = function (module, version, isAppModule) {
            if (isAppModule === void 0) { isAppModule = false; }
            this.logging.info("Loading Module " + module + " Version " + version + " IsAppModule " + isAppModule);
            this.versions.push({
                module: module,
                version: version,
                isAppModule: isAppModule
            });
        };
        VersionsService.prototype.getVersions = function () {
            return this.versions;
        };
        VersionsService.prototype.getVersion = function (moduleName) {
            var foundModule = this.versions.find(function (v) { return v.module === moduleName; });
            if (foundModule) {
                return foundModule.version;
            }
            else {
                return null;
            }
        };
        return VersionsService;
    }());
    VersionsService.ɵfac = function VersionsService_Factory(t) { return new (t || VersionsService)(i0.ɵɵinject(LoggingService)); };
    VersionsService.ɵprov = i0.ɵɵdefineInjectable({ token: VersionsService, factory: VersionsService.ɵfac, providedIn: 'root' });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(VersionsService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], function () { return [{ type: LoggingService }]; }, null);
    })();

    var FillHeightDirective = /** @class */ (function () {
        function FillHeightDirective(el, logger) {
            this.el = el;
            this.logger = logger;
            this.footerElement = null;
            this.fixedHeight = 0;
            this.relativeToParentPercent = 0;
        }
        FillHeightDirective.prototype.ngAfterViewInit = function () {
            this.calculateAndSetElementHeight();
        };
        FillHeightDirective.prototype.onResize = function (event) {
            this.calculateAndSetElementHeight();
        };
        FillHeightDirective.prototype.calculateAndSetElementHeight = function () {
            if (this.relativeToParentPercent > 0) {
                var parentHeight = this.el.nativeElement.parentNode.parentNode
                    .parentNode.parentNode.parentNode.parentNode.offsetHeight;
                if (parentHeight > 0) {
                    this.el.nativeElement.style.height = parentHeight * (this.relativeToParentPercent / 100) + "px";
                }
            }
            else if (this.fixedHeight > 0) {
                this.el.nativeElement.style.height = this.fixedHeight + "px";
            }
            else {
                this.el.nativeElement.style.overflow = 'auto';
                var windowHeight = window.innerHeight;
                if (windowHeight === 0) {
                    this.logger.error('FillHeight: Window reported zero height');
                    windowHeight = 800;
                }
                var elementOffsetTop = this.getElementOffsetTop();
                var elementMarginBottom = this.el.nativeElement.style.marginBottom;
                var footerElementMargin = this.getfooterElementMargin();
                this.el.nativeElement.style.height = windowHeight - footerElementMargin - elementOffsetTop - 16 + "px";
            }
        };
        FillHeightDirective.prototype.getElementOffsetTop = function () {
            return this.el.nativeElement.getBoundingClientRect().top;
        };
        FillHeightDirective.prototype.getfooterElementMargin = function () {
            if (!this.footerElement) {
                return 0;
            }
            var footerStyle = window.getComputedStyle(this.footerElement);
            return parseInt(footerStyle.height, 10);
        };
        return FillHeightDirective;
    }());
    FillHeightDirective.ɵfac = function FillHeightDirective_Factory(t) { return new (t || FillHeightDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LoggingService)); };
    FillHeightDirective.ɵdir = i0.ɵɵdefineDirective({ type: FillHeightDirective, selectors: [["", "ngsFillHeight", ""]], hostBindings: function FillHeightDirective_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0.ɵɵlistener("resize", function FillHeightDirective_resize_HostBindingHandler($event) { return ctx.onResize($event); }, false, i0.ɵɵresolveWindow);
            }
        }, inputs: { footerElement: "footerElement", fixedHeight: "fixedHeight", relativeToParentPercent: "relativeToParentPercent" } });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(FillHeightDirective, [{
                type: i0.Directive,
                args: [{ selector: '[ngsFillHeight]' }]
            }], function () { return [{ type: i0.ElementRef }, { type: LoggingService }]; }, { footerElement: [{
                    type: i0.Input
                }], fixedHeight: [{
                    type: i0.Input
                }], relativeToParentPercent: [{
                    type: i0.Input
                }], onResize: [{
                    type: i0.HostListener,
                    args: ['window:resize', ['$event']]
                }] });
    })();

    var ButtonColourPipe = /** @class */ (function () {
        function ButtonColourPipe() {
        }
        ButtonColourPipe.prototype.transform = function (inputColor) {
            var returnColor;
            switch (inputColor) {
                case "primary" /* primary */: {
                    returnColor = 'p-button-primary';
                    break;
                }
                case "secondary" /* secondary */: {
                    returnColor = 'p-button-secondary';
                    break;
                }
                case "success" /* success */: {
                    returnColor = 'p-button-success';
                    break;
                }
                case "info" /* info */: {
                    returnColor = 'p-button-info';
                    break;
                }
                case "warning" /* warning */: {
                    returnColor = 'p-button-warning';
                    break;
                }
                case "danger" /* danger */: {
                    returnColor = 'p-button-danger';
                    break;
                }
                case "blue" /* blue */: {
                    returnColor = 'blue-grey-btn';
                    break;
                }
                case "cyan" /* cyan */: {
                    returnColor = 'cyan-btn';
                    break;
                }
                case "teal" /* teal */: {
                    returnColor = 'teal-btn';
                    break;
                }
                case "orange" /* orange */: {
                    returnColor = 'orange-btn';
                    break;
                }
                case "deeporange" /* deeporange */: {
                    returnColor = 'deep-orange-btn';
                    break;
                }
                case "purple" /* purple */: {
                    returnColor = 'purple-btn';
                    break;
                }
                case "indigo" /* indigo */: {
                    returnColor = 'indigo-btn';
                    break;
                }
                case "pink" /* pink */: {
                    returnColor = 'pink-btn';
                    break;
                }
                default: {
                    returnColor = 'p-button-info';
                }
            }
            return returnColor;
        };
        return ButtonColourPipe;
    }());
    ButtonColourPipe.ɵfac = function ButtonColourPipe_Factory(t) { return new (t || ButtonColourPipe)(); };
    ButtonColourPipe.ɵpipe = i0.ɵɵdefinePipe({ name: "buttonColour", type: ButtonColourPipe, pure: true });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(ButtonColourPipe, [{
                type: i0.Pipe,
                args: [{ name: 'buttonColour' }]
            }], null, null);
    })();

    var dateFormat = dateFormatimp__namespace;
    var NgsDatePipe = /** @class */ (function () {
        function NgsDatePipe(appSettings) {
            this.appSettings = appSettings;
        }
        NgsDatePipe.prototype.transform = function (inputDate) {
            if (inputDate) {
                // If a string gets through, convert to date object
                if (typeof inputDate === 'string' || inputDate instanceof String) {
                    inputDate = new Date(inputDate);
                }
                var userTimezoneOffset = inputDate.getTimezoneOffset() * 60000;
                var zuluDate = new Date(inputDate.getTime() + userTimezoneOffset);
                var format = this.appSettings.getEntity(models.AppSettings.dateFormat);
                if (format && format.value) {
                    return dateFormat(zuluDate, format.value);
                }
                else {
                    return dateFormat(zuluDate, 'default');
                }
            }
            else {
                return '';
            }
        };
        return NgsDatePipe;
    }());
    NgsDatePipe.ɵfac = function NgsDatePipe_Factory(t) { return new (t || NgsDatePipe)(i0.ɵɵdirectiveInject(AppSettingsQuery)); };
    NgsDatePipe.ɵpipe = i0.ɵɵdefinePipe({ name: "ngsDate", type: NgsDatePipe, pure: true });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NgsDatePipe, [{
                type: i0.Pipe,
                args: [{ name: 'ngsDate' }]
            }], function () { return [{ type: AppSettingsQuery }]; }, null);
    })();

    var dateFormat$1 = dateFormatimp__namespace;
    var NgsDateTimePipe = /** @class */ (function () {
        function NgsDateTimePipe(appSettings) {
            this.appSettings = appSettings;
        }
        NgsDateTimePipe.prototype.transform = function (inputDate) {
            if (inputDate) {
                // If a string gets through, convert to date object
                if (typeof inputDate === 'string' || inputDate instanceof String) {
                    inputDate = new Date(inputDate);
                }
                var userTimezoneOffset = inputDate.getTimezoneOffset() * 60000;
                var zuluDate = new Date(inputDate.getTime() + userTimezoneOffset);
                var format = this.appSettings.getEntity(models.AppSettings.dateTimeFormat);
                if (format && format.value) {
                    return dateFormat$1(zuluDate, format.value);
                }
                else {
                    return dateFormat$1(zuluDate, 'default');
                }
            }
            else {
                return '';
            }
        };
        return NgsDateTimePipe;
    }());
    NgsDateTimePipe.ɵfac = function NgsDateTimePipe_Factory(t) { return new (t || NgsDateTimePipe)(i0.ɵɵdirectiveInject(AppSettingsQuery)); };
    NgsDateTimePipe.ɵpipe = i0.ɵɵdefinePipe({ name: "ngsDateTime", type: NgsDateTimePipe, pure: true });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(NgsDateTimePipe, [{
                type: i0.Pipe,
                args: [{ name: 'ngsDateTime' }]
            }], function () { return [{ type: AppSettingsQuery }]; }, null);
    })();

    var TruncateTextPipe = /** @class */ (function () {
        function TruncateTextPipe() {
        }
        TruncateTextPipe.prototype.transform = function (value, limit, trail) {
            if (limit === void 0) { limit = 40; }
            if (trail === void 0) { trail = '…'; }
            var result = value || '';
            if (value) {
                var words = value.split(/\s+/);
                if (words.length > Math.abs(limit)) {
                    if (limit < 0) {
                        limit *= -1;
                        result =
                            trail + words.slice(words.length - limit, words.length).join(' ');
                    }
                    else {
                        result = words.slice(0, limit).join(' ') + trail;
                    }
                }
            }
            return result;
        };
        return TruncateTextPipe;
    }());
    TruncateTextPipe.ɵfac = function TruncateTextPipe_Factory(t) { return new (t || TruncateTextPipe)(); };
    TruncateTextPipe.ɵpipe = i0.ɵɵdefinePipe({ name: "truncateText", type: TruncateTextPipe, pure: true });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(TruncateTextPipe, [{
                type: i0.Pipe,
                args: [{
                        name: 'truncateText'
                    }]
            }], null, null);
    })();

    var AuthoriseRoleGuard = /** @class */ (function () {
        function AuthoriseRoleGuard(authService, router, rolesService) {
            this.authService = authService;
            this.router = router;
            this.rolesService = rolesService;
        }
        AuthoriseRoleGuard.prototype.canActivate = function (route, state) {
            if (this.authService.isAuthenticated()) {
                return true;
            }
            // No authority, bye bye.
            this.authService.forceLogon(state.url);
            return false;
        };
        return AuthoriseRoleGuard;
    }());
    AuthoriseRoleGuard.ɵfac = function AuthoriseRoleGuard_Factory(t) { return new (t || AuthoriseRoleGuard)(i0.ɵɵinject(UserAuthenticationBase), i0.ɵɵinject(i6.Router), i0.ɵɵinject(RolesService)); };
    AuthoriseRoleGuard.ɵprov = i0.ɵɵdefineInjectable({ token: AuthoriseRoleGuard, factory: AuthoriseRoleGuard.ɵfac });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(AuthoriseRoleGuard, [{
                type: i0.Injectable
            }], function () { return [{ type: UserAuthenticationBase }, { type: i6.Router }, { type: RolesService }]; }, null);
    })();

    var DialogWindowComponent = /** @class */ (function () {
        function DialogWindowComponent() {
            this.closed = new i0.EventEmitter();
        }
        DialogWindowComponent.prototype.ngOnChanges = function (changes) { };
        DialogWindowComponent.prototype.ngOnDestroy = function () { };
        DialogWindowComponent.prototype.ngOnInit = function () { };
        DialogWindowComponent.prototype.cancel = function (event) {
            this.closed.emit(null);
        };
        DialogWindowComponent.prototype.save = function (event) {
        };
        return DialogWindowComponent;
    }());
    DialogWindowComponent.ɵfac = function DialogWindowComponent_Factory(t) { return new (t || DialogWindowComponent)(); };
    DialogWindowComponent.ɵcmp = i0.ɵɵdefineComponent({ type: DialogWindowComponent, selectors: [["ngs-dialog-window"]], outputs: { closed: "closed" }, features: [i0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, template: function DialogWindowComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0.ɵɵelementStart(0, "h1");
                i0.ɵɵtext(1, "Dialog Window Base Class");
                i0.ɵɵelementEnd();
            }
        }, styles: [""] });
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(DialogWindowComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'ngs-dialog-window',
                        templateUrl: 'dialogWindow.component.html',
                        styleUrls: ['dialogWindow.component.scss']
                    }]
            }], null, { closed: [{
                    type: i0.Output
                }] });
    })();

    // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!
    /* tslint:disable */
    var VERSION = {
        "dirty": true,
        "raw": "608f2a0-dirty",
        "hash": "608f2a0",
        "distance": null,
        "tag": null,
        "semver": null,
        "suffix": "608f2a0-dirty",
        "semverString": null,
        "version": "1.1.20"
    };
    /* tslint:enable */

    var CoreModule = /** @class */ (function () {
        function CoreModule(versions) {
            versions.addVersion('@ngscaffolding/core', VERSION.version);
        }
        CoreModule.forRoot = function () {
            return {
                ngModule: CoreModule
            };
        };
        return CoreModule;
    }());
    CoreModule.ɵmod = i0.ɵɵdefineNgModule({ type: CoreModule });
    CoreModule.ɵinj = i0.ɵɵdefineInjector({ factory: function CoreModule_Factory(t) { return new (t || CoreModule)(i0.ɵɵinject(VersionsService)); }, imports: [[common.CommonModule, forms.FormsModule, i1.HttpClientModule]] });
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(CoreModule, { declarations: [FillHeightDirective,
                ButtonColourPipe,
                NgsDatePipe,
                NgsDateTimePipe,
                TruncateTextPipe,
                DialogWindowComponent], imports: [common.CommonModule, forms.FormsModule, i1.HttpClientModule], exports: [ButtonColourPipe,
                NgsDatePipe,
                NgsDateTimePipe,
                TruncateTextPipe,
                FillHeightDirective,
                DialogWindowComponent] });
    })();
    /*@__PURE__*/ (function () {
        i0.ɵsetClassMetadata(CoreModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule, forms.FormsModule, i1.HttpClientModule],
                        declarations: [
                            FillHeightDirective,
                            ButtonColourPipe,
                            NgsDatePipe,
                            NgsDateTimePipe,
                            TruncateTextPipe,
                            DialogWindowComponent
                        ],
                        exports: [
                            ButtonColourPipe,
                            NgsDatePipe,
                            NgsDateTimePipe,
                            TruncateTextPipe,
                            FillHeightDirective,
                            DialogWindowComponent
                        ]
                    }]
            }], function () { return [{ type: VersionsService }]; }, null);
    })();

    /*
     * Public API Surface of core
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AppAuditService = AppAuditService;
    exports.AppSettingsQuery = AppSettingsQuery;
    exports.AppSettingsService = AppSettingsService;
    exports.AuditLogService = AuditLogService;
    exports.AuthoriseRoleGuard = AuthoriseRoleGuard;
    exports.BroadcastService = BroadcastService;
    exports.ButtonColourPipe = ButtonColourPipe;
    exports.ComponentLoaderService = ComponentLoaderService;
    exports.CoreErrorHandlerService = CoreErrorHandlerService;
    exports.CoreModule = CoreModule;
    exports.DataSourceQuery = DataSourceQuery;
    exports.DataSourceService = DataSourceService;
    exports.DialogWindowComponent = DialogWindowComponent;
    exports.FillHeightDirective = FillHeightDirective;
    exports.LoggingService = LoggingService;
    exports.MenuService = MenuService;
    exports.NgsDatePipe = NgsDatePipe;
    exports.NgsDateTimePipe = NgsDateTimePipe;
    exports.NotificationService = NotificationService;
    exports.OAuthService = OAuthService;
    exports.ReferenceValuesQuery = ReferenceValuesQuery;
    exports.ReferenceValuesService = ReferenceValuesService;
    exports.RolesQuery = RolesQuery;
    exports.RolesService = RolesService;
    exports.SoftwareVersion = SoftwareVersion;
    exports.SpinnerService = SpinnerService;
    exports.TruncateTextPipe = TruncateTextPipe;
    exports.UserAuthenticationBase = UserAuthenticationBase;
    exports.UserAuthenticationQuery = UserAuthenticationQuery;
    exports.UserAuthenticationService = UserAuthenticationService;
    exports.UserPreferencesQuery = UserPreferencesQuery;
    exports.UserPreferencesService = UserPreferencesService;
    exports.UserService = UserService;
    exports.UserServiceBase = UserServiceBase;
    exports.VersionsService = VersionsService;
    exports.WidgetQuery = WidgetQuery;
    exports.WidgetService = WidgetService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngscaffolding-core.umd.js.map
