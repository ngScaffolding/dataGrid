{"version":3,"file":"ngscaffolding-core.js","sources":["../projects/ngscaffolding/core/src/lib/services/appSettings/appSettings.store.ts","../projects/ngscaffolding/core/src/lib/services/appSettings/appSettings.query.ts","../projects/ngscaffolding/core/src/lib/services/broadcast/broadcast.service.ts","../projects/ngscaffolding/core/src/lib/services/notification/notification.service.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.store.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.query.ts","../projects/ngscaffolding/core/src/lib/services/logging/logging.service.ts","../projects/ngscaffolding/core/src/lib/services/appSettings/appSettings.service.ts","../projects/ngscaffolding/core/src/lib/services/appAudit/appAudit.service.ts","../projects/ngscaffolding/core/src/lib/services/auditLog/auditLog.store.ts","../projects/ngscaffolding/core/src/lib/services/auditLog/auditLog.query.ts","../projects/ngscaffolding/core/src/lib/services/auditLog/auditLog.service.ts","../../projects/ngscaffolding/core/src/lib/services/componentLoader.service.ts","../projects/ngscaffolding/core/src/lib/services/coreErrorHandler/coreErrorHandler.service.ts","../projects/ngscaffolding/core/src/lib/services/dataSource/dataSource.store.ts","../projects/ngscaffolding/core/src/lib/services/dataSource/dataSource.query.ts","../projects/ngscaffolding/core/src/lib/services/dataSource/dataSource.service.ts","../projects/ngscaffolding/core/src/lib/services/menu/menu.store.ts","../projects/ngscaffolding/core/src/lib/services/menu/menu.query.ts","../projects/ngscaffolding/core/src/lib/services/rolesService/roles.store.ts","../projects/ngscaffolding/core/src/lib/services/rolesService/roles.query.ts","../projects/ngscaffolding/core/src/lib/services/rolesService/roles.service.ts","../projects/ngscaffolding/core/src/lib/services/menu/menu.service.ts","../projects/ngscaffolding/core/src/lib/services/referenceValues/referenceValues.store.ts","../projects/ngscaffolding/core/src/lib/services/referenceValues/referenceValues.query.ts","../projects/ngscaffolding/core/src/lib/services/referenceValues/refrenceValues.service.ts","../projects/ngscaffolding/core/src/lib/services/spinnerService/spinner.service.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/UserAuthenticationBase.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.service.ts","../projects/ngscaffolding/core/src/lib/services/userAuthentication/userAuthentication.oauth.service.ts","../projects/ngscaffolding/core/src/lib/services/userPreferences/userPreferences.store.ts","../projects/ngscaffolding/core/src/lib/services/userPreferences/userPreferences.query.ts","../projects/ngscaffolding/core/src/lib/services/userPreferences/userPreferences.service.ts","../projects/ngscaffolding/core/src/lib/services/widgetsService/widget.store.ts","../projects/ngscaffolding/core/src/lib/services/widgetsService/widget.query.ts","../projects/ngscaffolding/core/src/lib/services/widgetsService/widget.service.ts","../projects/ngscaffolding/core/src/lib/services/userService/user.service.ts","../projects/ngscaffolding/core/src/lib/services/userService/user.service.base.ts","../projects/ngscaffolding/core/src/lib/services/versions/versions.service.ts","../../projects/ngscaffolding/core/src/lib/directives/fill-height.directive.ts","../../projects/ngscaffolding/core/src/lib/pipes/buttonColour.pipe.ts","../../projects/ngscaffolding/core/src/lib/pipes/ngsDate.pipe.ts","../../projects/ngscaffolding/core/src/lib/pipes/ngsDateTime.pipe.ts","../../projects/ngscaffolding/core/src/lib/pipes/truncateText.pipe.ts","../../projects/ngscaffolding/core/src/lib/routeGuards/authoriseRoleGuard.ts","../projects/ngscaffolding/core/src/lib/components/dialogWindow/dialogWindow.component.ts","../projects/ngscaffolding/core/src/lib/components/dialogWindow/dialogWindow.component.html","../../../projects/ngscaffolding/core/src/lib/version.ts","../../../projects/ngscaffolding/core/src/lib/core.module.ts","../../../../projects/ngscaffolding/core/src/public-api.ts","../../../../projects/ngscaffolding/core/src/ngscaffolding-core.ts"],"sourcesContent":["import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { AppSettingsValue, AppSettings } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface AppSettingsState extends EntityState<AppSettingsValue> {\r\n  isInitialised: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'appSettings', idKey: 'name' })\r\nexport class AppSettingsStore extends EntityStore<AppSettingsState, AppSettingsValue> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false });\r\n    console.log('AppSettingsStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { AppSettingsStore, AppSettingsState } from './appSettings.store';\r\nimport { AppSettingsValue } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppSettingsQuery extends QueryEntity<AppSettingsState, AppSettingsValue> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: AppSettingsStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\ninterface BroadcastEvent {\r\n  key: any;\r\n  data?: any;\r\n}\r\n\r\nexport const enum BroadcastTypes {\r\n  SHOW_MESSAGE = 'SHOW_MESSAGE',\r\n\r\n  SHOW_SPINNER = 'SHOW_SPINNER',\r\n  HIDE_SPINNER = 'HIDE_SPINNER',\r\n  CLOSE_POPUP = 'CLOSE_POPUP'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BroadcastService {\r\n  private _eventBus: Subject<BroadcastEvent>;\r\n\r\n  constructor() {\r\n    this._eventBus = new Subject<BroadcastEvent>();\r\n  }\r\n\r\n  broadcast(key: any, data?: any) {\r\n    this._eventBus.next({ key, data });\r\n  }\r\n\r\n  on<T>(key: any): Observable<T> {\r\n    return this._eventBus.pipe(\r\n        filter(event => event.key === key),\r\n        map(event => <T>event.data)\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BroadcastService, BroadcastTypes } from '../broadcast/broadcast.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationService {\r\n  constructor(private broadcast: BroadcastService) {}\r\n\r\n  showMessage(message: any) {\r\n    this.broadcast.broadcast(BroadcastTypes.SHOW_MESSAGE, message);\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store, StoreConfig } from '@datorama/akita';\r\nimport { createBasicUser, BasicUser } from '@ngscaffolding/models';\r\n\r\nexport interface AuthenticationState {\r\n  authenticated: boolean;\r\n  token: string;\r\n  refreshToken: string;\r\n  userDetails: BasicUser;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'authorisation' })\r\nexport class AuthenticationStore extends Store<AuthenticationState> {\r\n  constructor() {\r\n    super({ userDetails: createBasicUser() });\r\n    console.log('AuthenticationStore Constructor');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Query, toBoolean } from '@datorama/akita';\r\nimport { BasicUser } from '@ngscaffolding/models';\r\nimport { AuthenticationStore, AuthenticationState } from './userAuthentication.store';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UserAuthenticationQuery extends Query<AuthenticationState> {\r\n    authenticated$ = this.select(state => state.authenticated);\r\n    currentUser$ = this.select(state => state.userDetails);\r\n\r\n    constructor(protected store: AuthenticationStore) {\r\n        super(store);\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return toBoolean(this.getValue().authenticated);\r\n    }\r\n\r\n    getUserId() {\r\n        if (this.isAuthenticated() && this.getValue().userDetails) {\r\n            return this.getValue().userDetails.userId;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    getUser(): BasicUser {\r\n        return this.getValue().userDetails;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NotificationService } from '../notification/notification.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoggingService {\r\n    constructor(private notification: NotificationService, private appSettingsQuery: AppSettingsQuery,\r\n      private userQuery: UserAuthenticationQuery,\r\n      private http: HttpClient) {}\r\n\r\n  public error(err: any, methodName = '', showToast = false): void {\r\n    if (!methodName) {\r\n      console.error(`Method ${methodName}: Error ${err}`);\r\n    } else {\r\n      console.error(`Error ${err}`);\r\n    }\r\n\r\n    // TODO: Resume showing toast\r\n    if (showToast) {\r\n      this.notification.showMessage({\r\n        severity: 'error',\r\n        summary: 'Error',\r\n        detail: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  public warning(message: string, methodName = ''): void {\r\n    if (!methodName) {\r\n      console.warn(`Method ${methodName}: Warning ${message}`);\r\n    } else {\r\n      console.warn(`Warning ${message}`);\r\n    }\r\n  }\r\n\r\n  public info(message: string, methodName = '', objectInfo: any = null): void {\r\n    if (!methodName) {\r\n      // tslint:disable-next-line:no-console\r\n      console.info(`Info : ${message}`, objectInfo);\r\n    } else {\r\n      // tslint:disable-next-line:no-console\r\n      console.info(`[${methodName}] : ${message}`, objectInfo);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { AppSettings, AppSettingsValue } from '@ngscaffolding/models';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsStore } from './appSettings.store';\r\nimport { AppSettingsQuery } from './appSettings.query';\r\nimport { Observable } from 'rxjs';\r\nimport { timeout, retry } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppSettingsService {\r\n  private className = 'AppSettingsService';\r\n\r\n  public loading$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private appSettingsStore: AppSettingsStore,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private logger: LoggingService,\r\n    private http: HttpClient\r\n  ) {\r\n    console.log('AppSettingsService Constructor');\r\n  }\r\n\r\n  public setValue(name: string, value: any) {\r\n    if (this.appSettingsQuery.hasEntity(name)) {\r\n      this.appSettingsStore.update(name, { name: name, value: value });\r\n    } else {\r\n      this.appSettingsStore.add({ name: name, value: value });\r\n    }\r\n\r\n    if (name === AppSettings.apiHome) {\r\n        this.loadFromServer(value.toString());\r\n    }\r\n  }\r\n\r\n  public getValue(name: string): any {\r\n    if (this.appSettingsQuery.hasEntity(name)) {\r\n      return this.appSettingsQuery.getEntity(name).value;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private loadFromServer(apiHome: string) {\r\n    // Mark store as loading\r\n    this.appSettingsStore.setLoading(true);\r\n\r\n    // Load values from Server\r\n    this.http\r\n        .get<Array<AppSettingsValue>>(`${apiHome}/api/v1/appSettings`)\r\n        .pipe(timeout(20000), retry(3))\r\n        .subscribe(\r\n      appValues => {\r\n        if (appValues) {\r\n          appValues.forEach(appValue => {\r\n            this.setValue(appValue.name, appValue.value);\r\n          });\r\n        }\r\n        this.appSettingsStore.setLoading(false);\r\n        this.appSettingsStore.update({ isInitialised: true });\r\n      },\r\n      err => {\r\n        this.appSettingsStore.setLoading(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  public setValues(settings: object) {\r\n    // Mark store as loading\r\n    this.appSettingsStore.setLoading(true);\r\n    this.appSettingsStore.update({ isInitialised: false });\r\n\r\n    // Load values\r\n    if (settings) {\r\n      Object.keys(settings).forEach(key => {\r\n        // Setting Value Here\r\n        this.logger.info(`[${this.className}.loadSettings] Setting Value ${key} = ${settings[key]}`);\r\n        this.setValue(key, settings[key]);\r\n      });\r\n    }\r\n\r\n    this.appSettingsStore.setLoading(false);\r\n    this.appSettingsStore.update({ isInitialised: true });\r\n  }\r\n\r\n  public getBoolean(name: string): Observable<boolean> {\r\n    return this.appSettingsQuery.selectEntity(name, entity => entity.value);\r\n  }\r\n\r\n  public getString(name: string): Observable<string> {\r\n    return this.appSettingsQuery.selectEntity(name, entity => entity.value);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { timeout, retry } from 'rxjs/operators';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport {\r\n  ApplicationLog,\r\n  AppSettings,\r\n  ZuluDateHelper,\r\n} from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AppAuditService {\r\n  constructor(\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private userQuery: UserAuthenticationQuery,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  public RecordLog(appLog: ApplicationLog): void {\r\n    let apiHome = this.appSettingsQuery.getEntity(AppSettings.apiHome).value;\r\n\r\n    if (!appLog.logDate) {\r\n      appLog.logDate = ZuluDateHelper.setGMTDate(new Date());\r\n    }\r\n\r\n    if (!appLog.userID) {\r\n      appLog.userID = this.userQuery.getUserId();\r\n    }\r\n    try {\r\n      // This post is a fire and forget. Don't have to authorise either\r\n      this.http\r\n        .post(`${apiHome}/api/v1/applicationLog`, appLog)\r\n        .pipe(timeout(30000), retry(3))\r\n        .subscribe(\r\n          (data) => {},\r\n          (err) => {\r\n            console.log('Unable to send AppLog, offline?');\r\n          }\r\n        );\r\n    } catch (err) {\r\n      console.log('Unable to send AppLog, offline?');\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { AuditLog } from '@ngscaffolding/models';\r\n\r\nexport interface AuditLogState extends EntityState<AuditLog> {}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'auditLog', idKey: 'id' })\r\nexport class AuditLogStore extends EntityStore<AuditLogState, AuditLog> {\r\n    constructor() {\r\n        super({});\r\n        console.log('AuditLogStore Constructor');\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { AuditLogState, AuditLogStore } from './auditLog.store';\r\nimport { AuditLog } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuditLogQuery extends QueryEntity<AuditLogState, AuditLog> {\r\n    allAuditLog = this.getAll();\r\n\r\n    constructor(protected store: AuditLogStore) {\r\n        super(store);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuditLog, AppSettings, ZuluDateHelper } from '@ngscaffolding/models';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { timeout, retry, finalize } from 'rxjs/operators';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { AuditLogStore } from './auditLog.store';\r\nimport { AuditLogQuery } from './auditLog.query';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuditLogService {\r\n    private polling = 30000;\r\n    private retryVal = 3;\r\n\r\n    private isSending = false;\r\n    private defaultLog: AuditLog = {};\r\n\r\n    constructor(\r\n        private auditLogStore: AuditLogStore,\r\n        private auditLogQuery: AuditLogQuery,\r\n        private appSettingsQuery: AppSettingsQuery,\r\n        private userQuery: UserAuthenticationQuery,\r\n        private http: HttpClient\r\n    ) {\r\n        appSettingsQuery\r\n            .selectEntity(AppSettings.mobileDefaultPolling)\r\n            .subscribe(val => (this.polling = val.value > 0 ? val.value : 30000));\r\n        appSettingsQuery\r\n            .selectEntity(AppSettings.mobileDefaultRetries)\r\n            .subscribe(val => (this.retryVal = val.value > 0 ? val.value : 3));\r\n        this.StartPolling();\r\n    }\r\n\r\n    public SetDefault(defaultLog: AuditLog) {\r\n        this.defaultLog = defaultLog;\r\n    }\r\n\r\n    public RecordLog(auditLog: AuditLog): void {\r\n        const workingLog = {...this.defaultLog, ...auditLog};\r\n        workingLog.id = uuid();\r\n        if (!workingLog.logDate) {\r\n            workingLog.logDate = ZuluDateHelper.setGMTDate(new Date());\r\n        }\r\n\r\n        if (!workingLog.userID) {\r\n            workingLog.userID = this.userQuery.getUserId();\r\n        }\r\n\r\n        this.auditLogStore.add(workingLog);\r\n        try {\r\n        } catch (err) {\r\n            console.log('Unable to send AppLog, offline?');\r\n        }\r\n    }\r\n\r\n    private StartPolling() {\r\n        setInterval(_ => {\r\n            if (!this.isSending) {\r\n                this.isSending = true;\r\n                this.SendLogEntries();\r\n            }\r\n        }, this.polling);\r\n    }\r\n\r\n    public SendLogEntries() {\r\n        const apiHome = this.appSettingsQuery.getEntity(AppSettings.apiHome).value;\r\n        const logEntries = this.auditLogQuery.getAll();\r\n\r\n        if (logEntries && logEntries.length > 0) {\r\n            const keys = logEntries.map(log => log.id);\r\n            // This post is a fire and forget. Don't have to authorise either\r\n            this.http\r\n                .post(`${apiHome}/api/v1/auditlog`, logEntries)\r\n                .pipe(\r\n                    timeout(30000),\r\n                    retry(3),\r\n                    finalize(() => {\r\n                        this.isSending = false;\r\n                    })\r\n                )\r\n                .subscribe(\r\n                    data => {\r\n                        this.auditLogStore.remove(keys);\r\n                        // keys.forEach(key => this.auditLogStore.remove(({ id }) => id === key));\r\n                    },\r\n                    err => {\r\n                        console.log('Unable to send AppLog, offline?');\r\n                    }\r\n                );\r\n        } else {\r\n            this.isSending = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable, NgModuleFactoryLoader, Injector } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComponentLoaderService {\r\n  private componentRegistry = {\r\n    'lazy-component': {\r\n      modulePath:\r\n        './lazy-components/lazy-components.module#LazyComponentsModule',\r\n      moduleRef: null\r\n    }\r\n  };\r\n\r\n  constructor(\r\n    private loader: NgModuleFactoryLoader,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  registerComponent(name: string, modulePath: string = null) {\r\n    if (!this.componentRegistry[name]) {\r\n      this.componentRegistry[name] = {\r\n        modulePath: modulePath,\r\n        moduleRef: null\r\n      };\r\n    }\r\n  }\r\n\r\n  loadComponent(componentTag: string): Promise<HTMLElement> {\r\n    const cmpRegistryEntry = this.componentRegistry[componentTag];\r\n    if (!cmpRegistryEntry) {\r\n      throw new Error(\r\n        `Unrecognized component \"${componentTag}\". Make sure it is registered in the component registry`\r\n      );\r\n    }\r\n\r\n    if (cmpRegistryEntry.modulePath) {\r\n      // Provided a path so this is a lazy loaded component\r\n      if (cmpRegistryEntry.moduleRef) {\r\n        return new Promise(resolve => {\r\n          const componentInstance = document.createElement(componentTag);\r\n          resolve(componentInstance);\r\n        });\r\n      } else {\r\n        const path = cmpRegistryEntry.modulePath;\r\n\r\n        return new Promise((resolve, reject) => {\r\n          this.loader\r\n            .load(path)\r\n            .then(moduleFactory => {\r\n              const moduleRef = moduleFactory.create(this.injector).instance;\r\n              cmpRegistryEntry.moduleRef = moduleRef;\r\n\r\n              // instantiate the component\r\n              const componentInstance = document.createElement(componentTag);\r\n              resolve(componentInstance);\r\n            })\r\n            .catch(err => {\r\n              console.error('error loading module', err);\r\n              reject(err);\r\n            });\r\n        });\r\n      }\r\n    } else {\r\n      // No path so simple Angular Element already webpacked\r\n      return new Promise((resolve, reject) => {\r\n        const componentInstance = document.createElement(componentTag);\r\n        resolve(componentInstance);\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ErrorModel, AppSettings } from '@ngscaffolding/models';\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport { NotificationService } from '../notification/notification.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CoreErrorHandlerService extends ErrorHandler {\r\n  constructor(\r\n    private appSettingsService: AppSettingsService,\r\n    private http: HttpClient\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public logError(error, source: string = null) {}\r\n\r\n  private processError(error, source: string = null) {}\r\n\r\n  handleError(error, source: string = null) {\r\n    super.handleError(error);\r\n\r\n    if (this.appSettingsService.getValue(AppSettings.errorLogConsole)) {\r\n      console.error(error.message);\r\n    }\r\n    if (this.appSettingsService.getValue(AppSettings.errorLogServer)) {\r\n      const errorModel = new ErrorModel(error);\r\n\r\n      if (source) {\r\n        errorModel.source = source;\r\n      }\r\n\r\n      if (error.stack) {\r\n        errorModel.stackTrace = error.stack;\r\n      }\r\n\r\n      // Consume any errors here. Otherwise we will just get stuck\r\n      try {\r\n        // This post is a fire and forget. Don't have to authorise either\r\n        this.http.post(this.appSettingsService.getValue(AppSettings.apiHome) + '/api/v1/error', errorModel).subscribe(\r\n          data => {\r\n            // alert('ID: ' + data.id);\r\n          },\r\n          err => {\r\n            console.log('Unable to send Error to Server, offline?');\r\n          }\r\n        );\r\n      } catch (err) {\r\n        console.log('Unable to send Error to Server, offline?');\r\n      }\r\n    }\r\n    if (this.appSettingsService.getValue(AppSettings.errorShowUser)) {\r\n      // TODO: Show User Error\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { AppSettingsValue, AppSettings, DataResults } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface DataSourceState extends EntityState<DataResults> {\r\n  isInitialised: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'dataSource', idKey: 'key' })\r\nexport class DataSourceStore extends EntityStore<DataSourceState, DataResults> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false});\r\n    console.log('DataSourceStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { DataSourceState, DataSourceStore } from './dataSource.store';\r\nimport { DataResults } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSourceQuery extends QueryEntity<DataSourceState, DataResults> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: DataSourceStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Observable, forkJoin, throwError, of } from 'rxjs';\r\nimport { retry, timeout } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport {\r\n  DataSourceRequest,\r\n  DataResults,\r\n  AppSettings,\r\n  ApplicationLog,\r\n} from '@ngscaffolding/models';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { DataSourceStore } from './dataSource.store';\r\nimport { DataSourceQuery } from './dataSource.query';\r\nimport { AppAuditService } from '../appAudit/appAudit.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DataSourceService {\r\n  private className = 'DataSourceService';\r\n  private inflightRequests = new Map<string, Observable<DataResults>>();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dataSourceStore: DataSourceStore,\r\n    private dataSourceQuery: DataSourceQuery,\r\n    private appSettingsService: AppSettingsService,\r\n    private appAuditService: AppAuditService,\r\n    private logger: LoggingService\r\n  ) {}\r\n\r\n  decorateInput(inputDetails: object): object {\r\n    return null;\r\n  }\r\n\r\n  getDataSource(dataRequest: DataSourceRequest): Observable<DataResults> {\r\n    const key = this.getKey(dataRequest);\r\n\r\n    if (dataRequest.forceRefresh) {\r\n      this.dataSourceStore.remove(key);\r\n    }\r\n\r\n    const currentCacheValue = this.dataSourceQuery.getEntity(key);\r\n    if (currentCacheValue) {\r\n      if (currentCacheValue.expiresWhen > new Date()) {\r\n        // Return good cached value\r\n        return of(currentCacheValue);\r\n      } else {\r\n        // Expired - Bad cache\r\n        this.dataSourceStore.remove(key);\r\n      }\r\n    }\r\n\r\n    if (this.inflightRequests.has(key)) {\r\n      return this.inflightRequests.get(key);\r\n    }\r\n\r\n    // Make HTTP Request\r\n    const formData: FormData = new FormData();\r\n    formData.append('dataSourceRequest', JSON.stringify(dataRequest));\r\n\r\n    // Add Files if passed\r\n    if (dataRequest.fileNames) {\r\n      let fileCount = 0;\r\n      dataRequest.fileNames.forEach((file) => {\r\n        formData.append(`file-${fileCount++}`, file, file.name);\r\n      });\r\n    }\r\n\r\n    const logEntry: ApplicationLog = {\r\n      entity: 'DataSource Call',\r\n      action: key,\r\n      values: {\r\n        filterValues: dataRequest.filterValues,\r\n        inputData: dataRequest.inputData,\r\n      },\r\n    };\r\n\r\n    this.logger.info(\r\n      `Calling Datasource ${dataRequest.name}`,\r\n      null,\r\n      logEntry.values\r\n    );\r\n\r\n    this.inflightRequests.set(\r\n      key,\r\n      new Observable<DataResults>((observer) => {\r\n        this.http\r\n          .post<DataResults>(\r\n            `${this.appSettingsService.getValue(\r\n              AppSettings.apiHome\r\n            )}/api/v1/datasource`,\r\n            formData\r\n          )\r\n          .pipe(timeout(20000), retry(3))\r\n          .subscribe(\r\n            (values) => {\r\n              const expiryNow = new Date();\r\n\r\n              // If expires Seconds not provided set long expiry\r\n              const expiresSeconds =\r\n                values.expiresSeconds > 0 ? values.expiresSeconds : 99999999;\r\n              const expiresWhen = new Date(\r\n                expiryNow.getTime() + expiresSeconds * 10000\r\n              );\r\n              const newResults: DataResults = {\r\n                expiresWhen: expiresWhen,\r\n                rowCount: values.rowCount,\r\n                jsonData: values.jsonData,\r\n                results: values.results,\r\n              };\r\n\r\n              // Log Datasource Success\r\n              this.appAuditService.RecordLog({\r\n                ...logEntry,\r\n                result: 'Success',\r\n              });\r\n\r\n              // Update the Store to tell the world we have data\r\n              this.dataSourceStore.update(key, newResults);\r\n              this.inflightRequests.delete(key);\r\n              observer.next(newResults);\r\n              observer.complete();\r\n            },\r\n            (err) => {\r\n              // Update the Store to tell the world we failed in every way. Shame.\r\n              const errorResults: DataResults = {\r\n                expiresWhen: new Date(),\r\n                error: err.message,\r\n              };\r\n\r\n              // Log Datasource Success\r\n              this.appAuditService.RecordLog({\r\n                ...logEntry,\r\n                result: err.message,\r\n              });\r\n\r\n              this.dataSourceStore.update(key, errorResults);\r\n              this.inflightRequests.delete(key);\r\n\r\n              this.logger.error(err, 'DataSource.Service.getDataSource', false);\r\n              observer.error(err);\r\n            }\r\n          );\r\n      })\r\n    );\r\n\r\n    return this.inflightRequests.get(key);\r\n  }\r\n\r\n  private getKey(dataRequest: DataSourceRequest) {\r\n    return `name:${dataRequest.name} seed:${\r\n      dataRequest.seed\r\n    } inputData:${JSON.stringify(dataRequest.inputData)} `;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { CoreMenuItem } from '@ngscaffolding/models';\r\n\r\nexport interface MenuState extends EntityState<CoreMenuItem> {\r\n  menuItems: CoreMenuItem[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'menu', idKey: 'name' })\r\nexport class MenuStore extends EntityStore<MenuState, CoreMenuItem> {\r\n\r\n  constructor() {\r\n    super();\r\n    console.log('MenuStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity, QueryConfig, Order } from '@datorama/akita';\r\nimport { CoreMenuItem, MenuTypes } from '@ngscaffolding/models';\r\nimport { MenuStore, MenuState } from './menu.store';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n@QueryConfig({\r\n    sortBy: 'order',\r\n    sortByOrder: Order.ASC // Order.DESC\r\n})\r\nexport class MenuQuery extends QueryEntity<MenuState, CoreMenuItem> {\r\n    public folders$: Observable<CoreMenuItem[]>;\r\n\r\n    constructor(protected store: MenuStore) {\r\n        super(store);\r\n        this.folders$ = this.selectAll({\r\n            filterBy: [entity => entity.type === MenuTypes.Folder]\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { Role } from '@ngscaffolding/models';\r\n\r\nexport interface RoleState extends EntityState<Role> {}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'role', idKey: 'name' })\r\nexport class RolesStore extends EntityStore<RoleState, Role> {\r\n\r\n  constructor() {\r\n    super();\r\n    console.log('RoleStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { Role } from '@ngscaffolding/models';\r\nimport { RoleState, RolesStore } from './roles.store';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RolesQuery extends QueryEntity<RoleState, Role> {\r\n  constructor(protected store: RolesStore) {\r\n    super(store);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { RolesQuery } from './roles.query';\r\nimport { RolesStore } from './roles.store';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { combineLatest } from 'rxjs';\r\nimport { AppSettings, SystemDataSourceNames } from '@ngscaffolding/models';\r\nimport { take, finalize } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { DataSourceService } from '../dataSource/dataSource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RolesService {\r\n  private routeRoles = new Map<string, string[]>();\r\n  private apiHome: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private rolesQuery: RolesQuery,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private dataSourceService: DataSourceService,\r\n    private rolesStore: RolesStore,\r\n    public authQuery: UserAuthenticationQuery\r\n  ) {\r\n    // First Time load away\r\n    this.rolesStore.setLoading(false);\r\n\r\n    // Wait for settings, then load from server\r\n    combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)).subscribe(([authenticated, apiHome]) => {\r\n      if (authenticated && apiHome) {\r\n        this.apiHome = apiHome.value;\r\n        this.rolesQuery\r\n          .selectLoading()\r\n          .pipe(take(1))\r\n          .subscribe(loading => {\r\n            if (!loading) {\r\n              this.downloadRoles();\r\n            }\r\n          });\r\n      } else if (!authenticated) {\r\n        this.rolesStore.remove();\r\n      }\r\n    });\r\n  }\r\n\r\n  public downloadRoles() {\r\n    // Mark loading status\r\n    this.rolesStore.setLoading(true);\r\n\r\n    this.dataSourceService\r\n      .getDataSource({ name: SystemDataSourceNames.ROLES_SELECT })\r\n      .pipe(\r\n        finalize(() => {\r\n          this.rolesStore.setLoading(false);\r\n        })\r\n      )\r\n      .subscribe(results => {\r\n        if (results && !results.error) {\r\n          this.rolesStore.add(results.jsonData);\r\n          this.rolesStore.setLoading(false);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Checks if the current user is in this role.\r\n  public isInRole(role: string): boolean {\r\n    const currentUser = this.authQuery.getValue().userDetails;\r\n    if (currentUser && currentUser.role) {\r\n      return currentUser.role.indexOf(role) > -1;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Checks if the current user is in one of these roles.\r\n  public isInRoles(roles: string[]): boolean {\r\n    let result = false;\r\n    const currentUser = this.authQuery.getValue().userDetails;\r\n    if (currentUser && currentUser.role) {\r\n      roles.forEach(role => {\r\n        if (currentUser.role.indexOf(role) > -1) {\r\n          result = true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Repository of Roles: Routes\r\n  public addRouteRoles(route: string, roles: string[]) {\r\n    this.routeRoles.set(route, roles);\r\n  }\r\n\r\n  public getRouteRoles(route: string): string[] {\r\n    return this.routeRoles.get(route);\r\n  }\r\n}\r\n","import { RolesService } from '../rolesService/roles.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Route } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { timeout, finalize } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { CoreMenuItem, AppSettings, MenuTypes } from '@ngscaffolding/models';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { MenuStore } from './menu.store';\r\nimport { MenuQuery } from './menu.query';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuService {\r\n    private readonly methodName = 'MenuService';\r\n    private masterListMenu: Array<CoreMenuItem> = [];\r\n    private routes: Array<Route> = [];\r\n\r\n    private menuItems: CoreMenuItem[] = [];\r\n\r\n    private apiHome: string;\r\n\r\n    public routeSubject = new BehaviorSubject<Array<Route>>(this.routes);\r\n\r\n    private httpInFlight = false;\r\n    private lockCount = 0;\r\n    private menuDownloaded = false;\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private menuStore: MenuStore,\r\n        private menuQuery: MenuQuery,\r\n        private appSettingsQuery: AppSettingsQuery,\r\n        private authQuery: UserAuthenticationQuery,\r\n        private log: LoggingService,\r\n        public rolesService: RolesService\r\n    ) {\r\n        // Wait for settings, then load from server\r\n        combineLatest([\r\n            this.authQuery.authenticated$,\r\n            this.appSettingsQuery.selectEntity(AppSettings.apiHome),\r\n            this.appSettingsQuery.selectEntity(AppSettings.isMobile)\r\n        ]).subscribe(([authenticated, apiHome, isMobile]) => {\r\n            if (authenticated && apiHome && isMobile && !this.menuDownloaded) {\r\n                this.apiHome = apiHome.value;\r\n                if (!this.httpInFlight) {\r\n                    this.downloadMenuItems(isMobile.value || false);\r\n                }\r\n            } else if (!authenticated) {\r\n                this.menuDownloaded = false;\r\n                this.lockCount = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    private addLock() {\r\n        this.lockCount++;\r\n        this.log.info(`MENU Service: Locks on Loading`, this.methodName, this.lockCount);\r\n        this.menuStore.setLoading(true);\r\n    }\r\n\r\n    public setCurrent(name: string) {\r\n        this.menuStore.setActive(name);\r\n    }\r\n\r\n    private removeLock() {\r\n        this.lockCount--;\r\n        this.log.info(`MENU Service: Locks on Loading`, this.methodName, this.lockCount);\r\n\r\n        if (this.lockCount === 0) {\r\n            this.menuStore.setLoading(false);\r\n        }\r\n    }\r\n\r\n    public addMenuItemsFromCode(menuItems: CoreMenuItem[], roles: string[] = null) {\r\n        this.addLock();\r\n        this.log.info('Adding MenuItems menuItems', this.methodName, menuItems);\r\n\r\n        // Wait till user authorised\r\n        this.authQuery.authenticated$.subscribe(authorised => {\r\n            if (authorised) {\r\n                // Save for later use\r\n                this.addMenuItems(menuItems);\r\n                this.removeLock();\r\n            }\r\n        });\r\n    }\r\n\r\n    public getFolders(): CoreMenuItem[] {\r\n        return this.menuQuery.getAll({\r\n            filterBy: [entity => entity.type === MenuTypes.Folder]\r\n        });\r\n    }\r\n\r\n    public delete(menuItem: CoreMenuItem): Observable<any> {\r\n        return new Observable<any>(observer => {\r\n            const obs = this.http.delete(`${this.apiHome}/api/v1/menuitems/${menuItem.name}`);\r\n            obs.subscribe(\r\n                () => {\r\n                    // Remove from our store\r\n                    this.menuStore.remove(menuItem.name);\r\n\r\n                    // Remove from Tree\r\n                    const existingMenus = JSON.parse(JSON.stringify(this.menuQuery.getValue())).menuItems;\r\n                    let parentMenu: CoreMenuItem;\r\n                    if (menuItem.parent) {\r\n                        parentMenu = existingMenus.find(menu => menu.name && menu.name.toLowerCase() === menuItem.parent.toLowerCase());\r\n                    }\r\n\r\n                    const foundIndex = (parentMenu.items as CoreMenuItem[]).findIndex(\r\n                        childMenu => childMenu.name && childMenu.name === menuItem.name\r\n                    );\r\n                    parentMenu.items.splice(foundIndex, 1);\r\n\r\n                    // Update tree and tell the world\r\n                    this.menuStore.update({ menuItems: existingMenus });\r\n                    observer.next();\r\n                    observer.complete();\r\n                },\r\n                err => {\r\n                    observer.error(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    public saveMenuItem(menuItem: CoreMenuItem): Observable<any> {\r\n        return this.http.post<CoreMenuItem>(this.apiHome + '/api/v1/menuitems', menuItem);\r\n    }\r\n\r\n    public updateExistingMenuItem(menuItem: CoreMenuItem) {\r\n        // Is this existing?\r\n        const existing = this.menuQuery.hasEntity(menuItem.name);\r\n        if (existing) {\r\n            this.menuStore.upsert(menuItem.name, menuItem);\r\n        } else {\r\n            // Add to reference list of menus\r\n            this.menuStore.add(menuItem);\r\n        }\r\n\r\n        const existingMenus = JSON.parse(JSON.stringify(this.menuQuery.getAll()));\r\n        let parentMenu: CoreMenuItem;\r\n        if (menuItem.parent) {\r\n            parentMenu = existingMenus.find(menu => menu.name.toLowerCase() === menuItem.parent.toLowerCase());\r\n        }\r\n        // Add to treeview for menu rendering\r\n        if (!parentMenu.items || !Array.isArray(parentMenu.items)) {\r\n            parentMenu.items = [];\r\n        }\r\n        if (existing) {\r\n            const foundIndex = (parentMenu.items as CoreMenuItem[]).findIndex(childMenu => childMenu.name === menuItem.name);\r\n            parentMenu.items[foundIndex] = menuItem;\r\n        } else {\r\n            (parentMenu.items as CoreMenuItem[]).push(menuItem);\r\n        }\r\n\r\n        // Update tree and tell the world\r\n        this.menuStore.update({ menuItems: existingMenus });\r\n    }\r\n\r\n    // Iterative Call\r\n    private addMenuItemsToReferenceList(menuItems: CoreMenuItem[]): void {\r\n        menuItems.forEach(menuItem => {\r\n            // Add to Entity Store\r\n            this.menuStore.upsert(menuItem.name, menuItem);\r\n            if (menuItem.items && Array.isArray(menuItem.items)) {\r\n                this.addMenuItemsToReferenceList(menuItem.items as Array<CoreMenuItem>);\r\n            }\r\n        });\r\n    }\r\n\r\n    private removeUnauthorisedMenuItems(menuItems: CoreMenuItem[]): CoreMenuItem[] {\r\n        const user = this.authQuery.getValue();\r\n        let userRoles: string[] = [];\r\n        if (user && user.userDetails) {\r\n            userRoles = user.userDetails.role;\r\n        }\r\n\r\n        const removingMenus: string[] = [];\r\n        let returnMenus: CoreMenuItem[] = JSON.parse(JSON.stringify(menuItems));\r\n\r\n        for (let menuIndex = 0; menuIndex < returnMenus.length; menuIndex++) {\r\n            const menuItem = returnMenus[menuIndex];\r\n\r\n            let removingThis = false;\r\n\r\n            // makes sure roles is array\r\n            let checkingRoles = [];\r\n\r\n            if (!menuItem.roles) {\r\n                checkingRoles = [];\r\n            } else if (Array.isArray(menuItem.roles)) {\r\n                checkingRoles = [...menuItem.roles];\r\n            } else {\r\n                checkingRoles = [menuItem.roles];\r\n            }\r\n\r\n            // Is this role protected\r\n            if (checkingRoles && checkingRoles.length > 0) {\r\n                if (userRoles && checkingRoles.filter(allowedRole => userRoles.indexOf(allowedRole) !== -1).length === 0) {\r\n                    // No Authority. Remove\r\n                    removingThis = true;\r\n                    removingMenus.push(menuItem.name);\r\n                }\r\n            }\r\n\r\n            if (!removingThis && menuItem.items) {\r\n                menuItem.items = this.removeUnauthorisedMenuItems(menuItem.items as CoreMenuItem[]);\r\n            }\r\n        }\r\n\r\n        if (removingMenus.length > 0) {\r\n            returnMenus = menuItems.filter(menu => removingMenus.findIndex(remove => remove === menu.name) === -1);\r\n        }\r\n\r\n        return returnMenus;\r\n    }\r\n\r\n    public downloadMenuItems(isMobile: boolean) {\r\n        // Mark loading status\r\n        this.addLock();\r\n        this.httpInFlight = true;\r\n\r\n        const newMenuItems: CoreMenuItem[] = [];\r\n\r\n        this.http\r\n            .get<Array<CoreMenuItem>>(`${this.apiHome}/api/v1/menuitems?mobile=${isMobile}`)\r\n            .pipe(\r\n                timeout(60000),\r\n                finalize(() => {\r\n                    this.httpInFlight = false;\r\n                    this.removeLock();\r\n                })\r\n            )\r\n            .subscribe(\r\n                downloadedMenuItems => {\r\n                    this.log.info(`Downloaded MenuItems`);\r\n                    this.menuDownloaded = true;\r\n\r\n                    this.addMenuItems(downloadedMenuItems);\r\n                },\r\n                err => {\r\n                    this.log.error('Failed to download Menu');\r\n                }\r\n            );\r\n    }\r\n\r\n    public addMenuItems(newMenuItems: CoreMenuItem[], findInTree = false) {\r\n        // Clone so we can amend\r\n        const fetchedMenuItems = this.menuQuery.getValue().menuItems || [];\r\n        this.menuItems = JSON.parse(JSON.stringify(fetchedMenuItems));\r\n\r\n        this.calculateRouterLinks(newMenuItems);\r\n\r\n        // Add to flat reference List\r\n        this.addMenuItemsToReferenceList(newMenuItems);\r\n        if (findInTree) {\r\n            newMenuItems.forEach(loopMenuItem => {\r\n                this.upsertMenuItemToExistingTree(loopMenuItem);\r\n            });\r\n        } else {\r\n        newMenuItems.forEach(loopMenuItem => {\r\n            this.addNewMenuItemToEntities(this.menuItems, loopMenuItem);\r\n        });\r\n        }\r\n\r\n        // Remove the unatuhorised\r\n        this.menuItems = this.removeUnauthorisedMenuItems(this.menuItems);\r\n\r\n        this.menuStore.update({ menuItems: this.menuItems });\r\n    }\r\n\r\n    private calculateRouterLinks(menuItems: CoreMenuItem[]) {\r\n        if (menuItems) {\r\n            menuItems.forEach(menuItem => {\r\n                if (!menuItem.routerLink) {\r\n                    // Need to create our routerLink\r\n                    switch (menuItem.type) {\r\n                        case MenuTypes.Dashboard: {\r\n                            menuItem.routerLink = `dashboard/${menuItem.name}`;\r\n                            break;\r\n                        }\r\n                        case MenuTypes.Datagrid: {\r\n                            menuItem.routerLink = `datagrid/${menuItem.name}`;\r\n                            break;\r\n                        }\r\n                        case MenuTypes.Folder: {\r\n                            // No router link here\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            menuItem.routerLink = menuItem.name;\r\n                        }\r\n                    }\r\n                }\r\n                if (menuItem.items) {\r\n                    this.calculateRouterLinks(menuItem.items as CoreMenuItem[]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public addRoute(route: Route, roles: string[] = null) {\r\n        this.log.info(`Adding Route ${JSON.stringify(route)}`);\r\n        this.routes.push(route);\r\n\r\n        if (roles !== null) {\r\n            this.rolesService.addRouteRoles(route.path, roles);\r\n        }\r\n    }\r\n\r\n    private upsertMenuItemToExistingTree(newMenuItem: CoreMenuItem) {\r\n        const menuItems = [...this.menuItems];\r\n        if (!newMenuItem.parent || newMenuItem.parent === '') {\r\n            // Root menu item\r\n            let existing = menuItems.find(menu => menu.name === newMenuItem.name);\r\n            if (existing) {\r\n                existing = { ...newMenuItem };\r\n            } else {\r\n                menuItems.push({ ...newMenuItem });\r\n            }\r\n        } else {\r\n            // Submenu item\r\n            const parent = menuItems.find(menu => menu.name === newMenuItem.parent);\r\n            if (parent) {\r\n                let existing = (parent.items as CoreMenuItem[]).find(menu => menu.name === newMenuItem.name);\r\n                if (existing) {\r\n                    existing = { ...newMenuItem };\r\n                } else {\r\n                    (parent.items as CoreMenuItem[]).push({ ...newMenuItem });\r\n                }\r\n            }\r\n        }\r\n        this.menuItems = menuItems;\r\n    }\r\n\r\n    private addNewMenuItemToEntities(targetMenu: CoreMenuItem[], newMenuItem: CoreMenuItem) {\r\n        let calcRouterLink: string | string[];\r\n\r\n        // Don't add if we already know about this\r\n        if (targetMenu && !targetMenu.find(menu => menu.name === newMenuItem.name)) {\r\n            // Router bits\r\n            if (newMenuItem.routerLink && (<string>newMenuItem.routerLink).indexOf(',') > -1) {\r\n                calcRouterLink = (<string>newMenuItem.routerLink).split(',');\r\n            } else {\r\n                calcRouterLink = newMenuItem.routerLink;\r\n            }\r\n\r\n            const createdMenuItem: CoreMenuItem = { ...newMenuItem, routerLink: calcRouterLink };\r\n\r\n            targetMenu.push(createdMenuItem);\r\n\r\n            if (newMenuItem.items && newMenuItem.items.length > 0) {\r\n                createdMenuItem.items = [];\r\n                const castItems = newMenuItem.items as CoreMenuItem[];\r\n                castItems.forEach(menuItem => {\r\n                    this.addNewMenuItemToEntities(createdMenuItem.items as CoreMenuItem[], menuItem);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { ReferenceValue } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface ReferenceValuesState extends EntityState<ReferenceValue> {\r\n  isInitialised: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'referenceValues', idKey: 'compositeKey' })\r\nexport class ReferenceValuesStore extends EntityStore<ReferenceValuesState, ReferenceValue> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false });\r\n    console.log('ReferenceValuesStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { ReferenceValuesStore, ReferenceValuesState } from './referenceValues.store';\r\nimport { ReferenceValue } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReferenceValuesQuery extends QueryEntity<ReferenceValuesState, ReferenceValue> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: ReferenceValuesStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport { ReferenceValue, AppSettings } from '@ngscaffolding/models';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { ReferenceValuesQuery } from './referenceValues.query';\r\nimport { ReferenceValuesStore } from './referenceValues.store';\r\nimport { isArray } from 'util';\r\nimport { timeout, retry } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ReferenceValuesService {\r\n    private className = 'ReferenceValuesService';\r\n\r\n    private requestsInFlight = new Map<string, Observable<ReferenceValue>>();\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private appSettingsService: AppSettingsService,\r\n        private refValuesQuery: ReferenceValuesQuery,\r\n        private refValuesStore: ReferenceValuesStore,\r\n        private logger: LoggingService\r\n    ) {}\r\n\r\n    //\r\n    // Get a single string value from References\r\n    //\r\n    getValue(name: string, group: string): Observable<string> {\r\n        return new Observable<string>(observer => {\r\n            this.getReferenceValue(name, group).subscribe(reference => {\r\n                if (reference) {\r\n                    observer.next(reference.value);\r\n                } else {\r\n                    observer.next(null);\r\n                }\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    // Clear all Reference values with this name as root of key\r\n    clearReferenceValue(clearNames: string | Array<string>) {\r\n        let namesArray: Array<string>;\r\n        if (Array.isArray(clearNames)) {\r\n            namesArray = clearNames;\r\n        } else {\r\n            namesArray = [clearNames];\r\n        }\r\n\r\n        for (const loopName of namesArray) {\r\n            const list = this.refValuesQuery.getAll({ filterBy: entity => entity.name.startsWith(loopName) });\r\n\r\n        for (const refValue of list) {\r\n                this.refValuesStore.remove(refValue.compositeKey);\r\n            }\r\n        }\r\n    }\r\n\r\n    setReferenceValue(referenceValue: ReferenceValue) {\r\n        referenceValue.compositeKey = this.getKey(referenceValue.name, '');\r\n        this.refValuesStore.upsert(this.getKey(referenceValue.name, ''), referenceValue);\r\n    }\r\n\r\n    private isExpired(refVal: ReferenceValue): boolean {\r\n        const cacheSeconds = refVal.cacheSeconds || 31556952; // Default to a year\r\n        const nowDate = new Date();\r\n        const expires = new Date(refVal.whenStored);\r\n\r\n        expires.setSeconds(expires.getSeconds() + cacheSeconds);\r\n        return nowDate > expires;\r\n    }\r\n\r\n    //\r\n    // Get a complex ReferenceValue (May include multiple values)\r\n    //\r\n    getReferenceValue(name: string, seed = '', childDepth = 0): Observable<ReferenceValue> {\r\n        if (this.refValuesQuery.hasEntity(this.getKey(name, seed))) {\r\n            const cacheValue = this.refValuesQuery.getEntity(this.getKey(name, seed));\r\n            if (this.isExpired(cacheValue)) {\r\n                // Expired cache value. Go get a new one\r\n                return this.downloadRefValue(name, seed);\r\n            }\r\n\r\n            // If we get one from Cache, thats handy to use\r\n            this.logger.info(`Reference Values From Cache ${name}::${seed}`);\r\n            return new Observable<ReferenceValue>(observer => {\r\n                observer.next(this.refValuesQuery.getEntity(this.getKey(name, seed)));\r\n                observer.complete();\r\n            });\r\n        } else if (childDepth > 0) {\r\n            const refValue = this.refValuesQuery.getEntity(this.getKey(name, ''));\r\n            if (refValue) {\r\n                const parentRef = refValue.referenceValueItems.find(parent => parent.value === seed);\r\n                if (parentRef) {\r\n                    const clone = { ...refValue };\r\n                    clone.referenceValueItems = parentRef.referenceValueItems;\r\n\r\n                    return new Observable<ReferenceValue>(observer => {\r\n                        observer.next(clone);\r\n                        observer.complete();\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            return this.downloadRefValue(name, seed);\r\n        }\r\n    }\r\n\r\n    private downloadRefValue(name: string, seed: string): Observable<ReferenceValue> {\r\n        // Nothing in the Cache\r\n        if (this.requestsInFlight.has(this.getKey(name, seed))) {\r\n            // We have already asked for this, return our existing Observable\r\n            return this.requestsInFlight.get(this.getKey(name, seed));\r\n        } else {\r\n            const wrapper = new Observable<ReferenceValue>(observer => {\r\n                // Call HTTP Here\r\n                this.logger.info(`Reference Values From HTTP ${name}::${seed}`);\r\n                const httpRequest = this.http\r\n                    .get<ReferenceValue>(\r\n                        `${this.appSettingsService.getValue(AppSettings.apiHome)}/api/v1/referencevalues?name=${name}&seed=${seed}`\r\n                    )\r\n                    .pipe(timeout(20000), retry(3));\r\n                httpRequest.subscribe(\r\n                        value => {\r\n                            value.compositeKey = this.getKey(name, seed);\r\n                            value.whenStored = new Date();\r\n\r\n                            this.refValuesStore.upsert(this.getKey(name, seed), value);\r\n                            this.requestsInFlight.delete(this.getKey(name, seed));\r\n\r\n                            observer.next(value);\r\n                            observer.complete();\r\n                        },\r\n                        err => {\r\n                            // Error here. If we have a valid value, respond with that\r\n                            if (this.refValuesQuery.hasEntity(this.getKey(name, seed))) {\r\n                                this.logger.info(`Reference Values From HTTP Failed using last Cache ${name}::${seed}`);\r\n                                observer.next(this.refValuesQuery.getEntity(this.getKey(name, seed)));\r\n                                observer.complete();\r\n                            } else {\r\n                                observer.error(err);\r\n                            }\r\n                        }\r\n                    );\r\n            });\r\n\r\n            this.requestsInFlight.set(this.getKey(name, seed), wrapper);\r\n            return wrapper;\r\n        }\r\n    }\r\n\r\n    private getKey(name: string, seed: string): string {\r\n        return `${name}::${seed}`;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  BroadcastService,\r\n  BroadcastTypes\r\n} from '../broadcast/broadcast.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SpinnerService {\r\n  constructor(private broadcastService: BroadcastService) {}\r\n\r\n  public showSpinner(message: string = null) {\r\n    this.broadcastService.broadcast(BroadcastTypes.SHOW_SPINNER, message);\r\n  }\r\n\r\n  public hideSpinner() {\r\n    this.broadcastService.broadcast(BroadcastTypes.HIDE_SPINNER);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseEntity } from '@ngscaffolding/models';\r\n\r\n@Injectable()\r\nexport abstract class UserAuthenticationBase {\r\n    abstract getToken(): string;\r\n    abstract forceLogon(returnUrl: string);\r\n    abstract logon(userName: string, password: string);\r\n    abstract logoff();\r\n\r\n    abstract async completeAuthentication();\r\n    abstract isAuthenticated(): boolean;\r\n    abstract authorizationHeaderValue();\r\n    abstract name(): string;\r\n\r\n    abstract filterItemsByRole(authItems: BaseEntity[]): BaseEntity[];\r\n\r\n    abstract checkByRoles(authItem: BaseEntity): boolean;\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { timeout } from 'rxjs/operators';\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\nimport { LoggingService } from '../logging/logging.service';\r\n\r\nimport { BasicUser, AppSettings, BaseEntity } from '@ngscaffolding/models';\r\n\r\nimport { AuthenticationStore } from './userAuthentication.store';\r\n\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { UserAuthenticationBase } from './UserAuthenticationBase';\r\nimport { resetStores } from '@datorama/akita';\r\nimport { UserAuthenticationQuery } from './userAuthentication.query';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserAuthenticationService implements UserAuthenticationBase {\r\n    private readonly tokenStorageKey = 'USER_TOKEN';\r\n\r\n    private jwtHelper: JwtHelperService;\r\n\r\n    constructor(\r\n        private logger: LoggingService,\r\n        private http: HttpClient,\r\n        private authStore: AuthenticationStore,\r\n        private authQuery: UserAuthenticationQuery,\r\n        private appSettingsService: AppSettingsService,\r\n        private router: Router\r\n    ) {\r\n        logger.info('UserAuthorisationService - Constructor');\r\n        this.jwtHelper = new JwtHelperService({});\r\n        this.loadUserTokenFromStorage();\r\n    }\r\n\r\n    filterItemsByRole(authItems: BaseEntity[]): Array<BaseEntity> {\r\n        const returnItems: BaseEntity[] = [];\r\n\r\n        if (authItems) {\r\n            authItems.forEach(authItem => {\r\n                if (this.checkByRoles(authItem)) {\r\n                    returnItems.push(authItem);\r\n                }\r\n            });\r\n        }\r\n\r\n        return returnItems;\r\n    }\r\n\r\n    // Check if user passes muster\r\n    checkByRoles(authItem: BaseEntity): boolean {\r\n        // No roles = always okay\r\n        if (!authItem.roles) {\r\n            return true;\r\n        }\r\n\r\n        let isAllowed = false;\r\n        const user = this.authQuery.getUser();\r\n\r\n        if (user.role) {\r\n            user.role.forEach(role => {\r\n                authItem.roles.forEach(authRole => {\r\n                    if (role === authRole) {\r\n                        isAllowed = true;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return isAllowed;\r\n    }\r\n\r\n    completeAuthentication() {}\r\n    isAuthenticated(): boolean {\r\n        const token = this.getToken();\r\n        const tokenDetails = this.jwtHelper.decodeToken(token);\r\n\r\n        return tokenDetails && !this.jwtHelper.isTokenExpired(token);\r\n    }\r\n    authorizationHeaderValue() {}\r\n    name(): string {\r\n        return 'Hello World';\r\n    }\r\n\r\n    forceLogon(returnUrl: string) {\r\n        this.logoff();\r\n        this.router.navigate(['login'], { queryParams: { returnUrl: returnUrl } });\r\n    }\r\n\r\n    getToken(): string {\r\n        return this.authQuery.getValue().token;\r\n    }\r\n\r\n    private loadUserTokenFromStorage() {\r\n        const savedToken = localStorage.getItem(this.tokenStorageKey); // Loaded from Saved Storage\r\n        if (savedToken !== null) {\r\n            // New AuthUser Based on Token\r\n            if (!this.jwtHelper.isTokenExpired(savedToken)) {\r\n                // If all Good\r\n                this.logger.info('Token from Storage - Token Loaded and not Expired');\r\n                this.setToken(savedToken);\r\n            } else {\r\n                // Expired Token\r\n                this.logger.info('Token from Storage - Token Expired - Not using');\r\n            }\r\n        } else {\r\n            // No token\r\n            this.logger.info('Token from Storage - No Token Available');\r\n        }\r\n    }\r\n\r\n    private setToken(token: any) {\r\n        // New AuthUser Based on Token\r\n        const tokenDetails = this.jwtHelper.decodeToken(token);\r\n\r\n        const newUser = new BasicUser();\r\n\r\n        if (tokenDetails['firstName'] && tokenDetails['lastName']) {\r\n            newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];\r\n        }\r\n\r\n        if (tokenDetails['sub']) {\r\n            newUser.userId = tokenDetails['sub'];\r\n        }\r\n\r\n        if (tokenDetails['role']) {\r\n            newUser.role = tokenDetails['role'];\r\n        }\r\n\r\n        if (tokenDetails['email']) {\r\n            newUser.email = tokenDetails['email'];\r\n        }\r\n\r\n        this.authStore.update({ token: token, userDetails: newUser, authenticated: true });\r\n    }\r\n\r\n    public logon(userName: string, password: string): Observable<null> {\r\n        return new Observable<null>(observer => {\r\n            let body = new HttpParams();\r\n            body = body\r\n                .append('username', userName)\r\n                .append('password', password)\r\n                .append('grant_type', 'password')\r\n                .append('client_id', this.appSettingsService.getValue(AppSettings.authClientId))\r\n                .append('client_secret', this.appSettingsService.getValue(AppSettings.authClientSecret))\r\n                .append('scope', this.appSettingsService.getValue(AppSettings.authScope) + ' offline_access openid');\r\n\r\n            this.http\r\n                .post(\r\n                    this.appSettingsService.getValue(AppSettings.apiAuth) + this.appSettingsService.getValue(AppSettings.authTokenEndpoint),\r\n                    body,\r\n                    {\r\n                        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\r\n                    }\r\n                )\r\n                .pipe(timeout(30000))\r\n                .subscribe(\r\n                    response => {\r\n                        // chek if user is is in 'user' role\r\n                        const tokenDetails = this.jwtHelper.decodeToken(response['access_token']);\r\n                        const requiredRole = this.appSettingsService.getValue(AppSettings.authRequiredRole);\r\n                        if (tokenDetails['role']) {\r\n                            if (requiredRole && !tokenDetails['role'].includes(requiredRole)) {\r\n                                observer.error('Unauthorised');\r\n                            } else {\r\n                        // Save Token in Storage if needed\r\n                        if (this.appSettingsService.getValue(AppSettings.authSaveinLocalStorage)) {\r\n                            localStorage.setItem(this.tokenStorageKey, response['access_token']);\r\n                        }\r\n\r\n                        // Load our details from this token\r\n                        this.setToken(response['access_token']);\r\n\r\n                        if (response['refresh_token']) {\r\n                            // this.refreshToken = response['refresh_token'];\r\n                        }\r\n\r\n                        observer.next(null);\r\n                        observer.complete();\r\n                            }\r\n                        }\r\n                    },\r\n                    err => {\r\n                        observer.error(err);\r\n                    }\r\n                );\r\n        });\r\n    }\r\n\r\n    public logoff(): void {\r\n        if (this.appSettingsService.getValue(AppSettings.authSaveinLocalStorage)) {\r\n            // Remove token from Local Storage\r\n            localStorage.removeItem(this.tokenStorageKey);\r\n        }\r\n\r\n        // Clear Akita Stores\r\n        resetStores({ exclude: ['appSettings'] });\r\n\r\n        this.authStore.update({ token: null, userDetails: null, authenticated: false });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { UserManager, UserManagerSettings, User } from 'oidc-client';\r\nimport { UserAuthenticationBase } from './UserAuthenticationBase';\r\nimport { AppSettings, BaseEntity, BasicUser } from '@ngscaffolding/models';\r\nimport { AuthenticationStore } from './userAuthentication.store';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { UserAuthenticationQuery } from './userAuthentication.query';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OAuthService implements UserAuthenticationBase {\r\n  private manager: UserManager;\r\n  private user: User | null;\r\n  private jwtHelper: JwtHelperService;\r\n\r\n  constructor(\r\n    private authStore: AuthenticationStore,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private appSettingsQuery: AppSettingsQuery\r\n  ) {\r\n    this.jwtHelper = new JwtHelperService({});\r\n    appSettingsQuery\r\n      .selectEntity(AppSettings.authOAuthSettings)\r\n      .subscribe((settings) => {\r\n        this.manager = new UserManager(settings.value);\r\n        this.manager.getUser().then((user) => {\r\n          if (user) {\r\n            this.user = user;\r\n            this.setToken(this.user.access_token);\r\n          }\r\n        });\r\n      });\r\n  }\r\n  filterItemsByRole(authItems: BaseEntity[]): Array<BaseEntity> {\r\n    const returnItems: BaseEntity[] = [];\r\n\r\n    if (authItems) {\r\n      authItems.forEach((authItem) => {\r\n        if (this.checkByRoles(authItem)) {\r\n          returnItems.push(authItem);\r\n        }\r\n      });\r\n    }\r\n\r\n    return returnItems;\r\n  }\r\n\r\n  // Check if user passes muster\r\n  checkByRoles(authItem: BaseEntity): boolean {\r\n    // No roles = always okay\r\n    if (!authItem.roles) {\r\n      return true;\r\n    }\r\n\r\n    let isAllowed = false;\r\n    const user = this.authQuery.getUser();\r\n\r\n    if (user.role) {\r\n      user.role.forEach((role) => {\r\n        authItem.roles.forEach((authRole) => {\r\n          if (role === authRole) {\r\n            isAllowed = true;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return isAllowed;\r\n  }\r\n\r\n  getToken(): string {\r\n    return this.user.access_token;\r\n  }\r\n  forceLogon() {\r\n    this.logon();\r\n  }\r\n  logon(userName = '', password = '') {\r\n    return this.manager.signinRedirect();\r\n  }\r\n  async logoff() {\r\n    await this.manager.signoutRedirect();\r\n  }\r\n  async completeAuthentication() {\r\n    this.user = await this.manager.signinRedirectCallback();\r\n    this.setToken(this.user.access_token);\r\n  }\r\n  isAuthenticated(): boolean {\r\n    this.manager.getUser().then((user) => {\r\n      this.user = user;\r\n    });\r\n    return this.user != null && !this.user.expired;\r\n  }\r\n  authorizationHeaderValue() {\r\n    return `${this.user.token_type} ${this.user.access_token}`;\r\n  }\r\n  name(): string {\r\n    return this.user != null ? this.user.profile.name : '';\r\n  }\r\n\r\n  private setToken(token: any) {\r\n    // New AuthUser Based on Token\r\n    const tokenDetails = this.jwtHelper.decodeToken(token);\r\n\r\n    const newUser = new BasicUser();\r\n\r\n    if (tokenDetails['name']) {\r\n      newUser.name = tokenDetails['name'];\r\n    } else if (tokenDetails['firstName'] && tokenDetails['lastName']) {\r\n      newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];\r\n    }\r\n\r\n    if (tokenDetails['role']) {\r\n      newUser.role = tokenDetails['role'];\r\n    }\r\n\r\n    if (tokenDetails['email']) {\r\n      newUser.userId = tokenDetails['email'];\r\n      newUser.email = tokenDetails['email'];\r\n    }\r\n\r\n    this.authStore.update({\r\n      token: token,\r\n      userDetails: newUser,\r\n      authenticated: true,\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { UserPreferenceValue, UserPreferenceDefinition } from '@ngscaffolding/models';\r\n\r\n\r\nexport interface UserPreferencesState extends EntityState<UserPreferenceValue> {\r\n  preferenceDefinitions: UserPreferenceDefinition[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'userPreferences', idKey: 'name' })\r\nexport class UserPreferencesStore extends EntityStore<UserPreferencesState, UserPreferenceValue> {\r\n\r\n  constructor() {\r\n    super({ isInitialised: false });\r\n    console.log('UserPreferencesStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { UserPreferencesStore, UserPreferencesState } from './userPreferences.store';\r\nimport { UserPreferenceValue } from '@ngscaffolding/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserPreferencesQuery extends QueryEntity<UserPreferencesState, UserPreferenceValue> {\r\n\r\n  isInitialised$ = this.select(state => state.isInitialised);\r\n\r\n  constructor(protected store: UserPreferencesStore) {\r\n    super(store);\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, combineLatest } from 'rxjs';\r\n\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\n\r\n// Models\r\nimport { UserPreferenceDefinition, UserPreferenceValue, AppSettings } from '@ngscaffolding/models';\r\nimport { UserPreferencesStore } from './userPreferences.store';\r\nimport { UserPreferencesQuery } from './userPreferences.query';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserPreferencesService {\r\n  private readonly className = 'UserPreferencesService';\r\n  private readonly prefix = 'preference_';\r\n  private readonly storageKey = 'UserPreferences';\r\n\r\n  private apiHome: string;\r\n  private valuesDownloaded = false;\r\n  private definitionsDownloaded = false;\r\n  private httpInFlight = 0;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private logger: LoggingService,\r\n    private userPrefsStore: UserPreferencesStore,\r\n    private userPrefsQuery: UserPreferencesQuery,\r\n    private appSettings: AppSettingsService\r\n  ) {\r\n    // Wait for settings, then load from server\r\n    combineLatest([this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)]).subscribe(([authenticated, apiHome]) => {\r\n      if (authenticated && apiHome && !this.valuesDownloaded && !this.definitionsDownloaded) {\r\n        this.apiHome = apiHome.value;\r\n        if (!this.httpInFlight) {\r\n          // Load User Prefs from Localstorage\r\n          this.loadFromLocal();\r\n\r\n          // Load Pref Defs from server\r\n          this.getDefinitions();\r\n\r\n          // Load User Prefs from Server\r\n          this.getValues();\r\n        }\r\n      } else if (!authenticated) {\r\n        // Clear Here as we logoff\r\n        this.clearValues();\r\n      }\r\n    });\r\n  }\r\n\r\n  private clearValues() {\r\n    this.userPrefsStore.remove();\r\n\r\n    // Save to LocalStorage\r\n    localStorage.removeItem(this.storageKey);\r\n  }\r\n\r\n  public deleteValue(name: string) {\r\n    return new Observable<any>(observer => {\r\n      this.http.delete(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue/${name}`).subscribe(\r\n        () => {\r\n          // Remove and tell the world\r\n          this.userPrefsStore.remove(name);\r\n\r\n          localStorage.removeItem(this.storageKey);\r\n          this.saveToLocal();\r\n\r\n          observer.next();\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  public getValues() {\r\n    // Load values from Server\r\n    this.httpInFlight++;\r\n    this.http.get<Array<UserPreferenceValue>>(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue`).subscribe(\r\n      prefValues => {\r\n        if (prefValues) {\r\n          prefValues.forEach(prefValue => {\r\n            this.userPrefsStore.upsert(prefValue.name, prefValue);\r\n          });\r\n          this.userPrefsStore.setLoading(false);\r\n          this.httpInFlight--;\r\n          this.valuesDownloaded = true;\r\n        }\r\n      },\r\n      err => {\r\n        this.httpInFlight--;\r\n        this.logger.error(err, this.className, true);\r\n      }\r\n    );\r\n  }\r\n\r\n  public setValue(key: string, value: any): Observable<any> {\r\n    return new Observable<any>(observer => {\r\n      this.http.post(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue`, { name: key, value: value }).subscribe(\r\n        () => {\r\n          const existingEntity = this.userPrefsQuery.getEntity(key);\r\n          let newEntity = new UserPreferenceValue();\r\n\r\n          if (existingEntity) {\r\n            newEntity = JSON.parse(JSON.stringify(existingEntity));\r\n          } else {\r\n            newEntity.name = key;\r\n            newEntity.userId = this.authQuery.getValue().userDetails.userId;\r\n          }\r\n\r\n          newEntity.value = value;\r\n          this.userPrefsStore.upsert(key, newEntity);\r\n\r\n          observer.next();\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  private getDefinitions() {\r\n    this.httpInFlight++;\r\n    this.http.get<Array<UserPreferenceDefinition>>(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/UserPreferenceDefinition`).subscribe(\r\n      prefDefinitions => {\r\n        if (prefDefinitions && prefDefinitions.length > 0) {\r\n          let defns = [];\r\n          prefDefinitions.forEach(definition => {\r\n            defns.push(definition);\r\n          });\r\n          this.httpInFlight--;\r\n          this.definitionsDownloaded = true;\r\n          this.userPrefsStore.update({ preferenceDefinitions: defns });\r\n        }\r\n      },\r\n      err => {\r\n        this.httpInFlight--;\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadFromLocal() {\r\n    const stored = localStorage.getItem(this.storageKey);\r\n    if (stored) {\r\n      const map: Array<UserPreferenceValue> = JSON.parse(stored);\r\n      if (map && map.length > 0) {\r\n        map.forEach(value => {\r\n          // this.userPrefsStore.upsert(value.name, value.value);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private saveToLocal(): void {\r\n    // Save to LocalStorage\r\n    const serial = JSON.stringify(this.userPrefsQuery.getValue().entities);\r\n\r\n    localStorage.setItem(this.storageKey, serial);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EntityState, EntityStore, StoreConfig } from '@datorama/akita';\r\nimport { WidgetModelBase } from '@ngscaffolding/models';\r\n\r\nexport interface WidgetState extends EntityState<WidgetModelBase> {}\r\n\r\n@Injectable({ providedIn: 'root' })\r\n@StoreConfig({ name: 'widget', idKey: 'name' })\r\nexport class WidgetStore extends EntityStore<WidgetState, WidgetModelBase> {\r\n\r\n  constructor() {\r\n    super();\r\n    console.log('WidgetStore Constructor');\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryEntity } from '@datorama/akita';\r\nimport { WidgetModelBase } from '@ngscaffolding/models';\r\nimport { WidgetStore, WidgetState } from './widget.store';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WidgetQuery extends QueryEntity<WidgetState, WidgetModelBase> {\r\n  constructor(protected store: WidgetStore) {\r\n    super(store);\r\n  }\r\n}\r\n","import { RolesService } from '../rolesService/roles.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { finalize, take } from 'rxjs/operators';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { WidgetModelBase, AppSettings } from '@ngscaffolding/models';\r\nimport { AppSettingsQuery } from '../appSettings/appSettings.query';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { WidgetStore } from './widget.store';\r\nimport { WidgetQuery } from './widget.query';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WidgetService {\r\n  private className = 'core.WidgetService';\r\n\r\n  private apiHome: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private widgetStore: WidgetStore,\r\n    private widgetQuery: WidgetQuery,\r\n    private appSettingsQuery: AppSettingsQuery,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private log: LoggingService,\r\n    public rolesService: RolesService\r\n  ) {\r\n    // First Time load away\r\n    this.widgetStore.setLoading(false);\r\n\r\n    // Wait for settings, then load from server\r\n    combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)).subscribe(([authenticated, apiHome]) => {\r\n      if (authenticated && apiHome) {\r\n        this.apiHome = apiHome.value;\r\n        this.widgetQuery\r\n          .selectLoading()\r\n          .pipe(take(1))\r\n          .subscribe(loading => {\r\n            if (!loading) {\r\n              this.downloadWidgetItems();\r\n            }\r\n          });\r\n      } else if (!authenticated) {\r\n        this.widgetStore.remove();\r\n      }\r\n    });\r\n  }\r\n  public downloadWidgetItems() {\r\n    // Mark loading status\r\n    this.widgetStore.setLoading(true);\r\n\r\n    this.http\r\n      .get<Array<WidgetModelBase>>(this.apiHome + '/api/v1/widgets')\r\n      .pipe(\r\n        finalize(() => {\r\n          this.widgetStore.setLoading(false);\r\n        })\r\n      )\r\n      .subscribe(widgetItems => {\r\n        this.widgetStore.add(widgetItems);\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';\r\nimport { LoggingService } from '../logging/logging.service';\r\nimport { RolesService } from '../rolesService/roles.service';\r\nimport { IUserModel, AppSettings, ChangePasswordModel } from '@ngscaffolding/models';\r\nimport { Observable } from 'rxjs';\r\nimport { timeout } from 'rxjs/operators';\r\nimport { UserServiceBase } from './user.service.base';\r\nimport { AppSettingsService } from '../appSettings/appSettings.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService implements UserServiceBase  {\r\n  private className = 'core.UserService';\r\n\r\n  private apiHome: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private appSettingsService: AppSettingsService,\r\n    private authQuery: UserAuthenticationQuery,\r\n    private log: LoggingService,\r\n    public rolesService: RolesService\r\n  ) {}\r\n\r\n  getUsers() {\r\n    return new Observable<IUserModel[]>(observer => {\r\n      this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n  createUser(user: any) {\r\n    return new Observable<IUserModel>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users`, user);\r\n    }).pipe(timeout(30000));\r\n  }\r\n  deleteUser(userId: any) {\r\n    return new Observable<null>(observer => {\r\n      this.http.delete(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/${userId}`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n  changePassword(changePasswordModel: ChangePasswordModel) {\r\n    return new Observable<null>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/changePassword`, changePasswordModel)\r\n        .pipe(timeout(30000))\r\n        .subscribe(response => {\r\n          observer.next(null);\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  setPassword(changePasswordModel: ChangePasswordModel) {\r\n    return new Observable<null>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/setPassword`, changePasswordModel)\r\n        .pipe(timeout(30000))\r\n        .subscribe(response => {\r\n          observer.next(null);\r\n          observer.complete();\r\n        },\r\n        err => {\r\n          observer.error(err);\r\n        });\r\n    });\r\n  }\r\n\r\n  resetPassword(userId: any) {\r\n    return new Observable<null>(observer => {\r\n      this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/resetPassword/${userId}`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n\r\n\r\n  public getUser(userId: string): Observable<IUserModel> {\r\n    return new Observable<IUserModel>(observer => {\r\n      this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/${userId}`);\r\n    }).pipe(timeout(30000));\r\n  }\r\n\r\n  public saveUser(user: IUserModel): Observable<any> {\r\n    return new Observable<IUserModel>(observer => {\r\n      this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/`, user);\r\n    }).pipe(timeout(30000));\r\n  }\r\n}\r\n","import { IUserModel, ChangePasswordModel } from '@ngscaffolding/models';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport abstract class  UserServiceBase {\r\n    abstract getUser(userId: string): Observable<IUserModel>;\r\n    abstract saveUser(user: IUserModel): Observable<IUserModel>;\r\n\r\n    abstract getUsers(): Observable<IUserModel[]>;\r\n    abstract createUser(user: IUserModel): Observable<IUserModel>;\r\n    abstract deleteUser(userId: any): Observable<null>;\r\n\r\n    abstract changePassword(changePasswordModel: ChangePasswordModel): Observable<null>;\r\n    abstract resetPassword(userId: any): Observable<null>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggingService } from '../logging/logging.service';\r\n\r\nexport class SoftwareVersion {\r\n    module: string;\r\n    version: string;\r\n    isAppModule: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class VersionsService {\r\n    private versions: SoftwareVersion[];\r\n\r\n    constructor(private logging: LoggingService) {\r\n        this.versions = [];\r\n    }\r\n    addVersion(module: string, version: string, isAppModule = false) {\r\n        this.logging.info(`Loading Module ${module} Version ${version} IsAppModule ${isAppModule}`);\r\n        this.versions.push({\r\n            module: module,\r\n            version: version,\r\n            isAppModule: isAppModule\r\n        });\r\n    }\r\n    getVersions(): SoftwareVersion[] {\r\n        return this.versions;\r\n    }\r\n\r\n    getVersion(moduleName: string): string {\r\n        const foundModule = this.versions.find(v => v.module === moduleName);\r\n        if (foundModule) {\r\n            return foundModule.version;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import {\r\n  HostListener,\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  AfterViewInit,\r\n} from '@angular/core';\r\nimport { LoggingService } from '../services/logging/logging.service';\r\n\r\n@Directive({ selector: '[ngsFillHeight]' })\r\nexport class FillHeightDirective implements AfterViewInit {\r\n  @Input() footerElement = null;\r\n  @Input() fixedHeight = 0;\r\n  @Input() relativeToParentPercent = 0;\r\n\r\n  constructor(private el: ElementRef, private logger: LoggingService) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.calculateAndSetElementHeight();\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event) {\r\n    this.calculateAndSetElementHeight();\r\n  }\r\n\r\n  private calculateAndSetElementHeight() {\r\n    if (this.relativeToParentPercent > 0) {\r\n      const parentHeight = this.el.nativeElement.parentNode.parentNode\r\n        .parentNode.parentNode.parentNode.parentNode.offsetHeight;\r\n      if (parentHeight > 0) {\r\n        this.el.nativeElement.style.height = `${\r\n          parentHeight * (this.relativeToParentPercent / 100)\r\n        }px`;\r\n      }\r\n    } else if (this.fixedHeight > 0) {\r\n      this.el.nativeElement.style.height = `${this.fixedHeight}px`;\r\n    } else {\r\n      this.el.nativeElement.style.overflow = 'auto';\r\n      let windowHeight = window.innerHeight;\r\n      if (windowHeight === 0) {\r\n        this.logger.error('FillHeight: Window reported zero height');\r\n        windowHeight = 800;\r\n      }\r\n      const elementOffsetTop = this.getElementOffsetTop();\r\n      const elementMarginBottom = this.el.nativeElement.style.marginBottom;\r\n      const footerElementMargin = this.getfooterElementMargin();\r\n\r\n      this.el.nativeElement.style.height = `${\r\n        windowHeight - footerElementMargin - elementOffsetTop - 16\r\n      }px`;\r\n    }\r\n  }\r\n\r\n  private getElementOffsetTop() {\r\n    return this.el.nativeElement.getBoundingClientRect().top;\r\n  }\r\n\r\n  private getfooterElementMargin() {\r\n    if (!this.footerElement) {\r\n      return 0;\r\n    }\r\n    const footerStyle = window.getComputedStyle(this.footerElement);\r\n    return parseInt(footerStyle.height, 10);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ButtonColours } from '@ngscaffolding/models';\r\n\r\n@Pipe({ name: 'buttonColour' })\r\nexport class ButtonColourPipe implements PipeTransform {\r\n  transform(inputColor: string): string {\r\n    let returnColor: string;\r\n\r\n    switch (inputColor) {\r\n      case ButtonColours.primary: {\r\n        returnColor = 'p-button-primary';\r\n        break;\r\n      }\r\n      case ButtonColours.secondary: {\r\n        returnColor = 'p-button-secondary';\r\n        break;\r\n      }\r\n      case ButtonColours.success: {\r\n        returnColor = 'p-button-success';\r\n        break;\r\n      }\r\n      case ButtonColours.info: {\r\n        returnColor = 'p-button-info';\r\n        break;\r\n      }\r\n      case ButtonColours.warning: {\r\n        returnColor = 'p-button-warning';\r\n        break;\r\n      }\r\n      case ButtonColours.danger: {\r\n        returnColor = 'p-button-danger';\r\n        break;\r\n      }\r\n      case ButtonColours.blue: {\r\n        returnColor = 'blue-grey-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.cyan: {\r\n        returnColor = 'cyan-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.teal: {\r\n        returnColor = 'teal-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.orange: {\r\n        returnColor = 'orange-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.deeporange: {\r\n        returnColor = 'deep-orange-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.purple: {\r\n        returnColor = 'purple-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.indigo: {\r\n        returnColor = 'indigo-btn';\r\n        break;\r\n      }\r\n      case ButtonColours.pink: {\r\n        returnColor = 'pink-btn';\r\n        break;\r\n      }\r\n      default: {\r\n        returnColor = 'p-button-info';\r\n      }\r\n    }\r\n    return returnColor;\r\n  }\r\n}\r\n","import * as dateFormatimp from 'dateformat';\r\nconst dateFormat = dateFormatimp;\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { AppSettingsQuery } from '../services/appSettings/appSettings.query';\r\nimport { AppSettings } from '@ngscaffolding/models';\r\n\r\n@Pipe({ name: 'ngsDate' })\r\nexport class NgsDatePipe implements PipeTransform {\r\n  constructor(private appSettings: AppSettingsQuery) {}\r\n  transform(inputDate: Date): string {\r\n    if (inputDate) {\r\n      // If a string gets through, convert to date object\r\n      if (typeof inputDate === 'string' || inputDate instanceof String) {\r\n        inputDate = new Date(inputDate);\r\n      }\r\n\r\n      const userTimezoneOffset = inputDate.getTimezoneOffset() * 60000;\r\n      const zuluDate = new Date(inputDate.getTime() + userTimezoneOffset);\r\n\r\n      const format = this.appSettings.getEntity(AppSettings.dateFormat);\r\n      if (format && format.value) {\r\n        return dateFormat(zuluDate, format.value);\r\n      } else {\r\n        return dateFormat(zuluDate, 'default');\r\n      }\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n","import * as dateFormatimp from 'dateformat';\r\nconst dateFormat = dateFormatimp;\r\n\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { AppSettingsQuery } from '../services/appSettings/appSettings.query';\r\nimport { AppSettings } from '@ngscaffolding/models';\r\n\r\n@Pipe({ name: 'ngsDateTime' })\r\nexport class NgsDateTimePipe implements PipeTransform {\r\n  constructor(private appSettings: AppSettingsQuery) {}\r\n  transform(inputDate: Date): string {\r\n    if (inputDate) {\r\n      // If a string gets through, convert to date object\r\n      if (typeof inputDate === 'string' || inputDate instanceof String) {\r\n        inputDate = new Date(inputDate);\r\n      }\r\n\r\n      const userTimezoneOffset = inputDate.getTimezoneOffset() * 60000;\r\n      const zuluDate = new Date(inputDate.getTime() + userTimezoneOffset);\r\n\r\n      const format = this.appSettings.getEntity(AppSettings.dateTimeFormat);\r\n      if (format && format.value) {\r\n        return dateFormat(zuluDate, format.value);\r\n      } else {\r\n        return dateFormat(zuluDate, 'default');\r\n      }\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'truncateText'\r\n})\r\nexport class TruncateTextPipe implements PipeTransform {\r\n\r\n  transform(value: string, limit: number = 40, trail: String = '…'): string {\r\n    let result = value || '';\r\n\r\n    if (value) {\r\n      const words = value.split(/\\s+/);\r\n      if (words.length > Math.abs(limit)) {\r\n        if (limit < 0) {\r\n          limit *= -1;\r\n          result =\r\n            trail + words.slice(words.length - limit, words.length).join(' ');\r\n        } else {\r\n          result = words.slice(0, limit).join(' ') + trail;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import {\r\n  CanActivate,\r\n  Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot\r\n} from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { RolesService } from '../services/rolesService/roles.service';\r\nimport { UserAuthenticationBase } from '../services/userAuthentication/UserAuthenticationBase';\r\n\r\n@Injectable()\r\nexport class AuthoriseRoleGuard implements CanActivate {\r\n  constructor(\r\n    private authService: UserAuthenticationBase,\r\n    private router: Router,\r\n    private rolesService: RolesService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n\r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    }\r\n\r\n    // No authority, bye bye.\r\n    this.authService.forceLogon(state.url);\r\n    return false;\r\n  }\r\n}\r\n","import { Component, OnInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngs-dialog-window',\r\n    templateUrl: 'dialogWindow.component.html',\r\n    styleUrls: ['dialogWindow.component.scss']\r\n})\r\nexport class DialogWindowComponent implements OnInit, OnChanges, OnDestroy {\r\n    @Output() closed = new EventEmitter<any>();\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {}\r\n    ngOnDestroy(): void {}\r\n    ngOnInit(): void {}\r\n\r\n    cancel(event: any) {\r\n        this.closed.emit(null);\r\n    }\r\n\r\n    save(event: any) {\r\n\r\n    }\r\n}\r\n","<h1>Dialog Window Base Class</h1>\r\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\r\n/* tslint:disable */\r\nexport const VERSION = {\r\n    \"dirty\": true,\r\n    \"raw\": \"608f2a0-dirty\",\r\n    \"hash\": \"608f2a0\",\r\n    \"distance\": null,\r\n    \"tag\": null,\r\n    \"semver\": null,\r\n    \"suffix\": \"608f2a0-dirty\",\r\n    \"semverString\": null,\r\n    \"version\": \"1.1.20\"\r\n};\r\n/* tslint:enable */\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n// Pipes\nimport { ButtonColourPipe } from './pipes/buttonColour.pipe';\nimport { NgsDateTimePipe } from './pipes/ngsDateTime.pipe';\nimport { NgsDatePipe } from './pipes/ngsDate.pipe';\nimport { TruncateTextPipe } from './pipes/truncateText.pipe';\n\n// Directives\nimport { FillHeightDirective } from './directives/fill-height.directive';\n\n// Services\nimport { VersionsService } from './services/versions/versions.service';\n\n// Components\nimport { DialogWindowComponent } from './components/dialogWindow/dialogWindow.component';\n\nimport { VERSION } from './version';\n\n@NgModule({\n    imports: [CommonModule, FormsModule, HttpClientModule],\n    declarations: [\n        FillHeightDirective,\n        ButtonColourPipe,\n        NgsDatePipe,\n        NgsDateTimePipe,\n        TruncateTextPipe,\n        DialogWindowComponent\n    ],\n    exports: [\n        ButtonColourPipe,\n        NgsDatePipe,\n        NgsDateTimePipe,\n        TruncateTextPipe,\n        FillHeightDirective,\n        DialogWindowComponent\n    ]\n})\nexport class CoreModule {\n    static forRoot(): ModuleWithProviders<CoreModule> {\n        return {\n            ngModule: CoreModule\n        };\n    }\n    constructor(versions: VersionsService) {\n        versions.addVersion('@ngscaffolding/core', VERSION.version);\n    }\n}\n","/*\n * Public API Surface of core\n */\n\n\nexport { AppSettingsQuery } from './lib/services/appSettings/appSettings.query';\nexport { AppSettingsService } from './lib/services/appSettings/appSettings.service';\nexport { AppSettingsState, AppSettingsStore } from './lib/services/appSettings/appSettings.store';\n\nexport { AppAuditService } from './lib/services/appAudit/appAudit.service';\nexport { AuditLogService } from './lib/services/auditLog/auditLog.service';\n\nexport { BroadcastService, BroadcastTypes } from './lib/services/broadcast/broadcast.service';\nexport { ComponentLoaderService } from './lib/services/componentLoader.service';\nexport { CoreErrorHandlerService } from './lib/services/coreErrorHandler/coreErrorHandler.service';\nexport { DataSourceQuery } from './lib/services/dataSource/dataSource.query';\nexport { DataSourceService } from './lib/services/dataSource/dataSource.service';\nexport { DataSourceState, DataSourceStore } from './lib/services/dataSource/dataSource.store';\n\nexport { LoggingService } from './lib/services/logging/logging.service';\nexport { MenuQuery } from './lib/services/menu/menu.query';\nexport { MenuService } from './lib/services/menu/menu.service';\nexport { MenuState, MenuStore } from './lib/services/menu/menu.store';\n\nexport { NotificationService } from './lib/services/notification/notification.service';\nexport { ReferenceValuesQuery } from './lib/services/referenceValues/referenceValues.query';\nexport { ReferenceValuesState, ReferenceValuesStore } from './lib/services/referenceValues/referenceValues.store';\nexport { ReferenceValuesService } from './lib/services/referenceValues/refrenceValues.service';\n\nexport { RolesQuery } from './lib/services/rolesService/roles.query';\nexport { RolesService } from './lib/services/rolesService/roles.service';\nexport { RoleState, RolesStore } from './lib/services/rolesService/roles.store';\n\nexport { SpinnerService } from './lib/services/spinnerService/spinner.service';\n\nexport { UserAuthenticationBase } from './lib/services/userAuthentication/UserAuthenticationBase';\nexport { UserAuthenticationQuery } from './lib/services/userAuthentication/userAuthentication.query';\nexport { UserAuthenticationService } from './lib/services/userAuthentication/userAuthentication.service';\nexport { OAuthService } from './lib/services/userAuthentication/userAuthentication.oauth.service';\nexport { AuthenticationState, AuthenticationStore } from './lib/services/userAuthentication/userAuthentication.store';\n\nexport { UserPreferencesQuery } from './lib/services/userPreferences/userPreferences.query';\nexport { UserPreferencesService } from './lib/services/userPreferences/userPreferences.service';\nexport { UserPreferencesState, UserPreferencesStore } from './lib/services/userPreferences/userPreferences.store';\n\nexport { WidgetQuery } from './lib/services/widgetsService/widget.query';\nexport { WidgetService } from './lib/services/widgetsService/widget.service';\nexport { WidgetState, WidgetStore } from './lib/services/widgetsService/widget.store';\n\nexport { UserService } from './lib/services/userService/user.service';\nexport { UserServiceBase } from './lib/services/userService/user.service.base';\nexport { SoftwareVersion, VersionsService } from './lib/services/versions/versions.service';\n\nexport { FillHeightDirective } from './lib/directives/fill-height.directive';\n\n// Pipes\nexport { ButtonColourPipe } from './lib/pipes/buttonColour.pipe';\nexport { NgsDatePipe } from './lib/pipes/ngsDate.pipe';\nexport { NgsDateTimePipe } from './lib/pipes/ngsDateTime.pipe';\nexport { TruncateTextPipe } from './lib/pipes/truncateText.pipe';\n\n// Guards\nexport { AuthoriseRoleGuard } from './lib/routeGuards/authoriseRoleGuard';\n\nexport { DialogWindowComponent } from './lib/components/dialogWindow/dialogWindow.component';\nexport { CoreModule } from './lib/core.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["uuid","dateFormat","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd"],"mappings":"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"}