import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { UserManager } from 'oidc-client';
import { AppSettings, BasicUser } from '@ngscaffolding/models';
import { JwtHelperService } from '@auth0/angular-jwt';
import * as i0 from "@angular/core";
import * as i1 from "./userAuthentication.store";
import * as i2 from "./userAuthentication.query";
import * as i3 from "../appSettings/appSettings.query";
export class OAuthService {
    constructor(authStore, authQuery, appSettingsQuery) {
        this.authStore = authStore;
        this.authQuery = authQuery;
        this.appSettingsQuery = appSettingsQuery;
        this.jwtHelper = new JwtHelperService({});
        appSettingsQuery
            .selectEntity(AppSettings.authOAuthSettings)
            .subscribe((settings) => {
            this.manager = new UserManager(settings.value);
            this.manager.getUser().then((user) => {
                if (user) {
                    this.user = user;
                    this.setToken(this.user.access_token);
                }
            });
        });
    }
    filterItemsByRole(authItems) {
        const returnItems = [];
        if (authItems) {
            authItems.forEach((authItem) => {
                if (this.checkByRoles(authItem)) {
                    returnItems.push(authItem);
                }
            });
        }
        return returnItems;
    }
    // Check if user passes muster
    checkByRoles(authItem) {
        // No roles = always okay
        if (!authItem.roles) {
            return true;
        }
        let isAllowed = false;
        const user = this.authQuery.getUser();
        if (user.role) {
            user.role.forEach((role) => {
                authItem.roles.forEach((authRole) => {
                    if (role === authRole) {
                        isAllowed = true;
                    }
                });
            });
        }
        return isAllowed;
    }
    getToken() {
        return this.user.access_token;
    }
    forceLogon() {
        this.logon();
    }
    logon(userName = '', password = '') {
        return this.manager.signinRedirect();
    }
    logoff() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.manager.signoutRedirect();
        });
    }
    completeAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            this.user = yield this.manager.signinRedirectCallback();
            this.setToken(this.user.access_token);
        });
    }
    isAuthenticated() {
        this.manager.getUser().then((user) => {
            this.user = user;
        });
        return this.user != null && !this.user.expired;
    }
    authorizationHeaderValue() {
        return `${this.user.token_type} ${this.user.access_token}`;
    }
    name() {
        return this.user != null ? this.user.profile.name : '';
    }
    setToken(token) {
        // New AuthUser Based on Token
        const tokenDetails = this.jwtHelper.decodeToken(token);
        const newUser = new BasicUser();
        if (tokenDetails['name']) {
            newUser.name = tokenDetails['name'];
        }
        else if (tokenDetails['firstName'] && tokenDetails['lastName']) {
            newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];
        }
        if (tokenDetails['role']) {
            newUser.role = tokenDetails['role'];
        }
        if (tokenDetails['email']) {
            newUser.userId = tokenDetails['email'];
            newUser.email = tokenDetails['email'];
        }
        this.authStore.update({
            token: token,
            userDetails: newUser,
            authenticated: true,
        });
    }
}
OAuthService.ɵfac = function OAuthService_Factory(t) { return new (t || OAuthService)(i0.ɵɵinject(i1.AuthenticationStore), i0.ɵɵinject(i2.UserAuthenticationQuery), i0.ɵɵinject(i3.AppSettingsQuery)); };
OAuthService.ɵprov = i0.ɵɵdefineInjectable({ token: OAuthService, factory: OAuthService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(OAuthService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.AuthenticationStore }, { type: i2.UserAuthenticationQuery }, { type: i3.AppSettingsQuery }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,