import { ErrorHandler, Injectable } from '@angular/core';
import { ErrorModel, AppSettings } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "../appSettings/appSettings.service";
import * as i2 from "@angular/common/http";
export class CoreErrorHandlerService extends ErrorHandler {
    constructor(appSettingsService, http) {
        super();
        this.appSettingsService = appSettingsService;
        this.http = http;
    }
    logError(error, source = null) { }
    processError(error, source = null) { }
    handleError(error, source = null) {
        super.handleError(error);
        if (this.appSettingsService.getValue(AppSettings.errorLogConsole)) {
            console.error(error.message);
        }
        if (this.appSettingsService.getValue(AppSettings.errorLogServer)) {
            const errorModel = new ErrorModel(error);
            if (source) {
                errorModel.source = source;
            }
            if (error.stack) {
                errorModel.stackTrace = error.stack;
            }
            // Consume any errors here. Otherwise we will just get stuck
            try {
                // This post is a fire and forget. Don't have to authorise either
                this.http.post(this.appSettingsService.getValue(AppSettings.apiHome) + '/api/v1/error', errorModel).subscribe(data => {
                    // alert('ID: ' + data.id);
                }, err => {
                    console.log('Unable to send Error to Server, offline?');
                });
            }
            catch (err) {
                console.log('Unable to send Error to Server, offline?');
            }
        }
        if (this.appSettingsService.getValue(AppSettings.errorShowUser)) {
            // TODO: Show User Error
        }
    }
}
CoreErrorHandlerService.ɵfac = function CoreErrorHandlerService_Factory(t) { return new (t || CoreErrorHandlerService)(i0.ɵɵinject(i1.AppSettingsService), i0.ɵɵinject(i2.HttpClient)); };
CoreErrorHandlerService.ɵprov = i0.ɵɵdefineInjectable({ token: CoreErrorHandlerService, factory: CoreErrorHandlerService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(CoreErrorHandlerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.AppSettingsService }, { type: i2.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZUVycm9ySGFuZGxlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL25nc2NhZmZvbGRpbmcvY29yZS9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY29yZUVycm9ySGFuZGxlci9jb3JlRXJyb3JIYW5kbGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQU9oRSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsWUFBWTtJQUN2RCxZQUNVLGtCQUFzQyxFQUN0QyxJQUFnQjtRQUV4QixLQUFLLEVBQUUsQ0FBQztRQUhBLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUcxQixDQUFDO0lBRU0sUUFBUSxDQUFDLEtBQUssRUFBRSxTQUFpQixJQUFJLElBQUcsQ0FBQztJQUV4QyxZQUFZLENBQUMsS0FBSyxFQUFFLFNBQWlCLElBQUksSUFBRyxDQUFDO0lBRXJELFdBQVcsQ0FBQyxLQUFLLEVBQUUsU0FBaUIsSUFBSTtRQUN0QyxLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXpCLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDakUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7UUFDRCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ2hFLE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXpDLElBQUksTUFBTSxFQUFFO2dCQUNWLFVBQVUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQzVCO1lBRUQsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNmLFVBQVUsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNyQztZQUVELDREQUE0RDtZQUM1RCxJQUFJO2dCQUNGLGlFQUFpRTtnQkFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FDM0csSUFBSSxDQUFDLEVBQUU7b0JBQ0wsMkJBQTJCO2dCQUM3QixDQUFDLEVBQ0QsR0FBRyxDQUFDLEVBQUU7b0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO2dCQUMxRCxDQUFDLENBQ0YsQ0FBQzthQUNIO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO2FBQ3pEO1NBQ0Y7UUFDRCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQy9ELHdCQUF3QjtTQUN6QjtJQUNILENBQUM7OzhGQS9DVSx1QkFBdUI7K0RBQXZCLHVCQUF1QixXQUF2Qix1QkFBdUIsbUJBRnRCLE1BQU07a0RBRVAsdUJBQXVCO2NBSG5DLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9ySGFuZGxlciwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuaW1wb3J0IHsgRXJyb3JNb2RlbCwgQXBwU2V0dGluZ3MgfSBmcm9tICdAbmdzY2FmZm9sZGluZy9tb2RlbHMnO1xyXG5pbXBvcnQgeyBBcHBTZXR0aW5nc1NlcnZpY2UgfSBmcm9tICcuLi9hcHBTZXR0aW5ncy9hcHBTZXR0aW5ncy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24uc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb3JlRXJyb3JIYW5kbGVyU2VydmljZSBleHRlbmRzIEVycm9ySGFuZGxlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGFwcFNldHRpbmdzU2VydmljZTogQXBwU2V0dGluZ3NTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50XHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxvZ0Vycm9yKGVycm9yLCBzb3VyY2U6IHN0cmluZyA9IG51bGwpIHt9XHJcblxyXG4gIHByaXZhdGUgcHJvY2Vzc0Vycm9yKGVycm9yLCBzb3VyY2U6IHN0cmluZyA9IG51bGwpIHt9XHJcblxyXG4gIGhhbmRsZUVycm9yKGVycm9yLCBzb3VyY2U6IHN0cmluZyA9IG51bGwpIHtcclxuICAgIHN1cGVyLmhhbmRsZUVycm9yKGVycm9yKTtcclxuXHJcbiAgICBpZiAodGhpcy5hcHBTZXR0aW5nc1NlcnZpY2UuZ2V0VmFsdWUoQXBwU2V0dGluZ3MuZXJyb3JMb2dDb25zb2xlKSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuYXBwU2V0dGluZ3NTZXJ2aWNlLmdldFZhbHVlKEFwcFNldHRpbmdzLmVycm9yTG9nU2VydmVyKSkge1xyXG4gICAgICBjb25zdCBlcnJvck1vZGVsID0gbmV3IEVycm9yTW9kZWwoZXJyb3IpO1xyXG5cclxuICAgICAgaWYgKHNvdXJjZSkge1xyXG4gICAgICAgIGVycm9yTW9kZWwuc291cmNlID0gc291cmNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcclxuICAgICAgICBlcnJvck1vZGVsLnN0YWNrVHJhY2UgPSBlcnJvci5zdGFjaztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29uc3VtZSBhbnkgZXJyb3JzIGhlcmUuIE90aGVyd2lzZSB3ZSB3aWxsIGp1c3QgZ2V0IHN0dWNrXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gVGhpcyBwb3N0IGlzIGEgZmlyZSBhbmQgZm9yZ2V0LiBEb24ndCBoYXZlIHRvIGF1dGhvcmlzZSBlaXRoZXJcclxuICAgICAgICB0aGlzLmh0dHAucG9zdCh0aGlzLmFwcFNldHRpbmdzU2VydmljZS5nZXRWYWx1ZShBcHBTZXR0aW5ncy5hcGlIb21lKSArICcvYXBpL3YxL2Vycm9yJywgZXJyb3JNb2RlbCkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGFsZXJ0KCdJRDogJyArIGRhdGEuaWQpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGVyciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmFibGUgdG8gc2VuZCBFcnJvciB0byBTZXJ2ZXIsIG9mZmxpbmU/Jyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byBzZW5kIEVycm9yIHRvIFNlcnZlciwgb2ZmbGluZT8nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuYXBwU2V0dGluZ3NTZXJ2aWNlLmdldFZhbHVlKEFwcFNldHRpbmdzLmVycm9yU2hvd1VzZXIpKSB7XHJcbiAgICAgIC8vIFRPRE86IFNob3cgVXNlciBFcnJvclxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=