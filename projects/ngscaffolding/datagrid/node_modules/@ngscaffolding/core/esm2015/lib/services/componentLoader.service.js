import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class ComponentLoaderService {
    constructor(loader, injector) {
        this.loader = loader;
        this.injector = injector;
        this.componentRegistry = {
            'lazy-component': {
                modulePath: './lazy-components/lazy-components.module#LazyComponentsModule',
                moduleRef: null
            }
        };
    }
    registerComponent(name, modulePath = null) {
        if (!this.componentRegistry[name]) {
            this.componentRegistry[name] = {
                modulePath: modulePath,
                moduleRef: null
            };
        }
    }
    loadComponent(componentTag) {
        const cmpRegistryEntry = this.componentRegistry[componentTag];
        if (!cmpRegistryEntry) {
            throw new Error(`Unrecognized component "${componentTag}". Make sure it is registered in the component registry`);
        }
        if (cmpRegistryEntry.modulePath) {
            // Provided a path so this is a lazy loaded component
            if (cmpRegistryEntry.moduleRef) {
                return new Promise(resolve => {
                    const componentInstance = document.createElement(componentTag);
                    resolve(componentInstance);
                });
            }
            else {
                const path = cmpRegistryEntry.modulePath;
                return new Promise((resolve, reject) => {
                    this.loader
                        .load(path)
                        .then(moduleFactory => {
                        const moduleRef = moduleFactory.create(this.injector).instance;
                        cmpRegistryEntry.moduleRef = moduleRef;
                        // instantiate the component
                        const componentInstance = document.createElement(componentTag);
                        resolve(componentInstance);
                    })
                        .catch(err => {
                        console.error('error loading module', err);
                        reject(err);
                    });
                });
            }
        }
        else {
            // No path so simple Angular Element already webpacked
            return new Promise((resolve, reject) => {
                const componentInstance = document.createElement(componentTag);
                resolve(componentInstance);
            });
        }
    }
}
ComponentLoaderService.ɵfac = function ComponentLoaderService_Factory(t) { return new (t || ComponentLoaderService)(i0.ɵɵinject(i0.NgModuleFactoryLoader), i0.ɵɵinject(i0.Injector)); };
ComponentLoaderService.ɵprov = i0.ɵɵdefineInjectable({ token: ComponentLoaderService, factory: ComponentLoaderService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ComponentLoaderService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i0.NgModuleFactoryLoader }, { type: i0.Injector }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50TG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdzY2FmZm9sZGluZy9jb3JlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9jb21wb25lbnRMb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFtQyxNQUFNLGVBQWUsQ0FBQzs7QUFLNUUsTUFBTSxPQUFPLHNCQUFzQjtJQVNqQyxZQUNVLE1BQTZCLEVBQzdCLFFBQWtCO1FBRGxCLFdBQU0sR0FBTixNQUFNLENBQXVCO1FBQzdCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFWcEIsc0JBQWlCLEdBQUc7WUFDMUIsZ0JBQWdCLEVBQUU7Z0JBQ2hCLFVBQVUsRUFDUiwrREFBK0Q7Z0JBQ2pFLFNBQVMsRUFBRSxJQUFJO2FBQ2hCO1NBQ0YsQ0FBQztJQUtDLENBQUM7SUFFSixpQkFBaUIsQ0FBQyxJQUFZLEVBQUUsYUFBcUIsSUFBSTtRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRztnQkFDN0IsVUFBVSxFQUFFLFVBQVU7Z0JBQ3RCLFNBQVMsRUFBRSxJQUFJO2FBQ2hCLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxhQUFhLENBQUMsWUFBb0I7UUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQ2IsMkJBQTJCLFlBQVkseURBQXlELENBQ2pHLENBQUM7U0FDSDtRQUVELElBQUksZ0JBQWdCLENBQUMsVUFBVSxFQUFFO1lBQy9CLHFEQUFxRDtZQUNyRCxJQUFJLGdCQUFnQixDQUFDLFNBQVMsRUFBRTtnQkFDOUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDM0IsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUMvRCxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDN0IsQ0FBQyxDQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxNQUFNLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7Z0JBRXpDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxNQUFNO3lCQUNSLElBQUksQ0FBQyxJQUFJLENBQUM7eUJBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO3dCQUNwQixNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUM7d0JBQy9ELGdCQUFnQixDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7d0JBRXZDLDRCQUE0Qjt3QkFDNUIsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUMvRCxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDN0IsQ0FBQyxDQUFDO3lCQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTt3QkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxDQUFDO3dCQUMzQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2QsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxDQUFDLENBQUM7YUFDSjtTQUNGO2FBQU07WUFDTCxzREFBc0Q7WUFDdEQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDckMsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUMvRCxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7NEZBakVVLHNCQUFzQjs4REFBdEIsc0JBQXNCLFdBQXRCLHNCQUFzQixtQkFGckIsTUFBTTtrREFFUCxzQkFBc0I7Y0FIbEMsVUFBVTtlQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdNb2R1bGVGYWN0b3J5TG9hZGVyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50TG9hZGVyU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBjb21wb25lbnRSZWdpc3RyeSA9IHtcclxuICAgICdsYXp5LWNvbXBvbmVudCc6IHtcclxuICAgICAgbW9kdWxlUGF0aDpcclxuICAgICAgICAnLi9sYXp5LWNvbXBvbmVudHMvbGF6eS1jb21wb25lbnRzLm1vZHVsZSNMYXp5Q29tcG9uZW50c01vZHVsZScsXHJcbiAgICAgIG1vZHVsZVJlZjogbnVsbFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBsb2FkZXI6IE5nTW9kdWxlRmFjdG9yeUxvYWRlcixcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgKSB7fVxyXG5cclxuICByZWdpc3RlckNvbXBvbmVudChuYW1lOiBzdHJpbmcsIG1vZHVsZVBhdGg6IHN0cmluZyA9IG51bGwpIHtcclxuICAgIGlmICghdGhpcy5jb21wb25lbnRSZWdpc3RyeVtuYW1lXSkge1xyXG4gICAgICB0aGlzLmNvbXBvbmVudFJlZ2lzdHJ5W25hbWVdID0ge1xyXG4gICAgICAgIG1vZHVsZVBhdGg6IG1vZHVsZVBhdGgsXHJcbiAgICAgICAgbW9kdWxlUmVmOiBudWxsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsb2FkQ29tcG9uZW50KGNvbXBvbmVudFRhZzogc3RyaW5nKTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xyXG4gICAgY29uc3QgY21wUmVnaXN0cnlFbnRyeSA9IHRoaXMuY29tcG9uZW50UmVnaXN0cnlbY29tcG9uZW50VGFnXTtcclxuICAgIGlmICghY21wUmVnaXN0cnlFbnRyeSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYFVucmVjb2duaXplZCBjb21wb25lbnQgXCIke2NvbXBvbmVudFRhZ31cIi4gTWFrZSBzdXJlIGl0IGlzIHJlZ2lzdGVyZWQgaW4gdGhlIGNvbXBvbmVudCByZWdpc3RyeWBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY21wUmVnaXN0cnlFbnRyeS5tb2R1bGVQYXRoKSB7XHJcbiAgICAgIC8vIFByb3ZpZGVkIGEgcGF0aCBzbyB0aGlzIGlzIGEgbGF6eSBsb2FkZWQgY29tcG9uZW50XHJcbiAgICAgIGlmIChjbXBSZWdpc3RyeUVudHJ5Lm1vZHVsZVJlZikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgIGNvbnN0IGNvbXBvbmVudEluc3RhbmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb21wb25lbnRUYWcpO1xyXG4gICAgICAgICAgcmVzb2x2ZShjb21wb25lbnRJbnN0YW5jZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IGNtcFJlZ2lzdHJ5RW50cnkubW9kdWxlUGF0aDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGVyXHJcbiAgICAgICAgICAgIC5sb2FkKHBhdGgpXHJcbiAgICAgICAgICAgIC50aGVuKG1vZHVsZUZhY3RvcnkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IG1vZHVsZVJlZiA9IG1vZHVsZUZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpLmluc3RhbmNlO1xyXG4gICAgICAgICAgICAgIGNtcFJlZ2lzdHJ5RW50cnkubW9kdWxlUmVmID0gbW9kdWxlUmVmO1xyXG5cclxuICAgICAgICAgICAgICAvLyBpbnN0YW50aWF0ZSB0aGUgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50SW5zdGFuY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudFRhZyk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShjb21wb25lbnRJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGxvYWRpbmcgbW9kdWxlJywgZXJyKTtcclxuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE5vIHBhdGggc28gc2ltcGxlIEFuZ3VsYXIgRWxlbWVudCBhbHJlYWR5IHdlYnBhY2tlZFxyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEluc3RhbmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb21wb25lbnRUYWcpO1xyXG4gICAgICAgIHJlc29sdmUoY29tcG9uZW50SW5zdGFuY2UpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19