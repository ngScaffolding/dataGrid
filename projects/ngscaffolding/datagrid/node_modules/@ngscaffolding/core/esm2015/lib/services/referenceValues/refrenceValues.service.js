import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { AppSettings } from '@ngscaffolding/models';
import { timeout, retry } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../appSettings/appSettings.service";
import * as i3 from "./referenceValues.query";
import * as i4 from "./referenceValues.store";
import * as i5 from "../logging/logging.service";
export class ReferenceValuesService {
    constructor(http, appSettingsService, refValuesQuery, refValuesStore, logger) {
        this.http = http;
        this.appSettingsService = appSettingsService;
        this.refValuesQuery = refValuesQuery;
        this.refValuesStore = refValuesStore;
        this.logger = logger;
        this.className = 'ReferenceValuesService';
        this.requestsInFlight = new Map();
    }
    //
    // Get a single string value from References
    //
    getValue(name, group) {
        return new Observable(observer => {
            this.getReferenceValue(name, group).subscribe(reference => {
                if (reference) {
                    observer.next(reference.value);
                }
                else {
                    observer.next(null);
                }
                observer.complete();
            });
        });
    }
    // Clear all Reference values with this name as root of key
    clearReferenceValue(clearNames) {
        let namesArray;
        if (Array.isArray(clearNames)) {
            namesArray = clearNames;
        }
        else {
            namesArray = [clearNames];
        }
        for (const loopName of namesArray) {
            const list = this.refValuesQuery.getAll({ filterBy: entity => entity.name.startsWith(loopName) });
            for (const refValue of list) {
                this.refValuesStore.remove(refValue.compositeKey);
            }
        }
    }
    setReferenceValue(referenceValue) {
        referenceValue.compositeKey = this.getKey(referenceValue.name, '');
        this.refValuesStore.upsert(this.getKey(referenceValue.name, ''), referenceValue);
    }
    isExpired(refVal) {
        const cacheSeconds = refVal.cacheSeconds || 31556952; // Default to a year
        const nowDate = new Date();
        const expires = new Date(refVal.whenStored);
        expires.setSeconds(expires.getSeconds() + cacheSeconds);
        return nowDate > expires;
    }
    //
    // Get a complex ReferenceValue (May include multiple values)
    //
    getReferenceValue(name, seed = '', childDepth = 0) {
        if (this.refValuesQuery.hasEntity(this.getKey(name, seed))) {
            const cacheValue = this.refValuesQuery.getEntity(this.getKey(name, seed));
            if (this.isExpired(cacheValue)) {
                // Expired cache value. Go get a new one
                return this.downloadRefValue(name, seed);
            }
            // If we get one from Cache, thats handy to use
            this.logger.info(`Reference Values From Cache ${name}::${seed}`);
            return new Observable(observer => {
                observer.next(this.refValuesQuery.getEntity(this.getKey(name, seed)));
                observer.complete();
            });
        }
        else if (childDepth > 0) {
            const refValue = this.refValuesQuery.getEntity(this.getKey(name, ''));
            if (refValue) {
                const parentRef = refValue.referenceValueItems.find(parent => parent.value === seed);
                if (parentRef) {
                    const clone = Object.assign({}, refValue);
                    clone.referenceValueItems = parentRef.referenceValueItems;
                    return new Observable(observer => {
                        observer.next(clone);
                        observer.complete();
                    });
                }
            }
        }
        else {
            return this.downloadRefValue(name, seed);
        }
    }
    downloadRefValue(name, seed) {
        // Nothing in the Cache
        if (this.requestsInFlight.has(this.getKey(name, seed))) {
            // We have already asked for this, return our existing Observable
            return this.requestsInFlight.get(this.getKey(name, seed));
        }
        else {
            const wrapper = new Observable(observer => {
                // Call HTTP Here
                this.logger.info(`Reference Values From HTTP ${name}::${seed}`);
                const httpRequest = this.http
                    .get(`${this.appSettingsService.getValue(AppSettings.apiHome)}/api/v1/referencevalues?name=${name}&seed=${seed}`)
                    .pipe(timeout(20000), retry(3));
                httpRequest.subscribe(value => {
                    value.compositeKey = this.getKey(name, seed);
                    value.whenStored = new Date();
                    this.refValuesStore.upsert(this.getKey(name, seed), value);
                    this.requestsInFlight.delete(this.getKey(name, seed));
                    observer.next(value);
                    observer.complete();
                }, err => {
                    // Error here. If we have a valid value, respond with that
                    if (this.refValuesQuery.hasEntity(this.getKey(name, seed))) {
                        this.logger.info(`Reference Values From HTTP Failed using last Cache ${name}::${seed}`);
                        observer.next(this.refValuesQuery.getEntity(this.getKey(name, seed)));
                        observer.complete();
                    }
                    else {
                        observer.error(err);
                    }
                });
            });
            this.requestsInFlight.set(this.getKey(name, seed), wrapper);
            return wrapper;
        }
    }
    getKey(name, seed) {
        return `${name}::${seed}`;
    }
}
ReferenceValuesService.ɵfac = function ReferenceValuesService_Factory(t) { return new (t || ReferenceValuesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppSettingsService), i0.ɵɵinject(i3.ReferenceValuesQuery), i0.ɵɵinject(i4.ReferenceValuesStore), i0.ɵɵinject(i5.LoggingService)); };
ReferenceValuesService.ɵprov = i0.ɵɵdefineInjectable({ token: ReferenceValuesService, factory: ReferenceValuesService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ReferenceValuesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.AppSettingsService }, { type: i3.ReferenceValuesQuery }, { type: i4.ReferenceValuesStore }, { type: i5.LoggingService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,