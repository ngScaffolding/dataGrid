import { Observable } from 'rxjs';
import { timeout } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { HttpParams, HttpHeaders } from '@angular/common/http';
import { BasicUser, AppSettings } from '@ngscaffolding/models';
import { JwtHelperService } from '@auth0/angular-jwt';
import { resetStores } from '@datorama/akita';
import * as i0 from "@angular/core";
import * as i1 from "../logging/logging.service";
import * as i2 from "@angular/common/http";
import * as i3 from "./userAuthentication.store";
import * as i4 from "./userAuthentication.query";
import * as i5 from "../appSettings/appSettings.service";
import * as i6 from "@angular/router";
export class UserAuthenticationService {
    constructor(logger, http, authStore, authQuery, appSettingsService, router) {
        this.logger = logger;
        this.http = http;
        this.authStore = authStore;
        this.authQuery = authQuery;
        this.appSettingsService = appSettingsService;
        this.router = router;
        this.tokenStorageKey = 'USER_TOKEN';
        logger.info('UserAuthorisationService - Constructor');
        this.jwtHelper = new JwtHelperService({});
        this.loadUserTokenFromStorage();
    }
    filterItemsByRole(authItems) {
        const returnItems = [];
        if (authItems) {
            authItems.forEach(authItem => {
                if (this.checkByRoles(authItem)) {
                    returnItems.push(authItem);
                }
            });
        }
        return returnItems;
    }
    // Check if user passes muster
    checkByRoles(authItem) {
        // No roles = always okay
        if (!authItem.roles) {
            return true;
        }
        let isAllowed = false;
        const user = this.authQuery.getUser();
        if (user.role) {
            user.role.forEach(role => {
                authItem.roles.forEach(authRole => {
                    if (role === authRole) {
                        isAllowed = true;
                    }
                });
            });
        }
        return isAllowed;
    }
    completeAuthentication() { }
    isAuthenticated() {
        const token = this.getToken();
        const tokenDetails = this.jwtHelper.decodeToken(token);
        return tokenDetails && !this.jwtHelper.isTokenExpired(token);
    }
    authorizationHeaderValue() { }
    name() {
        return 'Hello World';
    }
    forceLogon(returnUrl) {
        this.logoff();
        this.router.navigate(['login'], { queryParams: { returnUrl: returnUrl } });
    }
    getToken() {
        return this.authQuery.getValue().token;
    }
    loadUserTokenFromStorage() {
        const savedToken = localStorage.getItem(this.tokenStorageKey); // Loaded from Saved Storage
        if (savedToken !== null) {
            // New AuthUser Based on Token
            if (!this.jwtHelper.isTokenExpired(savedToken)) {
                // If all Good
                this.logger.info('Token from Storage - Token Loaded and not Expired');
                this.setToken(savedToken);
            }
            else {
                // Expired Token
                this.logger.info('Token from Storage - Token Expired - Not using');
            }
        }
        else {
            // No token
            this.logger.info('Token from Storage - No Token Available');
        }
    }
    setToken(token) {
        // New AuthUser Based on Token
        const tokenDetails = this.jwtHelper.decodeToken(token);
        const newUser = new BasicUser();
        if (tokenDetails['firstName'] && tokenDetails['lastName']) {
            newUser.name = tokenDetails['firstName'] + ' ' + tokenDetails['lastName'];
        }
        if (tokenDetails['sub']) {
            newUser.userId = tokenDetails['sub'];
        }
        if (tokenDetails['role']) {
            newUser.role = tokenDetails['role'];
        }
        if (tokenDetails['email']) {
            newUser.email = tokenDetails['email'];
        }
        this.authStore.update({ token: token, userDetails: newUser, authenticated: true });
    }
    logon(userName, password) {
        return new Observable(observer => {
            let body = new HttpParams();
            body = body
                .append('username', userName)
                .append('password', password)
                .append('grant_type', 'password')
                .append('client_id', this.appSettingsService.getValue(AppSettings.authClientId))
                .append('client_secret', this.appSettingsService.getValue(AppSettings.authClientSecret))
                .append('scope', this.appSettingsService.getValue(AppSettings.authScope) + ' offline_access openid');
            this.http
                .post(this.appSettingsService.getValue(AppSettings.apiAuth) + this.appSettingsService.getValue(AppSettings.authTokenEndpoint), body, {
                headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')
            })
                .pipe(timeout(30000))
                .subscribe(response => {
                // chek if user is is in 'user' role
                const tokenDetails = this.jwtHelper.decodeToken(response['access_token']);
                const requiredRole = this.appSettingsService.getValue(AppSettings.authRequiredRole);
                if (tokenDetails['role']) {
                    if (requiredRole && !tokenDetails['role'].includes(requiredRole)) {
                        observer.error('Unauthorised');
                    }
                    else {
                        // Save Token in Storage if needed
                        if (this.appSettingsService.getValue(AppSettings.authSaveinLocalStorage)) {
                            localStorage.setItem(this.tokenStorageKey, response['access_token']);
                        }
                        // Load our details from this token
                        this.setToken(response['access_token']);
                        if (response['refresh_token']) {
                            // this.refreshToken = response['refresh_token'];
                        }
                        observer.next(null);
                        observer.complete();
                    }
                }
            }, err => {
                observer.error(err);
            });
        });
    }
    logoff() {
        if (this.appSettingsService.getValue(AppSettings.authSaveinLocalStorage)) {
            // Remove token from Local Storage
            localStorage.removeItem(this.tokenStorageKey);
        }
        // Clear Akita Stores
        resetStores({ exclude: ['appSettings'] });
        this.authStore.update({ token: null, userDetails: null, authenticated: false });
    }
}
UserAuthenticationService.ɵfac = function UserAuthenticationService_Factory(t) { return new (t || UserAuthenticationService)(i0.ɵɵinject(i1.LoggingService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AuthenticationStore), i0.ɵɵinject(i4.UserAuthenticationQuery), i0.ɵɵinject(i5.AppSettingsService), i0.ɵɵinject(i6.Router)); };
UserAuthenticationService.ɵprov = i0.ɵɵdefineInjectable({ token: UserAuthenticationService, factory: UserAuthenticationService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(UserAuthenticationService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i1.LoggingService }, { type: i2.HttpClient }, { type: i3.AuthenticationStore }, { type: i4.UserAuthenticationQuery }, { type: i5.AppSettingsService }, { type: i6.Router }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,