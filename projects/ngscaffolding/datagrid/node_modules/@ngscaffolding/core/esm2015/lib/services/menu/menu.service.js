import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, Observable } from 'rxjs';
import { timeout, finalize } from 'rxjs/operators';
import { AppSettings } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./menu.store";
import * as i3 from "./menu.query";
import * as i4 from "../appSettings/appSettings.query";
import * as i5 from "../userAuthentication/userAuthentication.query";
import * as i6 from "../logging/logging.service";
import * as i7 from "../rolesService/roles.service";
export class MenuService {
    constructor(http, menuStore, menuQuery, appSettingsQuery, authQuery, log, rolesService) {
        this.http = http;
        this.menuStore = menuStore;
        this.menuQuery = menuQuery;
        this.appSettingsQuery = appSettingsQuery;
        this.authQuery = authQuery;
        this.log = log;
        this.rolesService = rolesService;
        this.methodName = 'MenuService';
        this.masterListMenu = [];
        this.routes = [];
        this.menuItems = [];
        this.routeSubject = new BehaviorSubject(this.routes);
        this.httpInFlight = false;
        this.lockCount = 0;
        this.menuDownloaded = false;
        // Wait for settings, then load from server
        combineLatest([
            this.authQuery.authenticated$,
            this.appSettingsQuery.selectEntity(AppSettings.apiHome),
            this.appSettingsQuery.selectEntity(AppSettings.isMobile)
        ]).subscribe(([authenticated, apiHome, isMobile]) => {
            if (authenticated && apiHome && isMobile && !this.menuDownloaded) {
                this.apiHome = apiHome.value;
                if (!this.httpInFlight) {
                    this.downloadMenuItems(isMobile.value || false);
                }
            }
            else if (!authenticated) {
                this.menuDownloaded = false;
                this.lockCount = 0;
            }
        });
    }
    addLock() {
        this.lockCount++;
        this.log.info(`MENU Service: Locks on Loading`, this.methodName, this.lockCount);
        this.menuStore.setLoading(true);
    }
    setCurrent(name) {
        this.menuStore.setActive(name);
    }
    removeLock() {
        this.lockCount--;
        this.log.info(`MENU Service: Locks on Loading`, this.methodName, this.lockCount);
        if (this.lockCount === 0) {
            this.menuStore.setLoading(false);
        }
    }
    addMenuItemsFromCode(menuItems, roles = null) {
        this.addLock();
        this.log.info('Adding MenuItems menuItems', this.methodName, menuItems);
        // Wait till user authorised
        this.authQuery.authenticated$.subscribe(authorised => {
            if (authorised) {
                // Save for later use
                this.addMenuItems(menuItems);
                this.removeLock();
            }
        });
    }
    getFolders() {
        return this.menuQuery.getAll({
            filterBy: [entity => entity.type === "folder" /* Folder */]
        });
    }
    delete(menuItem) {
        return new Observable(observer => {
            const obs = this.http.delete(`${this.apiHome}/api/v1/menuitems/${menuItem.name}`);
            obs.subscribe(() => {
                // Remove from our store
                this.menuStore.remove(menuItem.name);
                // Remove from Tree
                const existingMenus = JSON.parse(JSON.stringify(this.menuQuery.getValue())).menuItems;
                let parentMenu;
                if (menuItem.parent) {
                    parentMenu = existingMenus.find(menu => menu.name && menu.name.toLowerCase() === menuItem.parent.toLowerCase());
                }
                const foundIndex = parentMenu.items.findIndex(childMenu => childMenu.name && childMenu.name === menuItem.name);
                parentMenu.items.splice(foundIndex, 1);
                // Update tree and tell the world
                this.menuStore.update({ menuItems: existingMenus });
                observer.next();
                observer.complete();
            }, err => {
                observer.error(err);
            });
        });
    }
    saveMenuItem(menuItem) {
        return this.http.post(this.apiHome + '/api/v1/menuitems', menuItem);
    }
    updateExistingMenuItem(menuItem) {
        // Is this existing?
        const existing = this.menuQuery.hasEntity(menuItem.name);
        if (existing) {
            this.menuStore.upsert(menuItem.name, menuItem);
        }
        else {
            // Add to reference list of menus
            this.menuStore.add(menuItem);
        }
        const existingMenus = JSON.parse(JSON.stringify(this.menuQuery.getAll()));
        let parentMenu;
        if (menuItem.parent) {
            parentMenu = existingMenus.find(menu => menu.name.toLowerCase() === menuItem.parent.toLowerCase());
        }
        // Add to treeview for menu rendering
        if (!parentMenu.items || !Array.isArray(parentMenu.items)) {
            parentMenu.items = [];
        }
        if (existing) {
            const foundIndex = parentMenu.items.findIndex(childMenu => childMenu.name === menuItem.name);
            parentMenu.items[foundIndex] = menuItem;
        }
        else {
            parentMenu.items.push(menuItem);
        }
        // Update tree and tell the world
        this.menuStore.update({ menuItems: existingMenus });
    }
    // Iterative Call
    addMenuItemsToReferenceList(menuItems) {
        menuItems.forEach(menuItem => {
            // Add to Entity Store
            this.menuStore.upsert(menuItem.name, menuItem);
            if (menuItem.items && Array.isArray(menuItem.items)) {
                this.addMenuItemsToReferenceList(menuItem.items);
            }
        });
    }
    removeUnauthorisedMenuItems(menuItems) {
        const user = this.authQuery.getValue();
        let userRoles = [];
        if (user && user.userDetails) {
            userRoles = user.userDetails.role;
        }
        const removingMenus = [];
        let returnMenus = JSON.parse(JSON.stringify(menuItems));
        for (let menuIndex = 0; menuIndex < returnMenus.length; menuIndex++) {
            const menuItem = returnMenus[menuIndex];
            let removingThis = false;
            // makes sure roles is array
            let checkingRoles = [];
            if (!menuItem.roles) {
                checkingRoles = [];
            }
            else if (Array.isArray(menuItem.roles)) {
                checkingRoles = [...menuItem.roles];
            }
            else {
                checkingRoles = [menuItem.roles];
            }
            // Is this role protected
            if (checkingRoles && checkingRoles.length > 0) {
                if (userRoles && checkingRoles.filter(allowedRole => userRoles.indexOf(allowedRole) !== -1).length === 0) {
                    // No Authority. Remove
                    removingThis = true;
                    removingMenus.push(menuItem.name);
                }
            }
            if (!removingThis && menuItem.items) {
                menuItem.items = this.removeUnauthorisedMenuItems(menuItem.items);
            }
        }
        if (removingMenus.length > 0) {
            returnMenus = menuItems.filter(menu => removingMenus.findIndex(remove => remove === menu.name) === -1);
        }
        return returnMenus;
    }
    downloadMenuItems(isMobile) {
        // Mark loading status
        this.addLock();
        this.httpInFlight = true;
        const newMenuItems = [];
        this.http
            .get(`${this.apiHome}/api/v1/menuitems?mobile=${isMobile}`)
            .pipe(timeout(60000), finalize(() => {
            this.httpInFlight = false;
            this.removeLock();
        }))
            .subscribe(downloadedMenuItems => {
            this.log.info(`Downloaded MenuItems`);
            this.menuDownloaded = true;
            this.addMenuItems(downloadedMenuItems);
        }, err => {
            this.log.error('Failed to download Menu');
        });
    }
    addMenuItems(newMenuItems, findInTree = false) {
        // Clone so we can amend
        const fetchedMenuItems = this.menuQuery.getValue().menuItems || [];
        this.menuItems = JSON.parse(JSON.stringify(fetchedMenuItems));
        this.calculateRouterLinks(newMenuItems);
        // Add to flat reference List
        this.addMenuItemsToReferenceList(newMenuItems);
        if (findInTree) {
            newMenuItems.forEach(loopMenuItem => {
                this.upsertMenuItemToExistingTree(loopMenuItem);
            });
        }
        else {
            newMenuItems.forEach(loopMenuItem => {
                this.addNewMenuItemToEntities(this.menuItems, loopMenuItem);
            });
        }
        // Remove the unatuhorised
        this.menuItems = this.removeUnauthorisedMenuItems(this.menuItems);
        this.menuStore.update({ menuItems: this.menuItems });
    }
    calculateRouterLinks(menuItems) {
        if (menuItems) {
            menuItems.forEach(menuItem => {
                if (!menuItem.routerLink) {
                    // Need to create our routerLink
                    switch (menuItem.type) {
                        case "dashboard" /* Dashboard */: {
                            menuItem.routerLink = `dashboard/${menuItem.name}`;
                            break;
                        }
                        case "datagrid" /* Datagrid */: {
                            menuItem.routerLink = `datagrid/${menuItem.name}`;
                            break;
                        }
                        case "folder" /* Folder */: {
                            // No router link here
                            break;
                        }
                        default: {
                            menuItem.routerLink = menuItem.name;
                        }
                    }
                }
                if (menuItem.items) {
                    this.calculateRouterLinks(menuItem.items);
                }
            });
        }
    }
    addRoute(route, roles = null) {
        this.log.info(`Adding Route ${JSON.stringify(route)}`);
        this.routes.push(route);
        if (roles !== null) {
            this.rolesService.addRouteRoles(route.path, roles);
        }
    }
    upsertMenuItemToExistingTree(newMenuItem) {
        const menuItems = [...this.menuItems];
        if (!newMenuItem.parent || newMenuItem.parent === '') {
            // Root menu item
            let existing = menuItems.find(menu => menu.name === newMenuItem.name);
            if (existing) {
                existing = Object.assign({}, newMenuItem);
            }
            else {
                menuItems.push(Object.assign({}, newMenuItem));
            }
        }
        else {
            // Submenu item
            const parent = menuItems.find(menu => menu.name === newMenuItem.parent);
            if (parent) {
                let existing = parent.items.find(menu => menu.name === newMenuItem.name);
                if (existing) {
                    existing = Object.assign({}, newMenuItem);
                }
                else {
                    parent.items.push(Object.assign({}, newMenuItem));
                }
            }
        }
        this.menuItems = menuItems;
    }
    addNewMenuItemToEntities(targetMenu, newMenuItem) {
        let calcRouterLink;
        // Don't add if we already know about this
        if (targetMenu && !targetMenu.find(menu => menu.name === newMenuItem.name)) {
            // Router bits
            if (newMenuItem.routerLink && newMenuItem.routerLink.indexOf(',') > -1) {
                calcRouterLink = newMenuItem.routerLink.split(',');
            }
            else {
                calcRouterLink = newMenuItem.routerLink;
            }
            const createdMenuItem = Object.assign(Object.assign({}, newMenuItem), { routerLink: calcRouterLink });
            targetMenu.push(createdMenuItem);
            if (newMenuItem.items && newMenuItem.items.length > 0) {
                createdMenuItem.items = [];
                const castItems = newMenuItem.items;
                castItems.forEach(menuItem => {
                    this.addNewMenuItemToEntities(createdMenuItem.items, menuItem);
                });
            }
        }
    }
}
MenuService.ɵfac = function MenuService_Factory(t) { return new (t || MenuService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MenuStore), i0.ɵɵinject(i3.MenuQuery), i0.ɵɵinject(i4.AppSettingsQuery), i0.ɵɵinject(i5.UserAuthenticationQuery), i0.ɵɵinject(i6.LoggingService), i0.ɵɵinject(i7.RolesService)); };
MenuService.ɵprov = i0.ɵɵdefineInjectable({ token: MenuService, factory: MenuService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(MenuService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.MenuStore }, { type: i3.MenuQuery }, { type: i4.AppSettingsQuery }, { type: i5.UserAuthenticationQuery }, { type: i6.LoggingService }, { type: i7.RolesService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,