import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class TruncateTextPipe {
    transform(value, limit = 40, trail = '…') {
        let result = value || '';
        if (value) {
            const words = value.split(/\s+/);
            if (words.length > Math.abs(limit)) {
                if (limit < 0) {
                    limit *= -1;
                    result =
                        trail + words.slice(words.length - limit, words.length).join(' ');
                }
                else {
                    result = words.slice(0, limit).join(' ') + trail;
                }
            }
        }
        return result;
    }
}
TruncateTextPipe.ɵfac = function TruncateTextPipe_Factory(t) { return new (t || TruncateTextPipe)(); };
TruncateTextPipe.ɵpipe = i0.ɵɵdefinePipe({ name: "truncateText", type: TruncateTextPipe, pure: true });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(TruncateTextPipe, [{
        type: Pipe,
        args: [{
                name: 'truncateText'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1bmNhdGVUZXh0LnBpcGUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdzY2FmZm9sZGluZy9jb3JlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy90cnVuY2F0ZVRleHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFLcEQsTUFBTSxPQUFPLGdCQUFnQjtJQUUzQixTQUFTLENBQUMsS0FBYSxFQUFFLFFBQWdCLEVBQUUsRUFBRSxRQUFnQixHQUFHO1FBQzlELElBQUksTUFBTSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFFekIsSUFBSSxLQUFLLEVBQUU7WUFDVCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNsQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7b0JBQ2IsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNaLE1BQU07d0JBQ0osS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDckU7cUJBQU07b0JBQ0wsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ2xEO2FBQ0Y7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O2dGQW5CVSxnQkFBZ0I7dUVBQWhCLGdCQUFnQjtrREFBaEIsZ0JBQWdCO2NBSDVCLElBQUk7ZUFBQztnQkFDSixJQUFJLEVBQUUsY0FBYzthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAndHJ1bmNhdGVUZXh0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVHJ1bmNhdGVUZXh0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZywgbGltaXQ6IG51bWJlciA9IDQwLCB0cmFpbDogU3RyaW5nID0gJ+KApicpOiBzdHJpbmcge1xyXG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlIHx8ICcnO1xyXG5cclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICBjb25zdCB3b3JkcyA9IHZhbHVlLnNwbGl0KC9cXHMrLyk7XHJcbiAgICAgIGlmICh3b3Jkcy5sZW5ndGggPiBNYXRoLmFicyhsaW1pdCkpIHtcclxuICAgICAgICBpZiAobGltaXQgPCAwKSB7XHJcbiAgICAgICAgICBsaW1pdCAqPSAtMTtcclxuICAgICAgICAgIHJlc3VsdCA9XHJcbiAgICAgICAgICAgIHRyYWlsICsgd29yZHMuc2xpY2Uod29yZHMubGVuZ3RoIC0gbGltaXQsIHdvcmRzLmxlbmd0aCkuam9pbignICcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHQgPSB3b3Jkcy5zbGljZSgwLCBsaW1pdCkuam9pbignICcpICsgdHJhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuIl19