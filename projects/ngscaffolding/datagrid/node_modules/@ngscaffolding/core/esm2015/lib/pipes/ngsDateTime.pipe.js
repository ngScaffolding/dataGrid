import * as dateFormatimp from 'dateformat';
import { Pipe } from '@angular/core';
import { AppSettings } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "../services/appSettings/appSettings.query";
const dateFormat = dateFormatimp;
export class NgsDateTimePipe {
    constructor(appSettings) {
        this.appSettings = appSettings;
    }
    transform(inputDate) {
        if (inputDate) {
            // If a string gets through, convert to date object
            if (typeof inputDate === 'string' || inputDate instanceof String) {
                inputDate = new Date(inputDate);
            }
            const userTimezoneOffset = inputDate.getTimezoneOffset() * 60000;
            const zuluDate = new Date(inputDate.getTime() + userTimezoneOffset);
            const format = this.appSettings.getEntity(AppSettings.dateTimeFormat);
            if (format && format.value) {
                return dateFormat(zuluDate, format.value);
            }
            else {
                return dateFormat(zuluDate, 'default');
            }
        }
        else {
            return '';
        }
    }
}
NgsDateTimePipe.ɵfac = function NgsDateTimePipe_Factory(t) { return new (t || NgsDateTimePipe)(i0.ɵɵdirectiveInject(i1.AppSettingsQuery)); };
NgsDateTimePipe.ɵpipe = i0.ɵɵdefinePipe({ name: "ngsDateTime", type: NgsDateTimePipe, pure: true });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(NgsDateTimePipe, [{
        type: Pipe,
        args: [{ name: 'ngsDateTime' }]
    }], function () { return [{ type: i1.AppSettingsQuery }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdzRGF0ZVRpbWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3NjYWZmb2xkaW5nL2NvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL25nc0RhdGVUaW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLGFBQWEsTUFBTSxZQUFZLENBQUM7QUFHNUMsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFKcEQsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDO0FBT2pDLE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQW9CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7SUFDckQsU0FBUyxDQUFDLFNBQWU7UUFDdkIsSUFBSSxTQUFTLEVBQUU7WUFDYixtREFBbUQ7WUFDbkQsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLElBQUksU0FBUyxZQUFZLE1BQU0sRUFBRTtnQkFDaEUsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ2pDO1lBRUQsTUFBTSxrQkFBa0IsR0FBRyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxLQUFLLENBQUM7WUFDakUsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLGtCQUFrQixDQUFDLENBQUM7WUFFcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3RFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7Z0JBQzFCLE9BQU8sVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0M7aUJBQU07Z0JBQ0wsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ3hDO1NBQ0Y7YUFBTTtZQUNMLE9BQU8sRUFBRSxDQUFDO1NBQ1g7SUFDSCxDQUFDOzs4RUFyQlUsZUFBZTtxRUFBZixlQUFlO2tEQUFmLGVBQWU7Y0FEM0IsSUFBSTtlQUFDLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRhdGVGb3JtYXRpbXAgZnJvbSAnZGF0ZWZvcm1hdCc7XHJcbmNvbnN0IGRhdGVGb3JtYXQgPSBkYXRlRm9ybWF0aW1wO1xyXG5cclxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBcHBTZXR0aW5nc1F1ZXJ5IH0gZnJvbSAnLi4vc2VydmljZXMvYXBwU2V0dGluZ3MvYXBwU2V0dGluZ3MucXVlcnknO1xyXG5pbXBvcnQgeyBBcHBTZXR0aW5ncyB9IGZyb20gJ0BuZ3NjYWZmb2xkaW5nL21vZGVscyc7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICduZ3NEYXRlVGltZScgfSlcclxuZXhwb3J0IGNsYXNzIE5nc0RhdGVUaW1lUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwU2V0dGluZ3M6IEFwcFNldHRpbmdzUXVlcnkpIHt9XHJcbiAgdHJhbnNmb3JtKGlucHV0RGF0ZTogRGF0ZSk6IHN0cmluZyB7XHJcbiAgICBpZiAoaW5wdXREYXRlKSB7XHJcbiAgICAgIC8vIElmIGEgc3RyaW5nIGdldHMgdGhyb3VnaCwgY29udmVydCB0byBkYXRlIG9iamVjdFxyXG4gICAgICBpZiAodHlwZW9mIGlucHV0RGF0ZSA9PT0gJ3N0cmluZycgfHwgaW5wdXREYXRlIGluc3RhbmNlb2YgU3RyaW5nKSB7XHJcbiAgICAgICAgaW5wdXREYXRlID0gbmV3IERhdGUoaW5wdXREYXRlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdXNlclRpbWV6b25lT2Zmc2V0ID0gaW5wdXREYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMDtcclxuICAgICAgY29uc3QgenVsdURhdGUgPSBuZXcgRGF0ZShpbnB1dERhdGUuZ2V0VGltZSgpICsgdXNlclRpbWV6b25lT2Zmc2V0KTtcclxuXHJcbiAgICAgIGNvbnN0IGZvcm1hdCA9IHRoaXMuYXBwU2V0dGluZ3MuZ2V0RW50aXR5KEFwcFNldHRpbmdzLmRhdGVUaW1lRm9ybWF0KTtcclxuICAgICAgaWYgKGZvcm1hdCAmJiBmb3JtYXQudmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gZGF0ZUZvcm1hdCh6dWx1RGF0ZSwgZm9ybWF0LnZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZGF0ZUZvcm1hdCh6dWx1RGF0ZSwgJ2RlZmF1bHQnKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=