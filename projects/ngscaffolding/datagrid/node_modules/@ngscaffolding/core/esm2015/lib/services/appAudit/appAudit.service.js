import { Injectable } from '@angular/core';
import { timeout, retry } from 'rxjs/operators';
import { AppSettings, ZuluDateHelper, } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "../appSettings/appSettings.query";
import * as i2 from "../userAuthentication/userAuthentication.query";
import * as i3 from "@angular/common/http";
export class AppAuditService {
    constructor(appSettingsQuery, userQuery, http) {
        this.appSettingsQuery = appSettingsQuery;
        this.userQuery = userQuery;
        this.http = http;
    }
    RecordLog(appLog) {
        let apiHome = this.appSettingsQuery.getEntity(AppSettings.apiHome).value;
        if (!appLog.logDate) {
            appLog.logDate = ZuluDateHelper.setGMTDate(new Date());
        }
        if (!appLog.userID) {
            appLog.userID = this.userQuery.getUserId();
        }
        try {
            // This post is a fire and forget. Don't have to authorise either
            this.http
                .post(`${apiHome}/api/v1/applicationLog`, appLog)
                .pipe(timeout(30000), retry(3))
                .subscribe((data) => { }, (err) => {
                console.log('Unable to send AppLog, offline?');
            });
        }
        catch (err) {
            console.log('Unable to send AppLog, offline?');
        }
    }
}
AppAuditService.ɵfac = function AppAuditService_Factory(t) { return new (t || AppAuditService)(i0.ɵɵinject(i1.AppSettingsQuery), i0.ɵɵinject(i2.UserAuthenticationQuery), i0.ɵɵinject(i3.HttpClient)); };
AppAuditService.ɵprov = i0.ɵɵdefineInjectable({ token: AppAuditService, factory: AppAuditService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AppAuditService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.AppSettingsQuery }, { type: i2.UserAuthenticationQuery }, { type: i3.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwQXVkaXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3NjYWZmb2xkaW5nL2NvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2FwcEF1ZGl0L2FwcEF1ZGl0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWhELE9BQU8sRUFFTCxXQUFXLEVBQ1gsY0FBYyxHQUNmLE1BQU0sdUJBQXVCLENBQUM7Ozs7O0FBSy9CLE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQ1UsZ0JBQWtDLEVBQ2xDLFNBQWtDLEVBQ2xDLElBQWdCO1FBRmhCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsY0FBUyxHQUFULFNBQVMsQ0FBeUI7UUFDbEMsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUN2QixDQUFDO0lBRUcsU0FBUyxDQUFDLE1BQXNCO1FBQ3JDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUV6RSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUNuQixNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQzVDO1FBQ0QsSUFBSTtZQUNGLGlFQUFpRTtZQUNqRSxJQUFJLENBQUMsSUFBSTtpQkFDTixJQUFJLENBQUMsR0FBRyxPQUFPLHdCQUF3QixFQUFFLE1BQU0sQ0FBQztpQkFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzlCLFNBQVMsQ0FDUixDQUFDLElBQUksRUFBRSxFQUFFLEdBQUUsQ0FBQyxFQUNaLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1lBQ2pELENBQUMsQ0FDRixDQUFDO1NBQ0w7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7OzhFQS9CVSxlQUFlO3VEQUFmLGVBQWUsV0FBZixlQUFlLG1CQUZkLE1BQU07a0RBRVAsZUFBZTtjQUgzQixVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEFwcFNldHRpbmdzUXVlcnkgfSBmcm9tICcuLi9hcHBTZXR0aW5ncy9hcHBTZXR0aW5ncy5xdWVyeSc7XHJcbmltcG9ydCB7IHRpbWVvdXQsIHJldHJ5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBVc2VyQXV0aGVudGljYXRpb25RdWVyeSB9IGZyb20gJy4uL3VzZXJBdXRoZW50aWNhdGlvbi91c2VyQXV0aGVudGljYXRpb24ucXVlcnknO1xyXG5pbXBvcnQge1xyXG4gIEFwcGxpY2F0aW9uTG9nLFxyXG4gIEFwcFNldHRpbmdzLFxyXG4gIFp1bHVEYXRlSGVscGVyLFxyXG59IGZyb20gJ0BuZ3NjYWZmb2xkaW5nL21vZGVscyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQXBwQXVkaXRTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgYXBwU2V0dGluZ3NRdWVyeTogQXBwU2V0dGluZ3NRdWVyeSxcclxuICAgIHByaXZhdGUgdXNlclF1ZXJ5OiBVc2VyQXV0aGVudGljYXRpb25RdWVyeSxcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudFxyXG4gICkge31cclxuXHJcbiAgcHVibGljIFJlY29yZExvZyhhcHBMb2c6IEFwcGxpY2F0aW9uTG9nKTogdm9pZCB7XHJcbiAgICBsZXQgYXBpSG9tZSA9IHRoaXMuYXBwU2V0dGluZ3NRdWVyeS5nZXRFbnRpdHkoQXBwU2V0dGluZ3MuYXBpSG9tZSkudmFsdWU7XHJcblxyXG4gICAgaWYgKCFhcHBMb2cubG9nRGF0ZSkge1xyXG4gICAgICBhcHBMb2cubG9nRGF0ZSA9IFp1bHVEYXRlSGVscGVyLnNldEdNVERhdGUobmV3IERhdGUoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhcHBMb2cudXNlcklEKSB7XHJcbiAgICAgIGFwcExvZy51c2VySUQgPSB0aGlzLnVzZXJRdWVyeS5nZXRVc2VySWQoKTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFRoaXMgcG9zdCBpcyBhIGZpcmUgYW5kIGZvcmdldC4gRG9uJ3QgaGF2ZSB0byBhdXRob3Jpc2UgZWl0aGVyXHJcbiAgICAgIHRoaXMuaHR0cFxyXG4gICAgICAgIC5wb3N0KGAke2FwaUhvbWV9L2FwaS92MS9hcHBsaWNhdGlvbkxvZ2AsIGFwcExvZylcclxuICAgICAgICAucGlwZSh0aW1lb3V0KDMwMDAwKSwgcmV0cnkoMykpXHJcbiAgICAgICAgLnN1YnNjcmliZShcclxuICAgICAgICAgIChkYXRhKSA9PiB7fSxcclxuICAgICAgICAgIChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byBzZW5kIEFwcExvZywgb2ZmbGluZT8nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdVbmFibGUgdG8gc2VuZCBBcHBMb2csIG9mZmxpbmU/Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==