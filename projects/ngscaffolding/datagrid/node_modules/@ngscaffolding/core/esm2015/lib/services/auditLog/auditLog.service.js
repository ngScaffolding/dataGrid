import { Injectable } from '@angular/core';
import { AppSettings, ZuluDateHelper } from '@ngscaffolding/models';
import { timeout, retry, finalize } from 'rxjs/operators';
import { v4 as uuid } from 'uuid';
import * as i0 from "@angular/core";
import * as i1 from "./auditLog.store";
import * as i2 from "./auditLog.query";
import * as i3 from "../appSettings/appSettings.query";
import * as i4 from "../userAuthentication/userAuthentication.query";
import * as i5 from "@angular/common/http";
export class AuditLogService {
    constructor(auditLogStore, auditLogQuery, appSettingsQuery, userQuery, http) {
        this.auditLogStore = auditLogStore;
        this.auditLogQuery = auditLogQuery;
        this.appSettingsQuery = appSettingsQuery;
        this.userQuery = userQuery;
        this.http = http;
        this.polling = 30000;
        this.retryVal = 3;
        this.isSending = false;
        this.defaultLog = {};
        appSettingsQuery
            .selectEntity(AppSettings.mobileDefaultPolling)
            .subscribe(val => (this.polling = val.value > 0 ? val.value : 30000));
        appSettingsQuery
            .selectEntity(AppSettings.mobileDefaultRetries)
            .subscribe(val => (this.retryVal = val.value > 0 ? val.value : 3));
        this.StartPolling();
    }
    SetDefault(defaultLog) {
        this.defaultLog = defaultLog;
    }
    RecordLog(auditLog) {
        const workingLog = Object.assign(Object.assign({}, this.defaultLog), auditLog);
        workingLog.id = uuid();
        if (!workingLog.logDate) {
            workingLog.logDate = ZuluDateHelper.setGMTDate(new Date());
        }
        if (!workingLog.userID) {
            workingLog.userID = this.userQuery.getUserId();
        }
        this.auditLogStore.add(workingLog);
        try {
        }
        catch (err) {
            console.log('Unable to send AppLog, offline?');
        }
    }
    StartPolling() {
        setInterval(_ => {
            if (!this.isSending) {
                this.isSending = true;
                this.SendLogEntries();
            }
        }, this.polling);
    }
    SendLogEntries() {
        const apiHome = this.appSettingsQuery.getEntity(AppSettings.apiHome).value;
        const logEntries = this.auditLogQuery.getAll();
        if (logEntries && logEntries.length > 0) {
            const keys = logEntries.map(log => log.id);
            // This post is a fire and forget. Don't have to authorise either
            this.http
                .post(`${apiHome}/api/v1/auditlog`, logEntries)
                .pipe(timeout(30000), retry(3), finalize(() => {
                this.isSending = false;
            }))
                .subscribe(data => {
                this.auditLogStore.remove(keys);
                // keys.forEach(key => this.auditLogStore.remove(({ id }) => id === key));
            }, err => {
                console.log('Unable to send AppLog, offline?');
            });
        }
        else {
            this.isSending = false;
        }
    }
}
AuditLogService.ɵfac = function AuditLogService_Factory(t) { return new (t || AuditLogService)(i0.ɵɵinject(i1.AuditLogStore), i0.ɵɵinject(i2.AuditLogQuery), i0.ɵɵinject(i3.AppSettingsQuery), i0.ɵɵinject(i4.UserAuthenticationQuery), i0.ɵɵinject(i5.HttpClient)); };
AuditLogService.ɵprov = i0.ɵɵdefineInjectable({ token: AuditLogService, factory: AuditLogService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AuditLogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.AuditLogStore }, { type: i2.AuditLogQuery }, { type: i3.AppSettingsQuery }, { type: i4.UserAuthenticationQuery }, { type: i5.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaXRMb2cuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3NjYWZmb2xkaW5nL2NvcmUvc3JjLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2F1ZGl0TG9nL2F1ZGl0TG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVksV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzlFLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTFELE9BQU8sRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7O0FBS2xDLE1BQU0sT0FBTyxlQUFlO0lBT3hCLFlBQ1ksYUFBNEIsRUFDNUIsYUFBNEIsRUFDNUIsZ0JBQWtDLEVBQ2xDLFNBQWtDLEVBQ2xDLElBQWdCO1FBSmhCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsY0FBUyxHQUFULFNBQVMsQ0FBeUI7UUFDbEMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQVhwQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFYixjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLGVBQVUsR0FBYSxFQUFFLENBQUM7UUFTOUIsZ0JBQWdCO2FBQ1gsWUFBWSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQzthQUM5QyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDMUUsZ0JBQWdCO2FBQ1gsWUFBWSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQzthQUM5QyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFTSxVQUFVLENBQUMsVUFBb0I7UUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUVNLFNBQVMsQ0FBQyxRQUFrQjtRQUMvQixNQUFNLFVBQVUsbUNBQU8sSUFBSSxDQUFDLFVBQVUsR0FBSyxRQUFRLENBQUMsQ0FBQztRQUNyRCxVQUFVLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3JCLFVBQVUsQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7U0FDOUQ7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQixVQUFVLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDbEQ7UUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJO1NBQ0g7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztTQUNsRDtJQUNMLENBQUM7SUFFTyxZQUFZO1FBQ2hCLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDdEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ3pCO1FBQ0wsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRU0sY0FBYztRQUNqQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDM0UsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUvQyxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyQyxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLGlFQUFpRTtZQUNqRSxJQUFJLENBQUMsSUFBSTtpQkFDSixJQUFJLENBQUMsR0FBRyxPQUFPLGtCQUFrQixFQUFFLFVBQVUsQ0FBQztpQkFDOUMsSUFBSSxDQUNELE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFDZCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ1IsUUFBUSxDQUFDLEdBQUcsRUFBRTtnQkFDVixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FDTDtpQkFDQSxTQUFTLENBQ04sSUFBSSxDQUFDLEVBQUU7Z0JBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hDLDBFQUEwRTtZQUM5RSxDQUFDLEVBQ0QsR0FBRyxDQUFDLEVBQUU7Z0JBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1lBQ25ELENBQUMsQ0FDSixDQUFDO1NBQ1Q7YUFBTTtZQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7OEVBbEZRLGVBQWU7dURBQWYsZUFBZSxXQUFmLGVBQWUsbUJBRlosTUFBTTtrREFFVCxlQUFlO2NBSDNCLFVBQVU7ZUFBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXVkaXRMb2csIEFwcFNldHRpbmdzLCBadWx1RGF0ZUhlbHBlciB9IGZyb20gJ0BuZ3NjYWZmb2xkaW5nL21vZGVscyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEFwcFNldHRpbmdzUXVlcnkgfSBmcm9tICcuLi9hcHBTZXR0aW5ncy9hcHBTZXR0aW5ncy5xdWVyeSc7XHJcbmltcG9ydCB7IHRpbWVvdXQsIHJldHJ5LCBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgVXNlckF1dGhlbnRpY2F0aW9uUXVlcnkgfSBmcm9tICcuLi91c2VyQXV0aGVudGljYXRpb24vdXNlckF1dGhlbnRpY2F0aW9uLnF1ZXJ5JztcclxuaW1wb3J0IHsgQXVkaXRMb2dTdG9yZSB9IGZyb20gJy4vYXVkaXRMb2cuc3RvcmUnO1xyXG5pbXBvcnQgeyBBdWRpdExvZ1F1ZXJ5IH0gZnJvbSAnLi9hdWRpdExvZy5xdWVyeSc7XHJcbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQXVkaXRMb2dTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcG9sbGluZyA9IDMwMDAwO1xyXG4gICAgcHJpdmF0ZSByZXRyeVZhbCA9IDM7XHJcblxyXG4gICAgcHJpdmF0ZSBpc1NlbmRpbmcgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgZGVmYXVsdExvZzogQXVkaXRMb2cgPSB7fTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGF1ZGl0TG9nU3RvcmU6IEF1ZGl0TG9nU3RvcmUsXHJcbiAgICAgICAgcHJpdmF0ZSBhdWRpdExvZ1F1ZXJ5OiBBdWRpdExvZ1F1ZXJ5LFxyXG4gICAgICAgIHByaXZhdGUgYXBwU2V0dGluZ3NRdWVyeTogQXBwU2V0dGluZ3NRdWVyeSxcclxuICAgICAgICBwcml2YXRlIHVzZXJRdWVyeTogVXNlckF1dGhlbnRpY2F0aW9uUXVlcnksXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50XHJcbiAgICApIHtcclxuICAgICAgICBhcHBTZXR0aW5nc1F1ZXJ5XHJcbiAgICAgICAgICAgIC5zZWxlY3RFbnRpdHkoQXBwU2V0dGluZ3MubW9iaWxlRGVmYXVsdFBvbGxpbmcpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodmFsID0+ICh0aGlzLnBvbGxpbmcgPSB2YWwudmFsdWUgPiAwID8gdmFsLnZhbHVlIDogMzAwMDApKTtcclxuICAgICAgICBhcHBTZXR0aW5nc1F1ZXJ5XHJcbiAgICAgICAgICAgIC5zZWxlY3RFbnRpdHkoQXBwU2V0dGluZ3MubW9iaWxlRGVmYXVsdFJldHJpZXMpXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodmFsID0+ICh0aGlzLnJldHJ5VmFsID0gdmFsLnZhbHVlID4gMCA/IHZhbC52YWx1ZSA6IDMpKTtcclxuICAgICAgICB0aGlzLlN0YXJ0UG9sbGluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXREZWZhdWx0KGRlZmF1bHRMb2c6IEF1ZGl0TG9nKSB7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0TG9nID0gZGVmYXVsdExvZztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmVjb3JkTG9nKGF1ZGl0TG9nOiBBdWRpdExvZyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHdvcmtpbmdMb2cgPSB7Li4udGhpcy5kZWZhdWx0TG9nLCAuLi5hdWRpdExvZ307XHJcbiAgICAgICAgd29ya2luZ0xvZy5pZCA9IHV1aWQoKTtcclxuICAgICAgICBpZiAoIXdvcmtpbmdMb2cubG9nRGF0ZSkge1xyXG4gICAgICAgICAgICB3b3JraW5nTG9nLmxvZ0RhdGUgPSBadWx1RGF0ZUhlbHBlci5zZXRHTVREYXRlKG5ldyBEYXRlKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF3b3JraW5nTG9nLnVzZXJJRCkge1xyXG4gICAgICAgICAgICB3b3JraW5nTG9nLnVzZXJJRCA9IHRoaXMudXNlclF1ZXJ5LmdldFVzZXJJZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hdWRpdExvZ1N0b3JlLmFkZCh3b3JraW5nTG9nKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVW5hYmxlIHRvIHNlbmQgQXBwTG9nLCBvZmZsaW5lPycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFN0YXJ0UG9sbGluZygpIHtcclxuICAgICAgICBzZXRJbnRlcnZhbChfID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2VuZGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1NlbmRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5TZW5kTG9nRW50cmllcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcy5wb2xsaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU2VuZExvZ0VudHJpZXMoKSB7XHJcbiAgICAgICAgY29uc3QgYXBpSG9tZSA9IHRoaXMuYXBwU2V0dGluZ3NRdWVyeS5nZXRFbnRpdHkoQXBwU2V0dGluZ3MuYXBpSG9tZSkudmFsdWU7XHJcbiAgICAgICAgY29uc3QgbG9nRW50cmllcyA9IHRoaXMuYXVkaXRMb2dRdWVyeS5nZXRBbGwoKTtcclxuXHJcbiAgICAgICAgaWYgKGxvZ0VudHJpZXMgJiYgbG9nRW50cmllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBsb2dFbnRyaWVzLm1hcChsb2cgPT4gbG9nLmlkKTtcclxuICAgICAgICAgICAgLy8gVGhpcyBwb3N0IGlzIGEgZmlyZSBhbmQgZm9yZ2V0LiBEb24ndCBoYXZlIHRvIGF1dGhvcmlzZSBlaXRoZXJcclxuICAgICAgICAgICAgdGhpcy5odHRwXHJcbiAgICAgICAgICAgICAgICAucG9zdChgJHthcGlIb21lfS9hcGkvdjEvYXVkaXRsb2dgLCBsb2dFbnRyaWVzKVxyXG4gICAgICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dCgzMDAwMCksXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0cnkoMyksXHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzU2VuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1ZGl0TG9nU3RvcmUucmVtb3ZlKGtleXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBrZXlzLmZvckVhY2goa2V5ID0+IHRoaXMuYXVkaXRMb2dTdG9yZS5yZW1vdmUoKHsgaWQgfSkgPT4gaWQgPT09IGtleSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byBzZW5kIEFwcExvZywgb2ZmbGluZT8nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==