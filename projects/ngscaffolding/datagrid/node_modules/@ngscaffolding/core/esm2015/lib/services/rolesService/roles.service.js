import { Injectable } from '@angular/core';
import { combineLatest } from 'rxjs';
import { AppSettings } from '@ngscaffolding/models';
import { take, finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./roles.query";
import * as i3 from "../appSettings/appSettings.query";
import * as i4 from "../dataSource/dataSource.service";
import * as i5 from "./roles.store";
import * as i6 from "../userAuthentication/userAuthentication.query";
export class RolesService {
    constructor(http, rolesQuery, appSettingsQuery, dataSourceService, rolesStore, authQuery) {
        this.http = http;
        this.rolesQuery = rolesQuery;
        this.appSettingsQuery = appSettingsQuery;
        this.dataSourceService = dataSourceService;
        this.rolesStore = rolesStore;
        this.authQuery = authQuery;
        this.routeRoles = new Map();
        // First Time load away
        this.rolesStore.setLoading(false);
        // Wait for settings, then load from server
        combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)).subscribe(([authenticated, apiHome]) => {
            if (authenticated && apiHome) {
                this.apiHome = apiHome.value;
                this.rolesQuery
                    .selectLoading()
                    .pipe(take(1))
                    .subscribe(loading => {
                    if (!loading) {
                        this.downloadRoles();
                    }
                });
            }
            else if (!authenticated) {
                this.rolesStore.remove();
            }
        });
    }
    downloadRoles() {
        // Mark loading status
        this.rolesStore.setLoading(true);
        this.dataSourceService
            .getDataSource({ name: "system.Roles.Select" /* ROLES_SELECT */ })
            .pipe(finalize(() => {
            this.rolesStore.setLoading(false);
        }))
            .subscribe(results => {
            if (results && !results.error) {
                this.rolesStore.add(results.jsonData);
                this.rolesStore.setLoading(false);
            }
        });
    }
    // Checks if the current user is in this role.
    isInRole(role) {
        const currentUser = this.authQuery.getValue().userDetails;
        if (currentUser && currentUser.role) {
            return currentUser.role.indexOf(role) > -1;
        }
        else {
            return false;
        }
    }
    // Checks if the current user is in one of these roles.
    isInRoles(roles) {
        let result = false;
        const currentUser = this.authQuery.getValue().userDetails;
        if (currentUser && currentUser.role) {
            roles.forEach(role => {
                if (currentUser.role.indexOf(role) > -1) {
                    result = true;
                }
            });
        }
        return result;
    }
    // Repository of Roles: Routes
    addRouteRoles(route, roles) {
        this.routeRoles.set(route, roles);
    }
    getRouteRoles(route) {
        return this.routeRoles.get(route);
    }
}
RolesService.ɵfac = function RolesService_Factory(t) { return new (t || RolesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RolesQuery), i0.ɵɵinject(i3.AppSettingsQuery), i0.ɵɵinject(i4.DataSourceService), i0.ɵɵinject(i5.RolesStore), i0.ɵɵinject(i6.UserAuthenticationQuery)); };
RolesService.ɵprov = i0.ɵɵdefineInjectable({ token: RolesService, factory: RolesService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(RolesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.RolesQuery }, { type: i3.AppSettingsQuery }, { type: i4.DataSourceService }, { type: i5.RolesStore }, { type: i6.UserAuthenticationQuery }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,