import { Injectable } from '@angular/core';
import { AppSettings } from '@ngscaffolding/models';
import { Observable } from 'rxjs';
import { timeout } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../appSettings/appSettings.service";
import * as i3 from "../userAuthentication/userAuthentication.query";
import * as i4 from "../logging/logging.service";
import * as i5 from "../rolesService/roles.service";
export class UserService {
    constructor(http, appSettingsService, authQuery, log, rolesService) {
        this.http = http;
        this.appSettingsService = appSettingsService;
        this.authQuery = authQuery;
        this.log = log;
        this.rolesService = rolesService;
        this.className = 'core.UserService';
    }
    getUsers() {
        return new Observable(observer => {
            this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users`);
        }).pipe(timeout(30000));
    }
    createUser(user) {
        return new Observable(observer => {
            this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users`, user);
        }).pipe(timeout(30000));
    }
    deleteUser(userId) {
        return new Observable(observer => {
            this.http.delete(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/${userId}`);
        }).pipe(timeout(30000));
    }
    changePassword(changePasswordModel) {
        return new Observable(observer => {
            this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/changePassword`, changePasswordModel)
                .pipe(timeout(30000))
                .subscribe(response => {
                observer.next(null);
                observer.complete();
            }, err => {
                observer.error(err);
            });
        });
    }
    setPassword(changePasswordModel) {
        return new Observable(observer => {
            this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/setPassword`, changePasswordModel)
                .pipe(timeout(30000))
                .subscribe(response => {
                observer.next(null);
                observer.complete();
            }, err => {
                observer.error(err);
            });
        });
    }
    resetPassword(userId) {
        return new Observable(observer => {
            this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/resetPassword/${userId}`);
        }).pipe(timeout(30000));
    }
    getUser(userId) {
        return new Observable(observer => {
            this.http.get(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/${userId}`);
        }).pipe(timeout(30000));
    }
    saveUser(user) {
        return new Observable(observer => {
            this.http.post(`${this.appSettingsService.getValue(AppSettings.apiAuth)}/api/v1/users/`, user);
        }).pipe(timeout(30000));
    }
}
UserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AppSettingsService), i0.ɵɵinject(i3.UserAuthenticationQuery), i0.ɵɵinject(i4.LoggingService), i0.ɵɵinject(i5.RolesService)); };
UserService.ɵprov = i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(UserService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.AppSettingsService }, { type: i3.UserAuthenticationQuery }, { type: i4.LoggingService }, { type: i5.RolesService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,