import { Injectable } from '@angular/core';
import { AppSettings } from '@ngscaffolding/models';
import { timeout, retry } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./appSettings.store";
import * as i2 from "./appSettings.query";
import * as i3 from "../logging/logging.service";
import * as i4 from "@angular/common/http";
export class AppSettingsService {
    constructor(appSettingsStore, appSettingsQuery, logger, http) {
        this.appSettingsStore = appSettingsStore;
        this.appSettingsQuery = appSettingsQuery;
        this.logger = logger;
        this.http = http;
        this.className = 'AppSettingsService';
        console.log('AppSettingsService Constructor');
    }
    setValue(name, value) {
        if (this.appSettingsQuery.hasEntity(name)) {
            this.appSettingsStore.update(name, { name: name, value: value });
        }
        else {
            this.appSettingsStore.add({ name: name, value: value });
        }
        if (name === AppSettings.apiHome) {
            this.loadFromServer(value.toString());
        }
    }
    getValue(name) {
        if (this.appSettingsQuery.hasEntity(name)) {
            return this.appSettingsQuery.getEntity(name).value;
        }
        else {
            return null;
        }
    }
    loadFromServer(apiHome) {
        // Mark store as loading
        this.appSettingsStore.setLoading(true);
        // Load values from Server
        this.http
            .get(`${apiHome}/api/v1/appSettings`)
            .pipe(timeout(20000), retry(3))
            .subscribe(appValues => {
            if (appValues) {
                appValues.forEach(appValue => {
                    this.setValue(appValue.name, appValue.value);
                });
            }
            this.appSettingsStore.setLoading(false);
            this.appSettingsStore.update({ isInitialised: true });
        }, err => {
            this.appSettingsStore.setLoading(false);
        });
    }
    setValues(settings) {
        // Mark store as loading
        this.appSettingsStore.setLoading(true);
        this.appSettingsStore.update({ isInitialised: false });
        // Load values
        if (settings) {
            Object.keys(settings).forEach(key => {
                // Setting Value Here
                this.logger.info(`[${this.className}.loadSettings] Setting Value ${key} = ${settings[key]}`);
                this.setValue(key, settings[key]);
            });
        }
        this.appSettingsStore.setLoading(false);
        this.appSettingsStore.update({ isInitialised: true });
    }
    getBoolean(name) {
        return this.appSettingsQuery.selectEntity(name, entity => entity.value);
    }
    getString(name) {
        return this.appSettingsQuery.selectEntity(name, entity => entity.value);
    }
}
AppSettingsService.ɵfac = function AppSettingsService_Factory(t) { return new (t || AppSettingsService)(i0.ɵɵinject(i1.AppSettingsStore), i0.ɵɵinject(i2.AppSettingsQuery), i0.ɵɵinject(i3.LoggingService), i0.ɵɵinject(i4.HttpClient)); };
AppSettingsService.ɵprov = i0.ɵɵdefineInjectable({ token: AppSettingsService, factory: AppSettingsService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(AppSettingsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.AppSettingsStore }, { type: i2.AppSettingsQuery }, { type: i3.LoggingService }, { type: i4.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,