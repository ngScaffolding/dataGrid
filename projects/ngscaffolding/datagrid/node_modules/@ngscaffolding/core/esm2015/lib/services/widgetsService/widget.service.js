import { Injectable } from '@angular/core';
import { combineLatest } from 'rxjs';
import { finalize, take } from 'rxjs/operators';
import { AppSettings } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./widget.store";
import * as i3 from "./widget.query";
import * as i4 from "../appSettings/appSettings.query";
import * as i5 from "../userAuthentication/userAuthentication.query";
import * as i6 from "../logging/logging.service";
import * as i7 from "../rolesService/roles.service";
export class WidgetService {
    constructor(http, widgetStore, widgetQuery, appSettingsQuery, authQuery, log, rolesService) {
        this.http = http;
        this.widgetStore = widgetStore;
        this.widgetQuery = widgetQuery;
        this.appSettingsQuery = appSettingsQuery;
        this.authQuery = authQuery;
        this.log = log;
        this.rolesService = rolesService;
        this.className = 'core.WidgetService';
        // First Time load away
        this.widgetStore.setLoading(false);
        // Wait for settings, then load from server
        combineLatest(this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)).subscribe(([authenticated, apiHome]) => {
            if (authenticated && apiHome) {
                this.apiHome = apiHome.value;
                this.widgetQuery
                    .selectLoading()
                    .pipe(take(1))
                    .subscribe(loading => {
                    if (!loading) {
                        this.downloadWidgetItems();
                    }
                });
            }
            else if (!authenticated) {
                this.widgetStore.remove();
            }
        });
    }
    downloadWidgetItems() {
        // Mark loading status
        this.widgetStore.setLoading(true);
        this.http
            .get(this.apiHome + '/api/v1/widgets')
            .pipe(finalize(() => {
            this.widgetStore.setLoading(false);
        }))
            .subscribe(widgetItems => {
            this.widgetStore.add(widgetItems);
        });
    }
}
WidgetService.ɵfac = function WidgetService_Factory(t) { return new (t || WidgetService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.WidgetStore), i0.ɵɵinject(i3.WidgetQuery), i0.ɵɵinject(i4.AppSettingsQuery), i0.ɵɵinject(i5.UserAuthenticationQuery), i0.ɵɵinject(i6.LoggingService), i0.ɵɵinject(i7.RolesService)); };
WidgetService.ɵprov = i0.ɵɵdefineInjectable({ token: WidgetService, factory: WidgetService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(WidgetService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.WidgetStore }, { type: i3.WidgetQuery }, { type: i4.AppSettingsQuery }, { type: i5.UserAuthenticationQuery }, { type: i6.LoggingService }, { type: i7.RolesService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdzY2FmZm9sZGluZy9jb3JlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy93aWRnZXRzU2VydmljZS93aWRnZXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUloRCxPQUFPLEVBQW1CLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7Ozs7Ozs7QUFVckUsTUFBTSxPQUFPLGFBQWE7SUFLeEIsWUFDVSxJQUFnQixFQUNoQixXQUF3QixFQUN4QixXQUF3QixFQUN4QixnQkFBa0MsRUFDbEMsU0FBa0MsRUFDbEMsR0FBbUIsRUFDcEIsWUFBMEI7UUFOekIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGNBQVMsR0FBVCxTQUFTLENBQXlCO1FBQ2xDLFFBQUcsR0FBSCxHQUFHLENBQWdCO1FBQ3BCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBWDNCLGNBQVMsR0FBRyxvQkFBb0IsQ0FBQztRQWF2Qyx1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbkMsMkNBQTJDO1FBQzNDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDM0ksSUFBSSxhQUFhLElBQUksT0FBTyxFQUFFO2dCQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxXQUFXO3FCQUNiLGFBQWEsRUFBRTtxQkFDZixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNiLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDbkIsSUFBSSxDQUFDLE9BQU8sRUFBRTt3QkFDWixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztxQkFDNUI7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDTjtpQkFBTSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQzNCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ00sbUJBQW1CO1FBQ3hCLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsSUFBSTthQUNOLEdBQUcsQ0FBeUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQzthQUM3RCxJQUFJLENBQ0gsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUNIO2FBQ0EsU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7MEVBaERVLGFBQWE7cURBQWIsYUFBYSxXQUFiLGFBQWEsbUJBRlosTUFBTTtrREFFUCxhQUFhO2NBSHpCLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvbGVzU2VydmljZSB9IGZyb20gJy4uL3JvbGVzU2VydmljZS9yb2xlcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbmFsaXplLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5cclxuaW1wb3J0IHsgTG9nZ2luZ1NlcnZpY2UgfSBmcm9tICcuLi9sb2dnaW5nL2xvZ2dpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IFdpZGdldE1vZGVsQmFzZSwgQXBwU2V0dGluZ3MgfSBmcm9tICdAbmdzY2FmZm9sZGluZy9tb2RlbHMnO1xyXG5pbXBvcnQgeyBBcHBTZXR0aW5nc1F1ZXJ5IH0gZnJvbSAnLi4vYXBwU2V0dGluZ3MvYXBwU2V0dGluZ3MucXVlcnknO1xyXG5pbXBvcnQgeyBVc2VyQXV0aGVudGljYXRpb25RdWVyeSB9IGZyb20gJy4uL3VzZXJBdXRoZW50aWNhdGlvbi91c2VyQXV0aGVudGljYXRpb24ucXVlcnknO1xyXG5pbXBvcnQgeyBXaWRnZXRTdG9yZSB9IGZyb20gJy4vd2lkZ2V0LnN0b3JlJztcclxuaW1wb3J0IHsgV2lkZ2V0UXVlcnkgfSBmcm9tICcuL3dpZGdldC5xdWVyeSc7XHJcblxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgV2lkZ2V0U2VydmljZSB7XHJcbiAgcHJpdmF0ZSBjbGFzc05hbWUgPSAnY29yZS5XaWRnZXRTZXJ2aWNlJztcclxuXHJcbiAgcHJpdmF0ZSBhcGlIb21lOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSB3aWRnZXRTdG9yZTogV2lkZ2V0U3RvcmUsXHJcbiAgICBwcml2YXRlIHdpZGdldFF1ZXJ5OiBXaWRnZXRRdWVyeSxcclxuICAgIHByaXZhdGUgYXBwU2V0dGluZ3NRdWVyeTogQXBwU2V0dGluZ3NRdWVyeSxcclxuICAgIHByaXZhdGUgYXV0aFF1ZXJ5OiBVc2VyQXV0aGVudGljYXRpb25RdWVyeSxcclxuICAgIHByaXZhdGUgbG9nOiBMb2dnaW5nU2VydmljZSxcclxuICAgIHB1YmxpYyByb2xlc1NlcnZpY2U6IFJvbGVzU2VydmljZVxyXG4gICkge1xyXG4gICAgLy8gRmlyc3QgVGltZSBsb2FkIGF3YXlcclxuICAgIHRoaXMud2lkZ2V0U3RvcmUuc2V0TG9hZGluZyhmYWxzZSk7XHJcblxyXG4gICAgLy8gV2FpdCBmb3Igc2V0dGluZ3MsIHRoZW4gbG9hZCBmcm9tIHNlcnZlclxyXG4gICAgY29tYmluZUxhdGVzdCh0aGlzLmF1dGhRdWVyeS5hdXRoZW50aWNhdGVkJCwgdGhpcy5hcHBTZXR0aW5nc1F1ZXJ5LnNlbGVjdEVudGl0eShBcHBTZXR0aW5ncy5hcGlIb21lKSkuc3Vic2NyaWJlKChbYXV0aGVudGljYXRlZCwgYXBpSG9tZV0pID0+IHtcclxuICAgICAgaWYgKGF1dGhlbnRpY2F0ZWQgJiYgYXBpSG9tZSkge1xyXG4gICAgICAgIHRoaXMuYXBpSG9tZSA9IGFwaUhvbWUudmFsdWU7XHJcbiAgICAgICAgdGhpcy53aWRnZXRRdWVyeVxyXG4gICAgICAgICAgLnNlbGVjdExvYWRpbmcoKVxyXG4gICAgICAgICAgLnBpcGUodGFrZSgxKSlcclxuICAgICAgICAgIC5zdWJzY3JpYmUobG9hZGluZyA9PiB7XHJcbiAgICAgICAgICAgIGlmICghbG9hZGluZykge1xyXG4gICAgICAgICAgICAgIHRoaXMuZG93bmxvYWRXaWRnZXRJdGVtcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIGlmICghYXV0aGVudGljYXRlZCkge1xyXG4gICAgICAgIHRoaXMud2lkZ2V0U3RvcmUucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBwdWJsaWMgZG93bmxvYWRXaWRnZXRJdGVtcygpIHtcclxuICAgIC8vIE1hcmsgbG9hZGluZyBzdGF0dXNcclxuICAgIHRoaXMud2lkZ2V0U3RvcmUuc2V0TG9hZGluZyh0cnVlKTtcclxuXHJcbiAgICB0aGlzLmh0dHBcclxuICAgICAgLmdldDxBcnJheTxXaWRnZXRNb2RlbEJhc2U+Pih0aGlzLmFwaUhvbWUgKyAnL2FwaS92MS93aWRnZXRzJylcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy53aWRnZXRTdG9yZS5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICB9KVxyXG4gICAgICApXHJcbiAgICAgIC5zdWJzY3JpYmUod2lkZ2V0SXRlbXMgPT4ge1xyXG4gICAgICAgIHRoaXMud2lkZ2V0U3RvcmUuYWRkKHdpZGdldEl0ZW1zKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==