import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../notification/notification.service";
import * as i2 from "../appSettings/appSettings.query";
import * as i3 from "../userAuthentication/userAuthentication.query";
import * as i4 from "@angular/common/http";
export class LoggingService {
    constructor(notification, appSettingsQuery, userQuery, http) {
        this.notification = notification;
        this.appSettingsQuery = appSettingsQuery;
        this.userQuery = userQuery;
        this.http = http;
    }
    error(err, methodName = '', showToast = false) {
        if (!methodName) {
            console.error(`Method ${methodName}: Error ${err}`);
        }
        else {
            console.error(`Error ${err}`);
        }
        // TODO: Resume showing toast
        if (showToast) {
            this.notification.showMessage({
                severity: 'error',
                summary: 'Error',
                detail: err.message
            });
        }
    }
    warning(message, methodName = '') {
        if (!methodName) {
            console.warn(`Method ${methodName}: Warning ${message}`);
        }
        else {
            console.warn(`Warning ${message}`);
        }
    }
    info(message, methodName = '', objectInfo = null) {
        if (!methodName) {
            // tslint:disable-next-line:no-console
            console.info(`Info : ${message}`, objectInfo);
        }
        else {
            // tslint:disable-next-line:no-console
            console.info(`[${methodName}] : ${message}`, objectInfo);
        }
    }
}
LoggingService.ɵfac = function LoggingService_Factory(t) { return new (t || LoggingService)(i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i2.AppSettingsQuery), i0.ɵɵinject(i3.UserAuthenticationQuery), i0.ɵɵinject(i4.HttpClient)); };
LoggingService.ɵprov = i0.ɵɵdefineInjectable({ token: LoggingService, factory: LoggingService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(LoggingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.NotificationService }, { type: i2.AppSettingsQuery }, { type: i3.UserAuthenticationQuery }, { type: i4.HttpClient }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL25nc2NhZmZvbGRpbmcvY29yZS9zcmMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9nZ2luZy9sb2dnaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0FBUzNDLE1BQU0sT0FBTyxjQUFjO0lBQ3ZCLFlBQW9CLFlBQWlDLEVBQVUsZ0JBQWtDLEVBQ3ZGLFNBQWtDLEVBQ2xDLElBQWdCO1FBRk4saUJBQVksR0FBWixZQUFZLENBQXFCO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUN2RixjQUFTLEdBQVQsU0FBUyxDQUF5QjtRQUNsQyxTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUcsQ0FBQztJQUV6QixLQUFLLENBQUMsR0FBUSxFQUFFLFVBQVUsR0FBRyxFQUFFLEVBQUUsU0FBUyxHQUFHLEtBQUs7UUFDdkQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxVQUFVLFdBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDL0I7UUFFRCw2QkFBNkI7UUFDN0IsSUFBSSxTQUFTLEVBQUU7WUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztnQkFDNUIsUUFBUSxFQUFFLE9BQU87Z0JBQ2pCLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU87YUFDcEIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRU0sT0FBTyxDQUFDLE9BQWUsRUFBRSxVQUFVLEdBQUcsRUFBRTtRQUM3QyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLFVBQVUsYUFBYSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFDTCxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFTSxJQUFJLENBQUMsT0FBZSxFQUFFLFVBQVUsR0FBRyxFQUFFLEVBQUUsYUFBa0IsSUFBSTtRQUNsRSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2Ysc0NBQXNDO1lBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxPQUFPLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUMvQzthQUFNO1lBQ0wsc0NBQXNDO1lBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxVQUFVLE9BQU8sT0FBTyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDOzs0RUF0Q1UsY0FBYztzREFBZCxjQUFjLFdBQWQsY0FBYyxtQkFGYixNQUFNO2tEQUVQLGNBQWM7Y0FIMUIsVUFBVTtlQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vbm90aWZpY2F0aW9uL25vdGlmaWNhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgQXBwU2V0dGluZ3NRdWVyeSB9IGZyb20gJy4uL2FwcFNldHRpbmdzL2FwcFNldHRpbmdzLnF1ZXJ5JztcclxuaW1wb3J0IHsgVXNlckF1dGhlbnRpY2F0aW9uUXVlcnkgfSBmcm9tICcuLi91c2VyQXV0aGVudGljYXRpb24vdXNlckF1dGhlbnRpY2F0aW9uLnF1ZXJ5JztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIExvZ2dpbmdTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25TZXJ2aWNlLCBwcml2YXRlIGFwcFNldHRpbmdzUXVlcnk6IEFwcFNldHRpbmdzUXVlcnksXHJcbiAgICAgIHByaXZhdGUgdXNlclF1ZXJ5OiBVc2VyQXV0aGVudGljYXRpb25RdWVyeSxcclxuICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxyXG5cclxuICBwdWJsaWMgZXJyb3IoZXJyOiBhbnksIG1ldGhvZE5hbWUgPSAnJywgc2hvd1RvYXN0ID0gZmFsc2UpOiB2b2lkIHtcclxuICAgIGlmICghbWV0aG9kTmFtZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBNZXRob2QgJHttZXRob2ROYW1lfTogRXJyb3IgJHtlcnJ9YCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciAke2Vycn1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUT0RPOiBSZXN1bWUgc2hvd2luZyB0b2FzdFxyXG4gICAgaWYgKHNob3dUb2FzdCkge1xyXG4gICAgICB0aGlzLm5vdGlmaWNhdGlvbi5zaG93TWVzc2FnZSh7XHJcbiAgICAgICAgc2V2ZXJpdHk6ICdlcnJvcicsXHJcbiAgICAgICAgc3VtbWFyeTogJ0Vycm9yJyxcclxuICAgICAgICBkZXRhaWw6IGVyci5tZXNzYWdlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHdhcm5pbmcobWVzc2FnZTogc3RyaW5nLCBtZXRob2ROYW1lID0gJycpOiB2b2lkIHtcclxuICAgIGlmICghbWV0aG9kTmFtZSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oYE1ldGhvZCAke21ldGhvZE5hbWV9OiBXYXJuaW5nICR7bWVzc2FnZX1gKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgV2FybmluZyAke21lc3NhZ2V9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIG1ldGhvZE5hbWUgPSAnJywgb2JqZWN0SW5mbzogYW55ID0gbnVsbCk6IHZvaWQge1xyXG4gICAgaWYgKCFtZXRob2ROYW1lKSB7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUuaW5mbyhgSW5mbyA6ICR7bWVzc2FnZX1gLCBvYmplY3RJbmZvKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUuaW5mbyhgWyR7bWV0aG9kTmFtZX1dIDogJHttZXNzYWdlfWAsIG9iamVjdEluZm8pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=