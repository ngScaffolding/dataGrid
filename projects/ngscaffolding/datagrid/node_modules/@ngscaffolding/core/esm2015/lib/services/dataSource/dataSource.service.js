import { Observable, of } from 'rxjs';
import { retry, timeout } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { AppSettings, } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./dataSource.store";
import * as i3 from "./dataSource.query";
import * as i4 from "../appSettings/appSettings.service";
import * as i5 from "../appAudit/appAudit.service";
import * as i6 from "../logging/logging.service";
export class DataSourceService {
    constructor(http, dataSourceStore, dataSourceQuery, appSettingsService, appAuditService, logger) {
        this.http = http;
        this.dataSourceStore = dataSourceStore;
        this.dataSourceQuery = dataSourceQuery;
        this.appSettingsService = appSettingsService;
        this.appAuditService = appAuditService;
        this.logger = logger;
        this.className = 'DataSourceService';
        this.inflightRequests = new Map();
    }
    decorateInput(inputDetails) {
        return null;
    }
    getDataSource(dataRequest) {
        const key = this.getKey(dataRequest);
        if (dataRequest.forceRefresh) {
            this.dataSourceStore.remove(key);
        }
        const currentCacheValue = this.dataSourceQuery.getEntity(key);
        if (currentCacheValue) {
            if (currentCacheValue.expiresWhen > new Date()) {
                // Return good cached value
                return of(currentCacheValue);
            }
            else {
                // Expired - Bad cache
                this.dataSourceStore.remove(key);
            }
        }
        if (this.inflightRequests.has(key)) {
            return this.inflightRequests.get(key);
        }
        // Make HTTP Request
        const formData = new FormData();
        formData.append('dataSourceRequest', JSON.stringify(dataRequest));
        // Add Files if passed
        if (dataRequest.fileNames) {
            let fileCount = 0;
            dataRequest.fileNames.forEach((file) => {
                formData.append(`file-${fileCount++}`, file, file.name);
            });
        }
        const logEntry = {
            entity: 'DataSource Call',
            action: key,
            values: {
                filterValues: dataRequest.filterValues,
                inputData: dataRequest.inputData,
            },
        };
        this.logger.info(`Calling Datasource ${dataRequest.name}`, null, logEntry.values);
        this.inflightRequests.set(key, new Observable((observer) => {
            this.http
                .post(`${this.appSettingsService.getValue(AppSettings.apiHome)}/api/v1/datasource`, formData)
                .pipe(timeout(20000), retry(3))
                .subscribe((values) => {
                const expiryNow = new Date();
                // If expires Seconds not provided set long expiry
                const expiresSeconds = values.expiresSeconds > 0 ? values.expiresSeconds : 99999999;
                const expiresWhen = new Date(expiryNow.getTime() + expiresSeconds * 10000);
                const newResults = {
                    expiresWhen: expiresWhen,
                    rowCount: values.rowCount,
                    jsonData: values.jsonData,
                    results: values.results,
                };
                // Log Datasource Success
                this.appAuditService.RecordLog(Object.assign(Object.assign({}, logEntry), { result: 'Success' }));
                // Update the Store to tell the world we have data
                this.dataSourceStore.update(key, newResults);
                this.inflightRequests.delete(key);
                observer.next(newResults);
                observer.complete();
            }, (err) => {
                // Update the Store to tell the world we failed in every way. Shame.
                const errorResults = {
                    expiresWhen: new Date(),
                    error: err.message,
                };
                // Log Datasource Success
                this.appAuditService.RecordLog(Object.assign(Object.assign({}, logEntry), { result: err.message }));
                this.dataSourceStore.update(key, errorResults);
                this.inflightRequests.delete(key);
                this.logger.error(err, 'DataSource.Service.getDataSource', false);
                observer.error(err);
            });
        }));
        return this.inflightRequests.get(key);
    }
    getKey(dataRequest) {
        return `name:${dataRequest.name} seed:${dataRequest.seed} inputData:${JSON.stringify(dataRequest.inputData)} `;
    }
}
DataSourceService.ɵfac = function DataSourceService_Factory(t) { return new (t || DataSourceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataSourceStore), i0.ɵɵinject(i3.DataSourceQuery), i0.ɵɵinject(i4.AppSettingsService), i0.ɵɵinject(i5.AppAuditService), i0.ɵɵinject(i6.LoggingService)); };
DataSourceService.ɵprov = i0.ɵɵdefineInjectable({ token: DataSourceService, factory: DataSourceService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DataSourceService, [{
        type: Injectable,
        args: [{
                providedIn: 'root',
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.DataSourceStore }, { type: i3.DataSourceQuery }, { type: i4.AppSettingsService }, { type: i5.AppAuditService }, { type: i6.LoggingService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,