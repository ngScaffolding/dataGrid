import { Injectable } from '@angular/core';
import { Observable, combineLatest } from 'rxjs';
// Models
import { UserPreferenceValue, AppSettings } from '@ngscaffolding/models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../userAuthentication/userAuthentication.query";
import * as i3 from "../appSettings/appSettings.query";
import * as i4 from "../logging/logging.service";
import * as i5 from "./userPreferences.store";
import * as i6 from "./userPreferences.query";
import * as i7 from "../appSettings/appSettings.service";
export class UserPreferencesService {
    constructor(http, authQuery, appSettingsQuery, logger, userPrefsStore, userPrefsQuery, appSettings) {
        this.http = http;
        this.authQuery = authQuery;
        this.appSettingsQuery = appSettingsQuery;
        this.logger = logger;
        this.userPrefsStore = userPrefsStore;
        this.userPrefsQuery = userPrefsQuery;
        this.appSettings = appSettings;
        this.className = 'UserPreferencesService';
        this.prefix = 'preference_';
        this.storageKey = 'UserPreferences';
        this.valuesDownloaded = false;
        this.definitionsDownloaded = false;
        this.httpInFlight = 0;
        // Wait for settings, then load from server
        combineLatest([this.authQuery.authenticated$, this.appSettingsQuery.selectEntity(AppSettings.apiHome)]).subscribe(([authenticated, apiHome]) => {
            if (authenticated && apiHome && !this.valuesDownloaded && !this.definitionsDownloaded) {
                this.apiHome = apiHome.value;
                if (!this.httpInFlight) {
                    // Load User Prefs from Localstorage
                    this.loadFromLocal();
                    // Load Pref Defs from server
                    this.getDefinitions();
                    // Load User Prefs from Server
                    this.getValues();
                }
            }
            else if (!authenticated) {
                // Clear Here as we logoff
                this.clearValues();
            }
        });
    }
    clearValues() {
        this.userPrefsStore.remove();
        // Save to LocalStorage
        localStorage.removeItem(this.storageKey);
    }
    deleteValue(name) {
        return new Observable(observer => {
            this.http.delete(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue/${name}`).subscribe(() => {
                // Remove and tell the world
                this.userPrefsStore.remove(name);
                localStorage.removeItem(this.storageKey);
                this.saveToLocal();
                observer.next();
                observer.complete();
            }, err => {
                observer.error(err);
            });
        });
    }
    getValues() {
        // Load values from Server
        this.httpInFlight++;
        this.http.get(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue`).subscribe(prefValues => {
            if (prefValues) {
                prefValues.forEach(prefValue => {
                    this.userPrefsStore.upsert(prefValue.name, prefValue);
                });
                this.userPrefsStore.setLoading(false);
                this.httpInFlight--;
                this.valuesDownloaded = true;
            }
        }, err => {
            this.httpInFlight--;
            this.logger.error(err, this.className, true);
        });
    }
    setValue(key, value) {
        return new Observable(observer => {
            this.http.post(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/userpreferencevalue`, { name: key, value: value }).subscribe(() => {
                const existingEntity = this.userPrefsQuery.getEntity(key);
                let newEntity = new UserPreferenceValue();
                if (existingEntity) {
                    newEntity = JSON.parse(JSON.stringify(existingEntity));
                }
                else {
                    newEntity.name = key;
                    newEntity.userId = this.authQuery.getValue().userDetails.userId;
                }
                newEntity.value = value;
                this.userPrefsStore.upsert(key, newEntity);
                observer.next();
                observer.complete();
            }, err => {
                observer.error(err);
            });
        });
    }
    getDefinitions() {
        this.httpInFlight++;
        this.http.get(`${this.appSettings.getValue(AppSettings.apiHome)}/api/v1/UserPreferenceDefinition`).subscribe(prefDefinitions => {
            if (prefDefinitions && prefDefinitions.length > 0) {
                let defns = [];
                prefDefinitions.forEach(definition => {
                    defns.push(definition);
                });
                this.httpInFlight--;
                this.definitionsDownloaded = true;
                this.userPrefsStore.update({ preferenceDefinitions: defns });
            }
        }, err => {
            this.httpInFlight--;
        });
    }
    loadFromLocal() {
        const stored = localStorage.getItem(this.storageKey);
        if (stored) {
            const map = JSON.parse(stored);
            if (map && map.length > 0) {
                map.forEach(value => {
                    // this.userPrefsStore.upsert(value.name, value.value);
                });
            }
        }
    }
    saveToLocal() {
        // Save to LocalStorage
        const serial = JSON.stringify(this.userPrefsQuery.getValue().entities);
        localStorage.setItem(this.storageKey, serial);
    }
}
UserPreferencesService.ɵfac = function UserPreferencesService_Factory(t) { return new (t || UserPreferencesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthenticationQuery), i0.ɵɵinject(i3.AppSettingsQuery), i0.ɵɵinject(i4.LoggingService), i0.ɵɵinject(i5.UserPreferencesStore), i0.ɵɵinject(i6.UserPreferencesQuery), i0.ɵɵinject(i7.AppSettingsService)); };
UserPreferencesService.ɵprov = i0.ɵɵdefineInjectable({ token: UserPreferencesService, factory: UserPreferencesService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(UserPreferencesService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: i2.UserAuthenticationQuery }, { type: i3.AppSettingsQuery }, { type: i4.LoggingService }, { type: i5.UserPreferencesStore }, { type: i6.UserPreferencesQuery }, { type: i7.AppSettingsService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,