import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { AppSettingsService } from '../appSettings/appSettings.service';
import { LoggingService } from '../logging/logging.service';
import { BaseEntity } from '@ngscaffolding/models';
import { AuthenticationStore } from './userAuthentication.store';
import { UserAuthenticationBase } from './UserAuthenticationBase';
import { UserAuthenticationQuery } from './userAuthentication.query';
import { Router } from '@angular/router';
import * as i0 from "@angular/core";
export declare class UserAuthenticationService implements UserAuthenticationBase {
    private logger;
    private http;
    private authStore;
    private authQuery;
    private appSettingsService;
    private router;
    private readonly tokenStorageKey;
    private jwtHelper;
    constructor(logger: LoggingService, http: HttpClient, authStore: AuthenticationStore, authQuery: UserAuthenticationQuery, appSettingsService: AppSettingsService, router: Router);
    filterItemsByRole(authItems: BaseEntity[]): Array<BaseEntity>;
    checkByRoles(authItem: BaseEntity): boolean;
    completeAuthentication(): void;
    isAuthenticated(): boolean;
    authorizationHeaderValue(): void;
    name(): string;
    forceLogon(returnUrl: string): void;
    getToken(): string;
    private loadUserTokenFromStorage;
    private setToken;
    logon(userName: string, password: string): Observable<null>;
    logoff(): void;
    static ɵfac: i0.ɵɵFactoryDef<UserAuthenticationService, never>;
    static ɵprov: i0.ɵɵInjectableDef<UserAuthenticationService>;
}
//# sourceMappingURL=userAuthentication.service.d.ts.map