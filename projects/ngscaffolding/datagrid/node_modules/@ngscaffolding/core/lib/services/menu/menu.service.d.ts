import { RolesService } from '../rolesService/roles.service';
import { Route } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { LoggingService } from '../logging/logging.service';
import { CoreMenuItem } from '@ngscaffolding/models';
import { AppSettingsQuery } from '../appSettings/appSettings.query';
import { UserAuthenticationQuery } from '../userAuthentication/userAuthentication.query';
import { MenuStore } from './menu.store';
import { MenuQuery } from './menu.query';
import * as i0 from "@angular/core";
export declare class MenuService {
    private http;
    private menuStore;
    private menuQuery;
    private appSettingsQuery;
    private authQuery;
    private log;
    rolesService: RolesService;
    private readonly methodName;
    private masterListMenu;
    private routes;
    private menuItems;
    private apiHome;
    routeSubject: BehaviorSubject<Route[]>;
    private httpInFlight;
    private lockCount;
    private menuDownloaded;
    constructor(http: HttpClient, menuStore: MenuStore, menuQuery: MenuQuery, appSettingsQuery: AppSettingsQuery, authQuery: UserAuthenticationQuery, log: LoggingService, rolesService: RolesService);
    private addLock;
    setCurrent(name: string): void;
    private removeLock;
    addMenuItemsFromCode(menuItems: CoreMenuItem[], roles?: string[]): void;
    getFolders(): CoreMenuItem[];
    delete(menuItem: CoreMenuItem): Observable<any>;
    saveMenuItem(menuItem: CoreMenuItem): Observable<any>;
    updateExistingMenuItem(menuItem: CoreMenuItem): void;
    private addMenuItemsToReferenceList;
    private removeUnauthorisedMenuItems;
    downloadMenuItems(isMobile: boolean): void;
    addMenuItems(newMenuItems: CoreMenuItem[], findInTree?: boolean): void;
    private calculateRouterLinks;
    addRoute(route: Route, roles?: string[]): void;
    private upsertMenuItemToExistingTree;
    private addNewMenuItemToEntities;
    static ɵfac: i0.ɵɵFactoryDef<MenuService, never>;
    static ɵprov: i0.ɵɵInjectableDef<MenuService>;
}
//# sourceMappingURL=menu.service.d.ts.map